owlapy.owl_ontology
===================

.. py:module:: owlapy.owl_ontology

.. autoapi-nested-parse::

   OWL Ontology



Attributes
----------

.. autoapisummary::

   owlapy.owl_ontology.logger
   owlapy.owl_ontology.OWLREADY2_FACET_KEYS


Classes
-------

.. autoapisummary::

   owlapy.owl_ontology.OWLOntologyID
   owlapy.owl_ontology.Ontology
   owlapy.owl_ontology.SyncOntology
   owlapy.owl_ontology.ToOwlready2
   owlapy.owl_ontology.FromOwlready2


Module Contents
---------------

.. py:data:: logger

.. py:class:: OWLOntologyID(ontology_iri: Optional[owlapy.iri.IRI] = None, version_iri: Optional[owlapy.iri.IRI] = None)

   An object that identifies an ontology. Since OWL 2, ontologies do not have to have an ontology IRI, or if they
   have an ontology IRI then they can optionally also have a version IRI. Instances of this OWLOntologyID class bundle
   identifying information of an ontology together. If an ontology doesn't have an ontology IRI then we say that it is
   "anonymous".


   .. py:attribute:: __slots__
      :value: ('_ontology_iri', '_version_iri')



   .. py:method:: get_ontology_iri() -> Optional[owlapy.iri.IRI]

      Gets the ontology IRI.

      :returns: Ontology IRI. If the ontology is anonymous, it will return None.



   .. py:method:: get_version_iri() -> Optional[owlapy.iri.IRI]

      Gets the version IRI.

      :returns: Version IRI or None.



   .. py:method:: get_default_document_iri() -> Optional[owlapy.iri.IRI]

      Gets the IRI which is used as a default for the document that contain a representation of an ontology with
      this ID. This will be the version IRI if there is an ontology IRI and version IRI, else it will be the ontology
      IRI if there is an ontology IRI but no version IRI, else it will be None if there is no ontology IRI. See
      Ontology Documents in the OWL 2 Structural Specification.

      :returns: the IRI that can be used as a default for an ontology document, or None.



   .. py:method:: is_anonymous() -> bool


   .. py:method:: __repr__()


   .. py:method:: __eq__(other)


.. py:class:: Ontology(manager: _OM, ontology_iri: owlapy.iri.IRI, load: bool)

   Bases: :py:obj:`owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: __slots__
      :value: ('_manager', '_iri', '_world', '_onto')



   .. py:method:: __len__() -> int


   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]

      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]

      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]

      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: properties_in_signature() -> Iterable[owlapy.owl_property.OWLProperty]


   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: tbox_axioms() -> Iterable
      :abstractmethod:



   .. py:method:: abox_axioms_between_individuals() -> Iterable
      :abstractmethod:



   .. py:method:: abox_axioms_between_individuals_and_classes() -> Iterable
      :abstractmethod:



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]

      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]

      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: get_owl_ontology_manager() -> _OM

      Gets the manager that manages this ontology.



   .. py:method:: get_ontology_id() -> OWLOntologyID

      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: data_property_domain_axioms(pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]

      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]

      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(pe: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]

      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(pe: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]

      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: add_axiom(axiom: Union[owlapy.owl_axiom.OWLAxiom, Iterable[owlapy.owl_axiom.OWLAxiom]])

      Add the specified axiom/axioms to the ontology.

      :param axiom: Can be a single axiom or a collection of axioms.

      :returns: Nothing.



   .. py:method:: remove_axiom(axiom: Union[owlapy.owl_axiom.OWLAxiom, Iterable[owlapy.owl_axiom.OWLAxiom]])

      Removes the specified axiom/axioms to the ontology.

      :param axiom: Can be a single axiom or a collection of axioms.

      :returns: Nothing.



   .. py:method:: save(path: Union[str, owlapy.iri.IRI] = None, inplace: bool = False, rdf_format='rdfxml')

      Saves this ontology, using its IRI to determine where/how the ontology should be
      saved.

      :param document_iri: Whether you want to save in a different location.



   .. py:method:: get_original_iri()

      Get the IRI argument that was used to create this ontology.



   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: __repr__()


.. py:class:: SyncOntology(manager: _SM, path: Union[owlapy.iri.IRI, str], new: bool = False)

   Bases: :py:obj:`owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: manager


   .. py:attribute:: path


   .. py:attribute:: new


   .. py:attribute:: mapper


   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]

      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]

      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]

      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]

      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]

      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: data_property_domain_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]

      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]

      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]

      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]

      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: get_signature(include_imports_closure: bool = True)

      Gets the entities that are in the signature of this ontology.

      :param include_imports_closure: Whether to include/exclude imports from searches.

      :returns: Entities in signature.



   .. py:method:: get_abox_axioms(include_imports_closure: bool = True) -> Iterable[owlapy.owl_axiom.OWLAxiom]

      Get all ABox axioms.

      :param include_imports_closure: Whether to include/exclude imports from searches.

      :returns: ABox axioms.



   .. py:method:: get_tbox_axioms(include_imports_closure: bool = True) -> Iterable[owlapy.owl_axiom.OWLAxiom]

      Get all TBox axioms.

      :param include_imports_closure: Whether to include/exclude imports from searches.

      :returns: TBox axioms.



   .. py:method:: get_owl_ontology_manager() -> _M

      Gets the manager that manages this ontology.



   .. py:method:: get_owlapi_ontology()


   .. py:method:: get_ontology_id() -> OWLOntologyID

      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: add_axiom(axiom: Union[owlapy.owl_axiom.OWLAxiom, Iterable[owlapy.owl_axiom.OWLAxiom]])

      Add the specified axiom/axioms to the ontology.

      :param axiom: Can be a single axiom or a collection of axioms.

      :returns: Nothing.



   .. py:method:: remove_axiom(axiom: Union[owlapy.owl_axiom.OWLAxiom, Iterable[owlapy.owl_axiom.OWLAxiom]])

      Removes the specified axiom/axioms to the ontology.

      :param axiom: Can be a single axiom or a collection of axioms.

      :returns: Nothing.



   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: __repr__()


.. py:data:: OWLREADY2_FACET_KEYS

.. py:class:: ToOwlready2(world: owlready2.World)

   .. py:attribute:: __slots__
      :value: '_world'



   .. py:method:: map_object(o: owlapy.owl_object.OWLObject)
      :abstractmethod:


      Map owlapy object classes.



   .. py:method:: map_concept(o: owlapy.class_expression.OWLClassExpression) -> Union[owlready2.ClassConstruct, owlready2.ThingClass]
      :abstractmethod:


      Map owlapy concept classes.



   .. py:method:: map_datarange(p: owlapy.owl_data_ranges.OWLDataRange) -> Union[owlready2.ClassConstruct, type]
      :abstractmethod:


      Map owlapy data range classes.



.. py:class:: FromOwlready2

   Map owlready2 classes to owlapy model classes.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: map_concept(c: Union[owlready2.ClassConstruct, owlready2.ThingClass]) -> owlapy.class_expression.OWLClassExpression
      :abstractmethod:


      Map concept classes.



   .. py:method:: map_datarange(p: owlready2.ClassConstruct) -> owlapy.owl_data_ranges.OWLDataRange
      :abstractmethod:


      Map data range classes.



