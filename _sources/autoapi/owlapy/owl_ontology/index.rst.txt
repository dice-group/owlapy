owlapy.owl_ontology
===================

.. py:module:: owlapy.owl_ontology

.. autoapi-nested-parse::

   OWL Ontology



Attributes
----------

.. autoapisummary::

   owlapy.owl_ontology.IntegerOWLDatatype
   owlapy.owl_ontology.DoubleOWLDatatype
   owlapy.owl_ontology.BooleanOWLDatatype
   owlapy.owl_ontology.StringOWLDatatype
   owlapy.owl_ontology.DateOWLDatatype
   owlapy.owl_ontology.DateTimeOWLDatatype
   owlapy.owl_ontology.DurationOWLDatatype
   owlapy.owl_ontology.OWLThing
   owlapy.owl_ontology.logger
   owlapy.owl_ontology.OWLREADY2_FACET_KEYS


Classes
-------

.. autoapisummary::

   owlapy.owl_ontology.OWLEquivalentClassesAxiom
   owlapy.owl_ontology.OWLClassAxiom
   owlapy.owl_ontology.OWLDataPropertyDomainAxiom
   owlapy.owl_ontology.OWLDataPropertyRangeAxiom
   owlapy.owl_ontology.OWLObjectPropertyDomainAxiom
   owlapy.owl_ontology.OWLObjectPropertyRangeAxiom
   owlapy.owl_ontology.OWLSubClassOfAxiom
   owlapy.owl_ontology.OWLAnnotationProperty
   owlapy.owl_ontology.OWLDataRange
   owlapy.owl_ontology.OWLDataComplementOf
   owlapy.owl_ontology.OWLDataUnionOf
   owlapy.owl_ontology.OWLDataIntersectionOf
   owlapy.owl_ontology.OWLDatatype
   owlapy.owl_ontology.OWLNamedIndividual
   owlapy.owl_ontology.OWLIndividual
   owlapy.owl_ontology.OWLLiteral
   owlapy.owl_ontology.OWLObject
   owlapy.owl_ontology.IRI
   owlapy.owl_ontology.OWLClass
   owlapy.owl_ontology.OWLClassExpression
   owlapy.owl_ontology.OWLObjectComplementOf
   owlapy.owl_ontology.OWLObjectUnionOf
   owlapy.owl_ontology.OWLObjectIntersectionOf
   owlapy.owl_ontology.OWLObjectSomeValuesFrom
   owlapy.owl_ontology.OWLObjectAllValuesFrom
   owlapy.owl_ontology.OWLObjectOneOf
   owlapy.owl_ontology.OWLObjectExactCardinality
   owlapy.owl_ontology.OWLObjectMaxCardinality
   owlapy.owl_ontology.OWLObjectMinCardinality
   owlapy.owl_ontology.OWLObjectHasValue
   owlapy.owl_ontology.OWLDataSomeValuesFrom
   owlapy.owl_ontology.OWLDataAllValuesFrom
   owlapy.owl_ontology.OWLDataExactCardinality
   owlapy.owl_ontology.OWLDataMaxCardinality
   owlapy.owl_ontology.OWLDataMinCardinality
   owlapy.owl_ontology.OWLDataHasValue
   owlapy.owl_ontology.OWLDataOneOf
   owlapy.owl_ontology.OWLDatatypeRestriction
   owlapy.owl_ontology.OWLRestriction
   owlapy.owl_ontology.OWLObjectRestriction
   owlapy.owl_ontology.OWLDataRestriction
   owlapy.owl_ontology.OWLFacetRestriction
   owlapy.owl_ontology.OWLDataProperty
   owlapy.owl_ontology.OWLObjectProperty
   owlapy.owl_ontology.OWLPropertyExpression
   owlapy.owl_ontology.OWLObjectInverseOf
   owlapy.owl_ontology.OWLObjectPropertyExpression
   owlapy.owl_ontology.OWLDataPropertyExpression
   owlapy.owl_ontology.OWLFacet
   owlapy.owl_ontology.OWLOntologyID
   owlapy.owl_ontology.OWLOntology
   owlapy.owl_ontology.Ontology
   owlapy.owl_ontology.ToOwlready2
   owlapy.owl_ontology.FromOwlready2


Module Contents
---------------

.. py:class:: OWLEquivalentClassesAxiom(class_expressions: List[owlapy.class_expression.OWLClassExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryClassAxiom`


   An equivalent classes axiom EquivalentClasses( CE1 ... CEn ) states that all of the class expressions CEi,
   1 ≤ i ≤ n, are semantically equivalent to each other. This axiom allows one to use each CEi as a synonym
   for each CEj — that is, in any expression in the ontology containing such an axiom, CEi can be replaced
   with CEj without affecting the meaning of the ontology.

   (https://www.w3.org/TR/owl2-syntax/#Equivalent_Classes)


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: contains_named_equivalent_class() -> bool


   .. py:method:: contains_owl_nothing() -> bool


   .. py:method:: contains_owl_thing() -> bool


   .. py:method:: named_classes() -> Iterable[owlapy.class_expression.OWLClass]


.. py:class:: OWLClassAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLLogicalAxiom`


   The base interface for class axioms.


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLDataPropertyDomainAxiom(property_: owlapy.owl_property.OWLDataPropertyExpression, domain: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLPropertyDomainAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLDataPropertyExpression`\ ]


   A data property domain axiom DataPropertyDomain( DPE CE ) states that the domain of the
   data property expression DPE is the class expression CE — that is, if an individual x is
   connected by DPE with some literal, then x is an instance of CE. Each such axiom can be
   seen as a syntactic shortcut for the following axiom:
   SubClassOf( DataSomeValuesFrom( DPE rdfs:Literal) CE )

   (https://www.w3.org/TR/owl2-syntax/#Data_Property_Domain)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLDataPropertyRangeAxiom(property_: owlapy.owl_property.OWLDataPropertyExpression, range_: owlapy.owl_datatype.OWLDataRange, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLPropertyRangeAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLDataPropertyExpression`\ , :py:obj:`owlapy.owl_datatype.OWLDataRange`\ ]


   A data property range axiom DataPropertyRange( DPE DR ) states that the range of the data property
   expression DPE is the data range DR — that is, if some individual is connected by DPE with a literal x,
   then x is in DR. The arity of DR must be one. Each such axiom can be seen as a syntactic shortcut for
   the following axiom:  SubClassOf( owl:Thing DataAllValuesFrom( DPE DR ) )

   (https://www.w3.org/TR/owl2-syntax/#Data_Property_Range)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLObjectPropertyDomainAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, domain: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLPropertyDomainAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLObjectPropertyExpression`\ ]


   An object property domain axiom ObjectPropertyDomain( OPE CE ) states that the domain of the
   object property expression OPE is the class expression CE — that is, if an individual x is
   connected by OPE with some other individual, then x is an instance of CE. Each such axiom can
   be seen as a syntactic shortcut for the following axiom:
   SubClassOf( ObjectSomeValuesFrom( OPE owl:Thing ) CE )

   (https://www.w3.org/TR/owl2-syntax/#Object_Property_Domain)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLObjectPropertyRangeAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, range_: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLPropertyRangeAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLObjectPropertyExpression`\ , :py:obj:`owlapy.class_expression.OWLClassExpression`\ ]


   An object property range axiom ObjectPropertyRange( OPE CE ) states that the range of the object property
   expression OPE is the class expression CE — that is, if some individual is connected by OPE with an individual x,
   then x is an instance of CE. Each such axiom can be seen as a syntactic shortcut for the following axiom:
   SubClassOf( owl:Thing ObjectAllValuesFrom( OPE CE ) )

   (https://www.w3.org/TR/owl2-syntax/#Object_Property_Range)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLSubClassOfAxiom(sub_class: owlapy.class_expression.OWLClassExpression, super_class: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLClassAxiom`


   A subclass axiom SubClassOf( CE1 CE2 ) states that the class expression CE1 is a subclass of the class
   expression CE2. Roughly speaking, this states that CE1 is more specific than CE2. Subclass axioms are a
   fundamental type of axioms in OWL 2 and can be used to construct a class hierarchy. Other kinds of class
   expression axiom can be seen as syntactic shortcuts for one or more subclass axioms.

    (https://www.w3.org/TR/owl2-syntax/#Subclass_Axioms)



   .. py:attribute:: __slots__
      :value: ('_sub_class', '_super_class')



   .. py:method:: get_sub_class() -> owlapy.class_expression.OWLClassExpression


   .. py:method:: get_super_class() -> owlapy.class_expression.OWLClassExpression


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLAnnotationProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`owlapy.owl_property.OWLProperty`


   Represents an AnnotationProperty in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLDataRange

   Bases: :py:obj:`OWLPropertyRange`


   Represents a DataRange in the OWL 2 Specification.


.. py:class:: OWLDataComplementOf(data_range: OWLDataRange)

   Bases: :py:obj:`OWLDataRange`


   A complement data range DataComplementOf( DR ) contains all tuples of literals that are not contained in the
   data range DR. The resulting data range has the arity equal to the arity of DR.

   (https://www.w3.org/TR/owl2-syntax/#Complement_of_Data_Ranges)


   .. py:attribute:: type_index
      :type:  Final
      :value: 4002



   .. py:method:: get_data_range() -> OWLDataRange

      :returns: The wrapped data range.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataUnionOf(operands: Iterable[OWLDataRange])

   Bases: :py:obj:`OWLNaryDataRange`


   A union data range DataUnionOf( DR1 ... DRn ) contains all tuples of literals that are contained in the at least
   one data range DRi for 1 ≤ i ≤ n. All data ranges DRi must be of the same arity, and the resulting data range is of
   that arity as well.

   (https://www.w3.org/TR/owl2-syntax/#Union_of_Data_Ranges)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4005



.. py:class:: OWLDataIntersectionOf(operands: Iterable[OWLDataRange])

   Bases: :py:obj:`OWLNaryDataRange`


   An intersection data range DataIntersectionOf( DR1 ... DRn ) contains all tuples of literals that are contained
   in each data range DRi for 1 ≤ i ≤ n. All data ranges DRi must be of the same arity, and the resulting data range
   is of that arity as well.

   (https://www.w3.org/TR/owl2-syntax/#Intersection_of_Data_Ranges)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4004



.. py:class:: OWLDatatype(iri: Union[owlapy.iri.IRI, owlapy.meta_classes.HasIRI])

   Bases: :py:obj:`owlapy.owl_object.OWLEntity`, :py:obj:`owlapy.owl_data_ranges.OWLDataRange`


   Datatypes are entities that refer to sets of data values. Thus, datatypes are analogous to classes,
   the main difference being that the former contain data values such as strings and numbers, rather than individuals.
   Datatypes are a kind of data range, which allows them to be used in restrictions. Each data range is associated
   with an arity; for datatypes, the arity is always one. The built-in datatype rdfs:Literal denotes any set of data
   values that contains the union of the value spaces of all datatypes.

   (https://www.w3.org/TR/owl2-syntax/#Datatypes)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4001



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLNamedIndividual(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLIndividual`, :py:obj:`owlapy.owl_object.OWLEntity`


   Named individuals are identified using an IRI. Since they are given an IRI, named individuals are entities.
   IRIs from the reserved vocabulary must not be used to identify named individuals in an OWL 2 DL ontology.

   (https://www.w3.org/TR/owl2-syntax/#Named_Individuals)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1005



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLIndividual

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents a named or anonymous individual.


   .. py:attribute:: __slots__
      :value: ()



.. py:data:: IntegerOWLDatatype
   :type:  Final

.. py:data:: DoubleOWLDatatype
   :type:  Final

.. py:data:: BooleanOWLDatatype
   :type:  Final

.. py:data:: StringOWLDatatype
   :type:  Final

.. py:data:: DateOWLDatatype
   :type:  Final

.. py:data:: DateTimeOWLDatatype
   :type:  Final

.. py:data:: DurationOWLDatatype
   :type:  Final

.. py:class:: OWLLiteral

   Bases: :py:obj:`owlapy.owl_annotation.OWLAnnotationValue`


   Literals represent data values such as particular strings or integers. They are analogous to typed RDF
   literals and can also be understood as individuals denoting
   data values. Each literal consists of a lexical form, which is a string, and a datatype.

    (https://www.w3.org/TR/owl2-syntax/#Literals)



   .. py:attribute:: __slots__
      :value: ()



   .. py:attribute:: type_index
      :type:  Final
      :value: 4008



   .. py:method:: get_literal() -> str

      Gets the lexical value of this literal. Note that the language tag is not included.

      :returns: The lexical value of this literal.



   .. py:method:: is_boolean() -> bool

      Whether this literal is typed as boolean.



   .. py:method:: parse_boolean() -> bool

      Parses the lexical value of this literal into a bool. The lexical value of this literal should be in the
      lexical space of the boolean datatype ("http://www.w3.org/2001/XMLSchema#boolean").

      :returns: A bool value that is represented by this literal.



   .. py:method:: is_double() -> bool

      Whether this literal is typed as double.



   .. py:method:: parse_double() -> float

      Parses the lexical value of this literal into a double. The lexical value of this literal should be in the
      lexical space of the double datatype ("http://www.w3.org/2001/XMLSchema#double").

      :returns: A double value that is represented by this literal.



   .. py:method:: is_integer() -> bool

      Whether this literal is typed as integer.



   .. py:method:: parse_integer() -> int

      Parses the lexical value of this literal into an integer. The lexical value of this literal should be in the
      lexical space of the integer datatype ("http://www.w3.org/2001/XMLSchema#integer").

      :returns: An integer value that is represented by this literal.



   .. py:method:: is_string() -> bool

      Whether this literal is typed as string.



   .. py:method:: parse_string() -> str

      Parses the lexical value of this literal into a string. The lexical value of this literal should be in the
      lexical space of the string datatype ("http://www.w3.org/2001/XMLSchema#string").

      :returns: A string value that is represented by this literal.



   .. py:method:: is_date() -> bool

      Whether this literal is typed as date.



   .. py:method:: parse_date() -> datetime.date

      Parses the lexical value of this literal into a date. The lexical value of this literal should be in the
      lexical space of the date datatype ("http://www.w3.org/2001/XMLSchema#date").

      :returns: A date value that is represented by this literal.



   .. py:method:: is_datetime() -> bool

      Whether this literal is typed as dateTime.



   .. py:method:: parse_datetime() -> datetime.datetime

      Parses the lexical value of this literal into a datetime. The lexical value of this literal should be in the
      lexical space of the dateTime datatype ("http://www.w3.org/2001/XMLSchema#dateTime").

      :returns: A datetime value that is represented by this literal.



   .. py:method:: is_duration() -> bool

      Whether this literal is typed as duration.



   .. py:method:: parse_duration() -> pandas.Timedelta

      Parses the lexical value of this literal into a Timedelta. The lexical value of this literal should be in the
      lexical space of the duration datatype ("http://www.w3.org/2001/XMLSchema#duration").

      :returns: A Timedelta value that is represented by this literal.



   .. py:method:: is_literal() -> bool

      :returns: true if the annotation value is a literal



   .. py:method:: as_literal() -> OWLLiteral

      :returns: if the value is a literal, returns it. Return None otherwise



   .. py:method:: to_python() -> Literals


   .. py:method:: get_datatype() -> owlapy.owl_datatype.OWLDatatype
      :abstractmethod:


      Gets the OWLDatatype which types this literal.

      :returns: The OWLDatatype that types this literal.



.. py:class:: OWLObject

   Base interface for OWL objects


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: __eq__(other)
      :abstractmethod:


      Return self==value.



   .. py:method:: __hash__()
      :abstractmethod:


      Return hash(self).



   .. py:method:: __repr__()
      :abstractmethod:


      Return repr(self).



   .. py:method:: is_anonymous() -> bool


.. py:class:: IRI(namespace: Union[str, owlapy.namespaces.Namespaces], remainder: str)

   Bases: :py:obj:`owlapy.owl_annotation.OWLAnnotationSubject`, :py:obj:`owlapy.owl_annotation.OWLAnnotationValue`


   An IRI, consisting of a namespace and a remainder.


   .. py:attribute:: __slots__
      :value: ('_namespace', '_remainder', '__weakref__')



   .. py:attribute:: type_index
      :type:  Final
      :value: 0



   .. py:method:: create(namespace: owlapy.namespaces.Namespaces, remainder: str) -> IRI
                  create(namespace: str, remainder: str) -> IRI
                  create(string: str) -> IRI
      :staticmethod:



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: is_nothing()

      Determines if this IRI is equal to the IRI that owl:Nothing is named with.

      :returns: True if this IRI is equal to <http://www.w3.org/2002/07/owl#Nothing> and otherwise False.



   .. py:method:: is_thing()

      Determines if this IRI is equal to the IRI that owl:Thing is named with.

      :returns: True if this IRI is equal to <http://www.w3.org/2002/07/owl#Thing> and otherwise False.



   .. py:method:: is_reserved_vocabulary() -> bool

      Determines if this IRI is in the reserved vocabulary. An IRI is in the reserved vocabulary if it starts with
      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> or <http://www.w3.org/2000/01/rdf-schema#> or
      <http://www.w3.org/2001/XMLSchema#> or <http://www.w3.org/2002/07/owl#>.

      :returns: True if the IRI is in the reserved vocabulary, otherwise False.



   .. py:method:: as_iri() -> IRI

      :returns: if the value is an IRI, return it. Return Mone otherwise.



   .. py:method:: as_str() -> str

      CD: Should be deprecated.
      :returns: The string that specifies the IRI.



   .. py:property:: str
      :type: str

      Returns:
      The string that specifies the IRI.


   .. py:property:: reminder
      :type: str

      Returns:
      The string corresponding to the reminder of the IRI.


   .. py:method:: get_short_form() -> str

      Gets the short form.

      :returns: A string that represents the short form.



   .. py:method:: get_namespace() -> str

      :returns: The namespace as string.



   .. py:method:: get_remainder() -> str

      :returns: The remainder (coincident with NCName usually) for this IRI.



.. py:class:: OWLClass(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`, :py:obj:`owlapy.owl_object.OWLEntity`


   An OWL 2 named Class. Classes can be understood as sets of individuals.
   (https://www.w3.org/TR/owl2-syntax/#Classes)


   .. py:attribute:: __slots__
      :value: ('_iri', '_is_nothing', '_is_thing')



   .. py:attribute:: type_index
      :type:  Final
      :value: 1001



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      Gets the string representation of this object

      :returns: The IRI as string


   .. py:property:: reminder
      :type: str

      The reminder of the IRI


   .. py:method:: is_owl_thing() -> bool

      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl



   .. py:method:: is_owl_nothing() -> bool

      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.



   .. py:method:: get_object_complement_of() -> owlapy.class_expression.class_expression.OWLObjectComplementOf

      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.



   .. py:method:: get_nnf() -> OWLClass

      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:data:: OWLThing
   :type:  Final

.. py:class:: OWLClassExpression

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLPropertyRange`


   OWL Class expressions represent sets of individuals by formally specifying conditions on the individuals' properties;
   individuals satisfying these conditions are said to be instances of the respective class expressions.
   In the structural specification of OWL 2, class expressions are represented by ClassExpression.
   (https://www.w3.org/TR/owl2-syntax/#Class_Expressions)


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_owl_thing() -> bool
      :abstractmethod:


      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl



   .. py:method:: is_owl_nothing() -> bool
      :abstractmethod:


      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.



   .. py:method:: get_object_complement_of() -> OWLObjectComplementOf
      :abstractmethod:


      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.



   .. py:method:: get_nnf() -> OWLClassExpression
      :abstractmethod:


      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: OWLObjectComplementOf(op: OWLClassExpression)

   Bases: :py:obj:`OWLBooleanClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`OWLClassExpression`\ ]


   Represents an ObjectComplementOf class expression in the OWL 2 Specification.


   .. py:attribute:: __slots__
      :value: '_operand'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3003



   .. py:method:: get_operand() -> OWLClassExpression

      :returns: The wrapped expression.



   .. py:method:: operands() -> Iterable[OWLClassExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectUnionOf(operands: Iterable[owlapy.class_expression.class_expression.OWLClassExpression])

   Bases: :py:obj:`OWLNaryBooleanClassExpression`


   A union class expression ObjectUnionOf( CE1 ... CEn ) contains all individuals that are instances
   of at least one class expression CEi for 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Union_of_Class_Expressions)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3002



.. py:class:: OWLObjectIntersectionOf(operands: Iterable[owlapy.class_expression.class_expression.OWLClassExpression])

   Bases: :py:obj:`OWLNaryBooleanClassExpression`


   An intersection class expression ObjectIntersectionOf( CE1 ... CEn ) contains all individuals that are instances
   of all class expressions CEi for 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Intersection_of_Class_Expressions)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3001



.. py:class:: OWLObjectSomeValuesFrom(property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedObjectRestriction`


   An existential class expression ObjectSomeValuesFrom( OPE CE ) consists of an object property expression OPE and
   a class expression CE, and it contains all those individuals that are connected by OPE to an individual that is
   an instance of CE.


   .. py:attribute:: __slots__
      :value: ('_property', '_filler')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3005



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectAllValuesFrom(property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedObjectRestriction`


   A universal class expression ObjectAllValuesFrom( OPE CE ) consists of an object property expression OPE and a
   class expression CE, and it contains all those individuals that are connected by OPE only to
   individuals that are instances of CE. (https://www.w3.org/TR/owl2-syntax/#Universal_Quantification)


   .. py:attribute:: __slots__
      :value: ('_property', '_filler')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3006



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectOneOf(values: Union[owlapy.owl_individual.OWLIndividual, Iterable[owlapy.owl_individual.OWLIndividual]])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLAnonymousClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ]


   An enumeration of individuals ObjectOneOf( a1 ... an ) contains exactly the individuals ai with 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Individuals)


   .. py:attribute:: __slots__
      :value: '_values'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3004



   .. py:method:: individuals() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the individuals that are in the oneOf. These individuals represent the exact instances (extension)
      of this class expression.

      :returns: The individuals that are the values of this {@code ObjectOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: as_object_union_of() -> owlapy.class_expression.class_expression.OWLClassExpression

      Simplifies this enumeration to a union of singleton nominals.

      :returns: This enumeration in a more standard DL form.
                simp({a}) = {a} simp({a0, ... , {an}) = unionOf({a0}, ... , {an})



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectExactCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   An exact cardinality expression ObjectExactCardinality( n OPE CE ) consists of a nonnegative integer n, an object
    property expression OPE, and a class expression CE, and it contains all those individuals that are connected by
    to exactly n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Exact_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3009



   .. py:method:: as_intersection_of_min_max() -> owlapy.class_expression.nary_boolean_expression.OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R C) = >= 1 R C and <= 1 R C.



.. py:class:: OWLObjectMaxCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   A maximum cardinality expression ObjectMaxCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
    to at most n different individuals that are instances of CE.
    (https://www.w3.org/TR/owl2-syntax/#Maximum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3010



.. py:class:: OWLObjectMinCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   A minimum cardinality expression ObjectMinCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
   to at least n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Minimum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3008



.. py:class:: OWLObjectHasValue(property: owlapy.owl_property.OWLObjectPropertyExpression, individual: owlapy.owl_individual.OWLIndividual)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ], :py:obj:`OWLObjectRestriction`


   A has-value class expression ObjectHasValue( OPE a ) consists of an object property expression OPE and an
   individual a, and it contains all those individuals that are connected by OPE to a. Each such class expression
   can be seen as a syntactic shortcut for the class expression ObjectSomeValuesFrom( OPE ObjectOneOf( a ) ).
   (https://www.w3.org/TR/owl2-syntax/#Individual_Value_Restriction)


   .. py:attribute:: __slots__
      :value: ('_property', '_v')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3007



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDataSomeValuesFrom(property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedDataRestriction`


   An existential class expression DataSomeValuesFrom( DPE1 ... DPEn DR ) consists of n data property expressions
   DPEi, 1 ≤ i ≤ n, and a data range DR whose arity must be n. Such a class expression contains all those individuals
   that are connected by DPEi to literals lti, 1 ≤ i ≤ n, such that the tuple ( lt1 , ..., ltn ) is in DR. A class
   expression of the form DataSomeValuesFrom( DPE DR ) can be seen as a syntactic shortcut for the class expression
   DataMinCardinality( 1 DPE DR ).
   (https://www.w3.org/TR/owl2-syntax/#Existential_Quantification_2)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3012



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataAllValuesFrom(property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedDataRestriction`


   A universal class expression DataAllValuesFrom( DPE1 ... DPEn DR ) consists of n data property expressions DPEi,
   1 ≤ i ≤ n, and a data range DR whose arity must be n. Such a class expression contains all those individuals that
    are connected by DPEi only to literals lti, 1 ≤ i ≤ n, such that each tuple ( lt1 , ..., ltn ) is in DR. A class
     expression of the form DataAllValuesFrom( DPE DR ) can be seen as a syntactic shortcut for the class expression
     DataMaxCardinality( 0 DPE DataComplementOf( DR ) ).
     (https://www.w3.org/TR/owl2-syntax/#Universal_Quantification_2)



   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3013



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataExactCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   An exact cardinality expression ObjectExactCardinality( n OPE CE ) consists of a nonnegative integer n, an
   object property expression OPE, and a class expression CE, and it contains all those individuals that are connected
    by OPE to exactly n different individuals that are instances of CE
    (https://www.w3.org/TR/owl2-syntax/#Exact_Cardinality)



   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3016



   .. py:method:: as_intersection_of_min_max() -> owlapy.class_expression.nary_boolean_expression.OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R D) = >= 1 R D and <= 1 R D.



.. py:class:: OWLDataMaxCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   A maximum cardinality expression ObjectMaxCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
   to at most n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Maximum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3017



.. py:class:: OWLDataMinCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   A minimum cardinality expression DataMinCardinality( n DPE DR ) consists of a nonnegative integer n, a data
   property expression DPE, and a unary data range DR, and it contains all those individuals that are connected by
   DPE to at least n different literals in DR.
   (https://www.w3.org/TR/owl2-syntax/#Minimum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3015



.. py:class:: OWLDataHasValue(property: owlapy.owl_property.OWLDataPropertyExpression, value: owlapy.owl_literal.OWLLiteral)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ], :py:obj:`OWLDataRestriction`


   A has-value class expression DataHasValue( DPE lt ) consists of a data property expression DPE and a literal lt,
   and it contains all those individuals that are connected by DPE to lt. Each such class expression can be seen as a
   syntactic shortcut for the class expression DataSomeValuesFrom( DPE DataOneOf( lt ) ).
   (https://www.w3.org/TR/owl2-syntax/#Literal_Value_Restriction)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3014



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataOneOf(values: Union[owlapy.owl_literal.OWLLiteral, Iterable[owlapy.owl_literal.OWLLiteral]])

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLDataRange`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ]


   An enumeration of literals DataOneOf( lt1 ... ltn ) contains exactly the explicitly specified literals lti with
   1 ≤ i ≤ n. The resulting data range has arity one. (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Literals)


   .. py:attribute:: type_index
      :type:  Final
      :value: 4003



   .. py:method:: values() -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the values that are in the oneOf.

      :returns: The values of this {@code DataOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDatatypeRestriction(type_: owlapy.owl_datatype.OWLDatatype, facet_restrictions: Union[OWLFacetRestriction, Iterable[OWLFacetRestriction]])

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLDataRange`


   A datatype restriction DatatypeRestriction( DT F1 lt1 ... Fn ltn ) consists of a unary datatype DT and n pairs
   ( Fi , lti ). The resulting data range is unary and is obtained by restricting the value space of DT according to
   the semantics of all ( Fi , vi ) (multiple pairs are interpreted conjunctively), where vi are the data values of
   the literals lti.
   (https://www.w3.org/TR/owl2-syntax/#Datatype_Restrictions)


   .. py:attribute:: __slots__
      :value: ('_type', '_facet_restrictions')



   .. py:attribute:: type_index
      :type:  Final
      :value: 4006



   .. py:method:: get_datatype() -> owlapy.owl_datatype.OWLDatatype


   .. py:method:: get_facet_restrictions() -> Sequence[OWLFacetRestriction]


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLRestriction

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLAnonymousClassExpression`


   Represents an Object Property Restriction or Data Property Restriction in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_property() -> owlapy.owl_property.OWLPropertyExpression
      :abstractmethod:


      :returns: Property being restricted.



   .. py:method:: is_data_restriction() -> bool

      Determines if this is a data restriction.

      :returns: True if this is a data restriction.



   .. py:method:: is_object_restriction() -> bool

      Determines if this is an object restriction.

      :returns: True if this is an object restriction.



.. py:class:: OWLObjectRestriction

   Bases: :py:obj:`OWLRestriction`


   Represents an Object Property Restriction in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_object_restriction() -> bool

      Determines if this is an object restriction.

      :returns: True if this is an object restriction.



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression
      :abstractmethod:


      :returns: Property being restricted.



.. py:class:: OWLDataRestriction

   Bases: :py:obj:`OWLRestriction`


   Represents a Data Property Restriction.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_data_restriction() -> bool

      Determines if this is a data restriction.

      :returns: True if this is a data restriction.



.. py:class:: OWLFacetRestriction(facet: owlapy.vocab.OWLFacet, literal: Literals)

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   A facet restriction is used to restrict a particular datatype.


   .. py:attribute:: __slots__
      :value: ('_facet', '_literal')



   .. py:attribute:: type_index
      :type:  Final
      :value: 4007



   .. py:method:: get_facet() -> owlapy.vocab.OWLFacet


   .. py:method:: get_facet_value() -> owlapy.owl_literal.OWLLiteral


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDataProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLDataPropertyExpression`, :py:obj:`OWLProperty`


   Represents a Data Property in the OWL 2 Specification. Data properties connect individuals with literals.
   In some knowledge representation systems, functional data properties are called attributes.

   (https://www.w3.org/TR/owl2-syntax/#Data_Properties)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1004



   .. py:method:: is_owl_top_data_property() -> bool

      Determines if this is the owl:topDataProperty.

      :returns: topDataProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLObjectProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLObjectPropertyExpression`, :py:obj:`OWLProperty`


   Represents an Object Property in the OWL 2 Specification. Object properties connect pairs of individuals.

   (https://www.w3.org/TR/owl2-syntax/#Object_Properties)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1002



   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: get_inverse_property() -> OWLObjectInverseOf

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: is_owl_top_object_property() -> bool

      Determines if this is the owl:topObjectProperty.

      :returns: topObjectProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLPropertyExpression

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents a property or possibly the inverse of a property.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_data_property_expression() -> bool

      :returns: True if this is a data property.



   .. py:method:: is_object_property_expression() -> bool

      :returns: True if this is an object property.



   .. py:method:: is_owl_top_object_property() -> bool

      Determines if this is the owl:topObjectProperty.

      :returns: topObjectProperty.
      :rtype: True if this property is the owl



   .. py:method:: is_owl_top_data_property() -> bool

      Determines if this is the owl:topDataProperty.

      :returns: topDataProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLObjectInverseOf(property: OWLObjectProperty)

   Bases: :py:obj:`OWLObjectPropertyExpression`


   Represents the inverse of a property expression (ObjectInverseOf). An inverse object property expression
   ObjectInverseOf( P ) connects an individual I1 with I2 if and only if the object property P connects I2 with I1.
   This can be used to refer to the inverse of a property, without actually naming the property.
   For example, consider the property hasPart, the inverse
   property of hasPart (isPartOf) can be referred to using this interface inverseOf(hasPart), which can be used in
   restrictions e.g. inverseOf(hasPart) some Car refers to the set of things that are part of at least one car.

   (https://www.w3.org/TR/owl2-syntax/#Inverse_Object_Properties)


   .. py:attribute:: __slots__
      :value: '_inverse_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1003



   .. py:method:: get_inverse() -> OWLObjectProperty

      Gets the property expression that this is the inverse of.

      :returns: The object property expression such that this object property expression is an inverse of it.



   .. py:method:: get_inverse_property() -> OWLObjectProperty

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectPropertyExpression

   Bases: :py:obj:`OWLPropertyExpression`


   A high level interface to describe different types of object properties.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_inverse_property() -> OWLObjectPropertyExpression
      :abstractmethod:


      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: get_named_property() -> OWLObjectProperty
      :abstractmethod:


      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: is_object_property_expression() -> bool

      :returns: True if this is an object property.



.. py:class:: OWLDataPropertyExpression

   Bases: :py:obj:`OWLPropertyExpression`


   A high level interface to describe different types of data properties.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_data_property_expression()

      :returns: True if this is a data property.



.. py:class:: OWLFacet(remainder: str, symbolic_form: str, operator: Callable[[_X, _X], bool])

   Bases: :py:obj:`_Vocabulary`, :py:obj:`enum.Enum`


   Enumerations for OWL facets.


   .. py:property:: symbolic_form


   .. py:property:: operator


   .. py:method:: from_str(name: str) -> OWLFacet
      :staticmethod:



   .. py:attribute:: MIN_INCLUSIVE
      :type:  Final


   .. py:attribute:: MIN_EXCLUSIVE
      :type:  Final


   .. py:attribute:: MAX_INCLUSIVE
      :type:  Final


   .. py:attribute:: MAX_EXCLUSIVE
      :type:  Final


   .. py:attribute:: LENGTH
      :type:  Final


   .. py:attribute:: MIN_LENGTH
      :type:  Final


   .. py:attribute:: MAX_LENGTH
      :type:  Final


   .. py:attribute:: PATTERN
      :type:  Final


   .. py:attribute:: TOTAL_DIGITS
      :type:  Final


   .. py:attribute:: FRACTION_DIGITS
      :type:  Final


.. py:data:: logger

.. py:class:: OWLOntologyID(ontology_iri: Optional[owlapy.iri.IRI] = None, version_iri: Optional[owlapy.iri.IRI] = None)

   An object that identifies an ontology. Since OWL 2, ontologies do not have to have an ontology IRI, or if they
   have an ontology IRI then they can optionally also have a version IRI. Instances of this OWLOntologyID class bundle
   identifying information of an ontology together. If an ontology doesn't have an ontology IRI then we say that it is
   "anonymous".


   .. py:attribute:: __slots__
      :value: ('_ontology_iri', '_version_iri')



   .. py:method:: get_ontology_iri() -> Optional[owlapy.iri.IRI]

      Gets the ontology IRI.

      :returns: Ontology IRI. If the ontology is anonymous, it will return None.



   .. py:method:: get_version_iri() -> Optional[owlapy.iri.IRI]

      Gets the version IRI.

      :returns: Version IRI or None.



   .. py:method:: get_default_document_iri() -> Optional[owlapy.iri.IRI]

      Gets the IRI which is used as a default for the document that contain a representation of an ontology with
      this ID. This will be the version IRI if there is an ontology IRI and version IRI, else it will be the ontology
      IRI if there is an ontology IRI but no version IRI, else it will be None if there is no ontology IRI. See
      Ontology Documents in the OWL 2 Structural Specification.

      :returns: the IRI that can be used as a default for an ontology document, or None.



   .. py:method:: is_anonymous() -> bool


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



.. py:class:: OWLOntology

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: __slots__
      :value: ()



   .. py:attribute:: type_index
      :type:  Final
      :value: 1



   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]
      :abstractmethod:


      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]
      :abstractmethod:


      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]
      :abstractmethod:


      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]
      :abstractmethod:


      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: data_property_domain_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]
      :abstractmethod:


      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]
      :abstractmethod:


      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]
      :abstractmethod:


      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]
      :abstractmethod:


      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: get_owl_ontology_manager() -> _M
      :abstractmethod:


      Gets the manager that manages this ontology.



   .. py:method:: get_ontology_id() -> OWLOntologyID
      :abstractmethod:


      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: is_anonymous() -> bool

      Check whether this ontology does contain an IRI or not.



.. py:class:: Ontology(manager: OntologyManager, ontology_iri: owlapy.iri.IRI, load: bool)

   Bases: :py:obj:`OWLOntology`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: __slots__
      :value: ('_manager', '_iri', '_world', '_onto')



   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]

      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]

      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]

      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]

      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]

      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: get_owl_ontology_manager() -> OntologyManager

      Gets the manager that manages this ontology.



   .. py:method:: get_ontology_id() -> OWLOntologyID

      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: data_property_domain_axioms(pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]

      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]

      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(pe: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]

      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(pe: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]

      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: get_original_iri()

      Get the IRI argument that was used to create this ontology.



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:data:: OWLREADY2_FACET_KEYS

.. py:class:: ToOwlready2(world: owlready2.World)

   .. py:attribute:: __slots__
      :value: '_world'



   .. py:method:: map_object(o: owlapy.owl_object.OWLObject)
      :abstractmethod:


      Map owlapy object classes.



   .. py:method:: map_concept(o: owlapy.class_expression.OWLClassExpression) -> Union[owlready2.ClassConstruct, owlready2.ThingClass]
      :abstractmethod:


      Map owlapy concept classes.



   .. py:method:: map_datarange(p: owlapy.owl_data_ranges.OWLDataRange) -> Union[owlready2.ClassConstruct, type]
      :abstractmethod:


      Map owlapy data range classes.



.. py:class:: FromOwlready2

   Map owlready2 classes to owlapy model classes.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: map_concept(c: Union[owlready2.ClassConstruct, owlready2.ThingClass]) -> owlapy.class_expression.OWLClassExpression
      :abstractmethod:


      Map concept classes.



   .. py:method:: map_datarange(p: owlready2.ClassConstruct) -> owlapy.owl_data_ranges.OWLDataRange
      :abstractmethod:


      Map data range classes.



