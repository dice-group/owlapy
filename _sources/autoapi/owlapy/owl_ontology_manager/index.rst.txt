owlapy.owl_ontology_manager
===========================

.. py:module:: owlapy.owl_ontology_manager


Attributes
----------

.. autoapisummary::

   owlapy.owl_ontology_manager.OWLThing


Classes
-------

.. autoapisummary::

   owlapy.owl_ontology_manager.IRI
   owlapy.owl_ontology_manager.HasIRI
   owlapy.owl_ontology_manager.OWLObject
   owlapy.owl_ontology_manager.OWLClass
   owlapy.owl_ontology_manager.OWLQuantifiedDataRestriction
   owlapy.owl_ontology_manager.OWLDataHasValue
   owlapy.owl_ontology_manager.OWLNaryBooleanClassExpression
   owlapy.owl_ontology_manager.OWLObjectOneOf
   owlapy.owl_ontology_manager.OWLObjectComplementOf
   owlapy.owl_ontology_manager.OWLObjectHasValue
   owlapy.owl_ontology_manager.OWLQuantifiedObjectRestriction
   owlapy.owl_ontology_manager.OWLObjectPropertyRangeAxiom
   owlapy.owl_ontology_manager.OWLAxiom
   owlapy.owl_ontology_manager.OWLSubClassOfAxiom
   owlapy.owl_ontology_manager.OWLEquivalentClassesAxiom
   owlapy.owl_ontology_manager.OWLDisjointUnionAxiom
   owlapy.owl_ontology_manager.OWLAnnotationAssertionAxiom
   owlapy.owl_ontology_manager.OWLAnnotationProperty
   owlapy.owl_ontology_manager.OWLSubPropertyAxiom
   owlapy.owl_ontology_manager.OWLPropertyRangeAxiom
   owlapy.owl_ontology_manager.OWLClassAssertionAxiom
   owlapy.owl_ontology_manager.OWLDeclarationAxiom
   owlapy.owl_ontology_manager.OWLObjectPropertyAssertionAxiom
   owlapy.owl_ontology_manager.OWLSymmetricObjectPropertyAxiom
   owlapy.owl_ontology_manager.OWLTransitiveObjectPropertyAxiom
   owlapy.owl_ontology_manager.OWLPropertyDomainAxiom
   owlapy.owl_ontology_manager.OWLAsymmetricObjectPropertyAxiom
   owlapy.owl_ontology_manager.OWLDataPropertyCharacteristicAxiom
   owlapy.owl_ontology_manager.OWLFunctionalDataPropertyAxiom
   owlapy.owl_ontology_manager.OWLReflexiveObjectPropertyAxiom
   owlapy.owl_ontology_manager.OWLDataPropertyAssertionAxiom
   owlapy.owl_ontology_manager.OWLFunctionalObjectPropertyAxiom
   owlapy.owl_ontology_manager.OWLObjectPropertyCharacteristicAxiom
   owlapy.owl_ontology_manager.OWLIrreflexiveObjectPropertyAxiom
   owlapy.owl_ontology_manager.OWLInverseFunctionalObjectPropertyAxiom
   owlapy.owl_ontology_manager.OWLDisjointDataPropertiesAxiom
   owlapy.owl_ontology_manager.OWLDisjointObjectPropertiesAxiom
   owlapy.owl_ontology_manager.OWLEquivalentDataPropertiesAxiom
   owlapy.owl_ontology_manager.OWLEquivalentObjectPropertiesAxiom
   owlapy.owl_ontology_manager.OWLInverseObjectPropertiesAxiom
   owlapy.owl_ontology_manager.OWLNaryPropertyAxiom
   owlapy.owl_ontology_manager.OWLNaryIndividualAxiom
   owlapy.owl_ontology_manager.OWLDifferentIndividualsAxiom
   owlapy.owl_ontology_manager.OWLDisjointClassesAxiom
   owlapy.owl_ontology_manager.OWLSameIndividualAxiom
   owlapy.owl_ontology_manager.OWLNamedIndividual
   owlapy.owl_ontology_manager.OWLIndividual
   owlapy.owl_ontology_manager.OWLOntology
   owlapy.owl_ontology_manager.Ontology
   owlapy.owl_ontology_manager.ToOwlready2
   owlapy.owl_ontology_manager.OWLDataProperty
   owlapy.owl_ontology_manager.OWLObjectInverseOf
   owlapy.owl_ontology_manager.OWLObjectProperty
   owlapy.owl_ontology_manager.OWLProperty
   owlapy.owl_ontology_manager.OWLOntologyChange
   owlapy.owl_ontology_manager.OWLOntologyManager
   owlapy.owl_ontology_manager.OWLImportsDeclaration
   owlapy.owl_ontology_manager.AddImport
   owlapy.owl_ontology_manager.OntologyManager


Module Contents
---------------

.. py:class:: IRI(namespace: Union[str, owlapy.namespaces.Namespaces], remainder: str)

   Bases: :py:obj:`owlapy.owl_annotation.OWLAnnotationSubject`, :py:obj:`owlapy.owl_annotation.OWLAnnotationValue`


   An IRI, consisting of a namespace and a remainder.


   .. py:attribute:: __slots__
      :value: ('_namespace', '_remainder', '__weakref__')



   .. py:attribute:: type_index
      :type:  Final
      :value: 0



   .. py:method:: create(namespace: owlapy.namespaces.Namespaces, remainder: str) -> IRI
                  create(namespace: str, remainder: str) -> IRI
                  create(string: str) -> IRI
      :staticmethod:



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: is_nothing()

      Determines if this IRI is equal to the IRI that owl:Nothing is named with.

      :returns: True if this IRI is equal to <http://www.w3.org/2002/07/owl#Nothing> and otherwise False.



   .. py:method:: is_thing()

      Determines if this IRI is equal to the IRI that owl:Thing is named with.

      :returns: True if this IRI is equal to <http://www.w3.org/2002/07/owl#Thing> and otherwise False.



   .. py:method:: is_reserved_vocabulary() -> bool

      Determines if this IRI is in the reserved vocabulary. An IRI is in the reserved vocabulary if it starts with
      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> or <http://www.w3.org/2000/01/rdf-schema#> or
      <http://www.w3.org/2001/XMLSchema#> or <http://www.w3.org/2002/07/owl#>.

      :returns: True if the IRI is in the reserved vocabulary, otherwise False.



   .. py:method:: as_iri() -> IRI

      :returns: if the value is an IRI, return it. Return Mone otherwise.



   .. py:method:: as_str() -> str

      CD: Should be deprecated.
      :returns: The string that specifies the IRI.



   .. py:property:: str
      :type: str

      Returns:
      The string that specifies the IRI.


   .. py:property:: reminder
      :type: str

      Returns:
      The string corresponding to the reminder of the IRI.


   .. py:method:: get_short_form() -> str

      Gets the short form.

      :returns: A string that represents the short form.



   .. py:method:: get_namespace() -> str

      :returns: The namespace as string.



   .. py:method:: get_remainder() -> str

      :returns: The remainder (coincident with NCName usually) for this IRI.



.. py:class:: HasIRI

   Simple class to access the IRI.


   .. py:attribute:: __slots__
      :value: ()



   .. py:property:: iri
      :type: IRI

      :abstractmethod:

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      :type: str

      :abstractmethod:

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLObject

   Base interface for OWL objects


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: __eq__(other)
      :abstractmethod:


      Return self==value.



   .. py:method:: __hash__()
      :abstractmethod:


      Return hash(self).



   .. py:method:: __repr__()
      :abstractmethod:


      Return repr(self).



   .. py:method:: is_anonymous() -> bool


.. py:data:: OWLThing
   :type:  Final

.. py:class:: OWLClass(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`, :py:obj:`owlapy.owl_object.OWLEntity`


   An OWL 2 named Class. Classes can be understood as sets of individuals.
   (https://www.w3.org/TR/owl2-syntax/#Classes)


   .. py:attribute:: __slots__
      :value: ('_iri', '_is_nothing', '_is_thing')



   .. py:attribute:: type_index
      :type:  Final
      :value: 1001



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      Gets the string representation of this object

      :returns: The IRI as string


   .. py:property:: reminder
      :type: str

      The reminder of the IRI


   .. py:method:: is_owl_thing() -> bool

      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl



   .. py:method:: is_owl_nothing() -> bool

      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.



   .. py:method:: get_object_complement_of() -> owlapy.class_expression.class_expression.OWLObjectComplementOf

      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.



   .. py:method:: get_nnf() -> OWLClass

      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: OWLQuantifiedDataRestriction(filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedRestriction`\ [\ :py:obj:`owlapy.owl_data_ranges.OWLDataRange`\ ], :py:obj:`OWLDataRestriction`


   Represents a quantified data restriction.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_filler() -> owlapy.owl_data_ranges.OWLDataRange

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLDataHasValue(property: owlapy.owl_property.OWLDataPropertyExpression, value: owlapy.owl_literal.OWLLiteral)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ], :py:obj:`OWLDataRestriction`


   A has-value class expression DataHasValue( DPE lt ) consists of a data property expression DPE and a literal lt,
   and it contains all those individuals that are connected by DPE to lt. Each such class expression can be seen as a
   syntactic shortcut for the class expression DataSomeValuesFrom( DPE DataOneOf( lt ) ).
   (https://www.w3.org/TR/owl2-syntax/#Literal_Value_Restriction)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3014



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLNaryBooleanClassExpression(operands: Iterable[owlapy.class_expression.class_expression.OWLClassExpression])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLBooleanClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`\ ]


   OWLNaryBooleanClassExpression.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: operands() -> Iterable[owlapy.class_expression.class_expression.OWLClassExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectOneOf(values: Union[owlapy.owl_individual.OWLIndividual, Iterable[owlapy.owl_individual.OWLIndividual]])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLAnonymousClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ]


   An enumeration of individuals ObjectOneOf( a1 ... an ) contains exactly the individuals ai with 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Individuals)


   .. py:attribute:: __slots__
      :value: '_values'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3004



   .. py:method:: individuals() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the individuals that are in the oneOf. These individuals represent the exact instances (extension)
      of this class expression.

      :returns: The individuals that are the values of this {@code ObjectOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: as_object_union_of() -> owlapy.class_expression.class_expression.OWLClassExpression

      Simplifies this enumeration to a union of singleton nominals.

      :returns: This enumeration in a more standard DL form.
                simp({a}) = {a} simp({a0, ... , {an}) = unionOf({a0}, ... , {an})



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectComplementOf(op: OWLClassExpression)

   Bases: :py:obj:`OWLBooleanClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`OWLClassExpression`\ ]


   Represents an ObjectComplementOf class expression in the OWL 2 Specification.


   .. py:attribute:: __slots__
      :value: '_operand'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3003



   .. py:method:: get_operand() -> OWLClassExpression

      :returns: The wrapped expression.



   .. py:method:: operands() -> Iterable[OWLClassExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectHasValue(property: owlapy.owl_property.OWLObjectPropertyExpression, individual: owlapy.owl_individual.OWLIndividual)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ], :py:obj:`OWLObjectRestriction`


   A has-value class expression ObjectHasValue( OPE a ) consists of an object property expression OPE and an
   individual a, and it contains all those individuals that are connected by OPE to a. Each such class expression
   can be seen as a syntactic shortcut for the class expression ObjectSomeValuesFrom( OPE ObjectOneOf( a ) ).
   (https://www.w3.org/TR/owl2-syntax/#Individual_Value_Restriction)


   .. py:attribute:: __slots__
      :value: ('_property', '_v')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3007



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLQuantifiedObjectRestriction(filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedRestriction`\ [\ :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`\ ], :py:obj:`OWLObjectRestriction`


   Represents a quantified object restriction.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_filler() -> owlapy.class_expression.class_expression.OWLClassExpression

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLObjectPropertyRangeAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, range_: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLPropertyRangeAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLObjectPropertyExpression`\ , :py:obj:`owlapy.class_expression.OWLClassExpression`\ ]


   An object property range axiom ObjectPropertyRange( OPE CE ) states that the range of the object property
   expression OPE is the class expression CE — that is, if some individual is connected by OPE with an individual x,
   then x is an instance of CE. Each such axiom can be seen as a syntactic shortcut for the following axiom:
   SubClassOf( owl:Thing ObjectAllValuesFrom( OPE CE ) )

   (https://www.w3.org/TR/owl2-syntax/#Object_Property_Range)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents Axioms in the OWL 2 Specification.

   An OWL ontology contains a set of axioms. These axioms can be annotation axioms, declaration axioms, imports axioms
   or logical axioms.


   .. py:attribute:: __slots__
      :value: '_annotations'



   .. py:method:: annotations() -> Optional[List[OWLAnnotation]]


   .. py:method:: is_annotated() -> bool


   .. py:method:: is_logical_axiom() -> bool


   .. py:method:: is_annotation_axiom() -> bool


.. py:class:: OWLSubClassOfAxiom(sub_class: owlapy.class_expression.OWLClassExpression, super_class: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLClassAxiom`


   A subclass axiom SubClassOf( CE1 CE2 ) states that the class expression CE1 is a subclass of the class
   expression CE2. Roughly speaking, this states that CE1 is more specific than CE2. Subclass axioms are a
   fundamental type of axioms in OWL 2 and can be used to construct a class hierarchy. Other kinds of class
   expression axiom can be seen as syntactic shortcuts for one or more subclass axioms.

    (https://www.w3.org/TR/owl2-syntax/#Subclass_Axioms)



   .. py:attribute:: __slots__
      :value: ('_sub_class', '_super_class')



   .. py:method:: get_sub_class() -> owlapy.class_expression.OWLClassExpression


   .. py:method:: get_super_class() -> owlapy.class_expression.OWLClassExpression


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLEquivalentClassesAxiom(class_expressions: List[owlapy.class_expression.OWLClassExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryClassAxiom`


   An equivalent classes axiom EquivalentClasses( CE1 ... CEn ) states that all of the class expressions CEi,
   1 ≤ i ≤ n, are semantically equivalent to each other. This axiom allows one to use each CEi as a synonym
   for each CEj — that is, in any expression in the ontology containing such an axiom, CEi can be replaced
   with CEj without affecting the meaning of the ontology.

   (https://www.w3.org/TR/owl2-syntax/#Equivalent_Classes)


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: contains_named_equivalent_class() -> bool


   .. py:method:: contains_owl_nothing() -> bool


   .. py:method:: contains_owl_thing() -> bool


   .. py:method:: named_classes() -> Iterable[owlapy.class_expression.OWLClass]


.. py:class:: OWLDisjointUnionAxiom(cls_: owlapy.class_expression.OWLClass, class_expressions: List[owlapy.class_expression.OWLClassExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLClassAxiom`


   A disjoint union axiom DisjointUnion( C CE1 ... CEn ) states that a class C is a disjoint union of the class
   expressions CEi, 1 ≤ i ≤ n, all of which are pairwise disjoint. Such axioms are sometimes referred to as
   covering axioms, as they state that the extensions of all CEi exactly cover the extension of C. Thus, each
   instance of C is an instance of exactly one CEi, and each instance of CEi is an instance of C.

   (https://www.w3.org/TR/owl2-syntax/#Disjoint_Union_of_Class_Expressions)


   .. py:attribute:: __slots__
      :value: ('_cls', '_class_expressions')



   .. py:method:: get_owl_class() -> owlapy.class_expression.OWLClass


   .. py:method:: get_class_expressions() -> Iterable[owlapy.class_expression.OWLClassExpression]


   .. py:method:: get_owl_equivalent_classes_axiom() -> OWLEquivalentClassesAxiom


   .. py:method:: get_owl_disjoint_classes_axiom() -> OWLDisjointClassesAxiom


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLAnnotationAssertionAxiom(subject: owlapy.owl_annotation.OWLAnnotationSubject, annotation: OWLAnnotation)

   Bases: :py:obj:`OWLAnnotationAxiom`


   An annotation assertion AnnotationAssertion( AP as av ) states that the annotation subject as — an IRI or an
   anonymous individual — is annotated with the annotation property AP and the annotation value av.


   (https://www.w3.org/TR/owl2-syntax/#Annotation_Assertion)


   .. py:attribute:: __slots__
      :value: ('_subject', '_annotation')



   .. py:method:: get_subject() -> owlapy.owl_annotation.OWLAnnotationSubject

      Gets the subject of this object.

      :returns: The subject.



   .. py:method:: get_property() -> OWLAnnotationProperty

      Gets the property.

      :returns: The property.



   .. py:method:: get_value() -> owlapy.owl_annotation.OWLAnnotationValue

      Gets the annotation value. This is either an IRI, an OWLAnonymousIndividual or an OWLLiteral.

      :returns: The annotation value.



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLAnnotationProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`owlapy.owl_property.OWLProperty`


   Represents an AnnotationProperty in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLSubPropertyAxiom(sub_property: _P, super_property: _P, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ ], :py:obj:`OWLPropertyAxiom`


   Base interface for object and data sub-property axioms.


   .. py:attribute:: __slots__
      :value: ('_sub_property', '_super_property')



   .. py:method:: get_sub_property() -> _P


   .. py:method:: get_super_property() -> _P


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLPropertyRangeAxiom(property_: _P, range_: _R, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ , :py:obj:`_R`\ ], :py:obj:`OWLUnaryPropertyAxiom`\ [\ :py:obj:`_P`\ ]


   Base class for Property Range axioms.


   .. py:attribute:: __slots__
      :value: '_range'



   .. py:method:: get_range() -> _R


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLClassAssertionAxiom(individual: owlapy.owl_individual.OWLIndividual, class_expression: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLIndividualAxiom`


   A class assertion ClassAssertion( CE a ) states that the individual a is an instance of the class expression CE.

   (https://www.w3.org/TR/owl2-syntax/#Class_Assertions)


   .. py:attribute:: __slots__
      :value: ('_individual', '_class_expression')



   .. py:method:: get_individual() -> owlapy.owl_individual.OWLIndividual


   .. py:method:: get_class_expression() -> owlapy.class_expression.OWLClassExpression


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDeclarationAxiom(entity: owlapy.owl_object.OWLEntity, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLAxiom`


   Represents a Declaration axiom in the OWL 2 Specification. A declaration axiom declares an entity in an ontology.
   It doesn't affect the logical meaning of the ontology.


   .. py:attribute:: __slots__
      :value: '_entity'



   .. py:method:: get_entity() -> owlapy.owl_object.OWLEntity


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectPropertyAssertionAxiom(subject: owlapy.owl_individual.OWLIndividual, property_: owlapy.owl_property.OWLObjectPropertyExpression, object_: owlapy.owl_individual.OWLIndividual, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLPropertyAssertionAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLObjectPropertyExpression`\ , :py:obj:`owlapy.owl_individual.OWLIndividual`\ ]


   A positive object property assertion ObjectPropertyAssertion( OPE a1 a2 ) states that the individual a1 is
   connected by the object property expression OPE to the individual a2.

   (https://www.w3.org/TR/owl2-syntax/#Positive_Object_Property_Assertions)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLSymmetricObjectPropertyAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`


   An object property symmetry axiom SymmetricObjectProperty( OPE ) states that
   the object property expression OPE is symmetric — that is, if an individual x
   is connected by OPE to an individual y, then y is also connected by OPE to x.
   Each such axiom can be seen as a syntactic shortcut for the following axiom:
    SubObjectPropertyOf( OPE ObjectInverseOf( OPE ) )

    (https://www.w3.org/TR/owl2-syntax/#Symmetric_Object_Properties)



   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLTransitiveObjectPropertyAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`


   An object property transitivity axiom TransitiveObjectProperty( OPE ) states that the
   object property expressionOPE is transitive — that is, if an individual x is connected
   by OPE to an individual y that is connected by OPE to an individual z, then x is also
   connected by OPE to z. Each such axiom can be seen as a syntactic shortcut for the
   following axiom: SubObjectPropertyOf( ObjectPropertyChain( OPE OPE ) OPE )

    (https://www.w3.org/TR/owl2-syntax/#Transitive_Object_Properties)



   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLPropertyDomainAxiom(property_: _P, domain: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ ], :py:obj:`OWLUnaryPropertyAxiom`\ [\ :py:obj:`_P`\ ]


   Base class for Property Domain axioms.


   .. py:attribute:: __slots__
      :value: '_domain'



   .. py:method:: get_domain() -> owlapy.class_expression.OWLClassExpression


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLAsymmetricObjectPropertyAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`


   An object property asymmetry axiom AsymmetricObjectProperty( OPE ) states that
   the object property expression OPE is asymmetric — that is, if an individual x is
   connected by OPE to an individual y, then y cannot be connected by OPE to x.

   (https://www.w3.org/TR/owl2-syntax/#Symmetric_Object_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLDataPropertyCharacteristicAxiom(property_: owlapy.owl_property.OWLDataPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLUnaryPropertyAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLDataPropertyExpression`\ ], :py:obj:`OWLDataPropertyAxiom`


   Base interface for Functional data property axiom.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLFunctionalDataPropertyAxiom(property_: owlapy.owl_property.OWLDataPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLDataPropertyCharacteristicAxiom`


   A data property functionality axiom FunctionalDataProperty( DPE ) states that
   the data property expression DPE is functional — that is, for each individual x,
   there can be at most one distinct literal y such that x is connected by DPE with
   y. Each such axiom can be seen as a syntactic shortcut for the following axiom:
   SubClassOf( owl:Thing DataMaxCardinality( 1 DPE ) )

   (https://www.w3.org/TR/owl2-syntax/#Transitive_Object_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLReflexiveObjectPropertyAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`


   An object property reflexivity axiom ReflexiveObjectProperty( OPE ) states that the
   object property expression OPE is reflexive — that is, each individual is connected
   by OPE to itself. Each such axiom can be seen as a syntactic shortcut for the
   following axiom: SubClassOf( owl:Thing ObjectHasSelf( OPE ) )

   (https://www.w3.org/TR/owl2-syntax/#Reflexive_Object_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLDataPropertyAssertionAxiom(subject: owlapy.owl_individual.OWLIndividual, property_: owlapy.owl_property.OWLDataPropertyExpression, object_: owlapy.owl_literal.OWLLiteral, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLPropertyAssertionAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLDataPropertyExpression`\ , :py:obj:`owlapy.owl_literal.OWLLiteral`\ ]


   A positive data property assertion DataPropertyAssertion( DPE a lt ) states that the individual a is connected
   by the data property expression DPE to the literal lt.

   (https://www.w3.org/TR/owl2-syntax/#Positive_Data_Property_Assertions)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLFunctionalObjectPropertyAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`


   An object property functionality axiom FunctionalObjectProperty( OPE ) states that
   the object property expression OPE is functional — that is, for each individual x,
   there can be at most one distinct individual y such that x is connected by OPE to y.

   (https://www.w3.org/TR/owl2-syntax/#Functional_Object_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLObjectPropertyCharacteristicAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLUnaryPropertyAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`


   Base interface for functional object property axiom.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLIrreflexiveObjectPropertyAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`


   An object property irreflexivity axiom IrreflexiveObjectProperty( OPE ) states that the
   object property expression OPE is irreflexive — that is, no individual is connected by
   OPE to itself.

   (https://www.w3.org/TR/owl2-syntax/#Irreflexive_Object_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLInverseFunctionalObjectPropertyAxiom(property_: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`


   An object property inverse functionality axiom InverseFunctionalObjectProperty( OPE )
   states that the object property expression OPE is inverse-functional — that is, for each
   individual x, there can be at most one individual y such that y is connected by OPE with x.

   (https://www.w3.org/TR/owl2-syntax/#Inverse-Functional_Object_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLDisjointDataPropertiesAxiom(properties: List[owlapy.owl_property.OWLDataPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLDataPropertyExpression`\ ], :py:obj:`OWLDataPropertyAxiom`


   A disjoint data properties axiom DisjointDataProperties( DPE1 ... DPEn ) states that all of the data property
   expressions DPEi, 1 ≤ i ≤ n, are pairwise disjoint; that is, no individual x can be connected to a literal y by both
    DPEi and DPEj for i ≠ j.

    (https://www.w3.org/TR/owl2-syntax/#Disjoint_Data_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLDisjointObjectPropertiesAxiom(properties: List[owlapy.owl_property.OWLObjectPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`


   A disjoint object properties axiom DisjointObjectProperties( OPE1 ... OPEn ) states that all of the object
   property expressions OPEi, 1 ≤ i ≤ n, are pairwise disjoint; that is, no individual x can be connected to an
   individual y by both OPEi and OPEj for i ≠ j.

   (https://www.w3.org/TR/owl2-syntax/#Disjoint_Object_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLEquivalentDataPropertiesAxiom(properties: List[owlapy.owl_property.OWLDataPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLDataPropertyExpression`\ ], :py:obj:`OWLDataPropertyAxiom`


   An equivalent data properties axiom EquivalentDataProperties( DPE1 ... DPEn ) states that all the data property
   expressions DPEi, 1 ≤ i ≤ n, are semantically equivalent to each other. This axiom allows one to use each DPEi as a
   synonym for each DPEj — that is, in any expression in the ontology containing such an axiom, DPEi can be replaced
   with DPEj without affecting the meaning of the ontology.

   (https://www.w3.org/TR/owl2-syntax/#Equivalent_Data_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLEquivalentObjectPropertiesAxiom(properties: List[owlapy.owl_property.OWLObjectPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`


   An equivalent object properties axiom EquivalentObjectProperties( OPE1 ... OPEn ) states that all of the object
   property expressions OPEi, 1 ≤ i ≤ n, are semantically equivalent to each other. This axiom allows one to use each
   OPEi as a synonym for each OPEj — that is, in any expression in the ontology containing such an axiom, OPEi can be
   replaced with OPEj without affecting the meaning of the ontology.

   (https://www.w3.org/TR/owl2-syntax/#Equivalent_Object_Properties)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLInverseObjectPropertiesAxiom(first: owlapy.owl_property.OWLObjectPropertyExpression, second: owlapy.owl_property.OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`owlapy.owl_property.OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`


   An inverse object properties axiom InverseObjectProperties( OPE1 OPE2 ) states that the object property
   expression OPE1 is an inverse of the object property expression OPE2. Thus, if an individual x is connected by
   OPE1 to an individual y, then y is also connected by OPE2 to x, and vice versa.

   (https://www.w3.org/TR/owl2-syntax/#Inverse_Object_Properties_2)


   .. py:attribute:: __slots__
      :value: ('_first', '_second')



   .. py:method:: get_first_property() -> owlapy.owl_property.OWLObjectPropertyExpression


   .. py:method:: get_second_property() -> owlapy.owl_property.OWLObjectPropertyExpression


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLNaryPropertyAxiom(properties: List[_P], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ ], :py:obj:`OWLPropertyAxiom`, :py:obj:`OWLNaryAxiom`\ [\ :py:obj:`_P`\ ]


   Represents an axiom that contains two or more operands that could also be represented with
   multiple pairwise property axioms.


   .. py:attribute:: __slots__
      :value: '_properties'



   .. py:method:: properties() -> Iterable[_P]

      Get all the properties that appear in the axiom.

      :returns: Generator containing the properties.



   .. py:method:: as_pairwise_axioms() -> Iterable[OWLNaryPropertyAxiom]


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLNaryIndividualAxiom(individuals: List[owlapy.owl_individual.OWLIndividual], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLIndividualAxiom`, :py:obj:`OWLNaryAxiom`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ]


   Represents an axiom that contains two or more operands that could also be represented with
   multiple pairwise individual axioms.


   .. py:attribute:: __slots__
      :value: '_individuals'



   .. py:method:: individuals() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Get the individuals.

      :returns: Generator containing the individuals.



   .. py:method:: as_pairwise_axioms() -> Iterable[OWLNaryIndividualAxiom]


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDifferentIndividualsAxiom(individuals: List[owlapy.owl_individual.OWLIndividual], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryIndividualAxiom`


   An individual inequality axiom DifferentIndividuals( a1 ... an ) states that all of the individuals ai,
   1 ≤ i ≤ n, are different from each other; that is, no individuals ai and aj with i ≠ j can be derived to be equal.
   This axiom can be used to axiomatize the unique name assumption — the assumption that all different individual
   names denote different individuals. (https://www.w3.org/TR/owl2-syntax/#Individual_Inequality)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLDisjointClassesAxiom(class_expressions: List[owlapy.class_expression.OWLClassExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryClassAxiom`


   A disjoint classes axiom DisjointClasses( CE1 ... CEn ) states that all of the class expressions CEi, 1 ≤ i ≤ n,
   are pairwise disjoint; that is, no individual can be at the same time an instance of both CEi and CEj for i ≠ j.

   (https://www.w3.org/TR/owl2-syntax/#Disjoint_Classes)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLSameIndividualAxiom(individuals: List[owlapy.owl_individual.OWLIndividual], annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLNaryIndividualAxiom`


   An individual equality axiom SameIndividual( a1 ... an ) states that all of the individuals ai, 1 ≤ i ≤ n,
   are equal to each other. This axiom allows one to use each ai as a synonym for each aj — that is, in any
   expression in the ontology containing such an axiom, ai can be replaced with aj without affecting the
   meaning of the ontology.

   (https://www.w3.org/TR/owl2-syntax/#Individual_Equality)


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLNamedIndividual(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLIndividual`, :py:obj:`owlapy.owl_object.OWLEntity`


   Named individuals are identified using an IRI. Since they are given an IRI, named individuals are entities.
   IRIs from the reserved vocabulary must not be used to identify named individuals in an OWL 2 DL ontology.

   (https://www.w3.org/TR/owl2-syntax/#Named_Individuals)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1005



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLIndividual

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents a named or anonymous individual.


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLOntology

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: __slots__
      :value: ()



   .. py:attribute:: type_index
      :type:  Final
      :value: 1



   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]
      :abstractmethod:


      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]
      :abstractmethod:


      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]
      :abstractmethod:


      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]
      :abstractmethod:


      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: data_property_domain_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]
      :abstractmethod:


      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]
      :abstractmethod:


      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]
      :abstractmethod:


      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]
      :abstractmethod:


      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: get_owl_ontology_manager() -> _M
      :abstractmethod:


      Gets the manager that manages this ontology.



   .. py:method:: get_ontology_id() -> OWLOntologyID
      :abstractmethod:


      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: is_anonymous() -> bool

      Check whether this ontology does contain an IRI or not.



.. py:class:: Ontology(manager: OntologyManager, ontology_iri: owlapy.iri.IRI, load: bool)

   Bases: :py:obj:`OWLOntology`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: __slots__
      :value: ('_manager', '_iri', '_world', '_onto')



   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]

      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]

      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]

      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]

      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]

      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: get_owl_ontology_manager() -> OntologyManager

      Gets the manager that manages this ontology.



   .. py:method:: get_ontology_id() -> OWLOntologyID

      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: data_property_domain_axioms(pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]

      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]

      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(pe: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]

      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(pe: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]

      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: get_original_iri()

      Get the IRI argument that was used to create this ontology.



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: ToOwlready2(world: owlready2.World)

   .. py:attribute:: __slots__
      :value: '_world'



   .. py:method:: map_object(o: owlapy.owl_object.OWLObject)
      :abstractmethod:


      Map owlapy object classes.



   .. py:method:: map_concept(o: owlapy.class_expression.OWLClassExpression) -> Union[owlready2.ClassConstruct, owlready2.ThingClass]
      :abstractmethod:


      Map owlapy concept classes.



   .. py:method:: map_datarange(p: owlapy.owl_data_ranges.OWLDataRange) -> Union[owlready2.ClassConstruct, type]
      :abstractmethod:


      Map owlapy data range classes.



.. py:class:: OWLDataProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLDataPropertyExpression`, :py:obj:`OWLProperty`


   Represents a Data Property in the OWL 2 Specification. Data properties connect individuals with literals.
   In some knowledge representation systems, functional data properties are called attributes.

   (https://www.w3.org/TR/owl2-syntax/#Data_Properties)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1004



   .. py:method:: is_owl_top_data_property() -> bool

      Determines if this is the owl:topDataProperty.

      :returns: topDataProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLObjectInverseOf(property: OWLObjectProperty)

   Bases: :py:obj:`OWLObjectPropertyExpression`


   Represents the inverse of a property expression (ObjectInverseOf). An inverse object property expression
   ObjectInverseOf( P ) connects an individual I1 with I2 if and only if the object property P connects I2 with I1.
   This can be used to refer to the inverse of a property, without actually naming the property.
   For example, consider the property hasPart, the inverse
   property of hasPart (isPartOf) can be referred to using this interface inverseOf(hasPart), which can be used in
   restrictions e.g. inverseOf(hasPart) some Car refers to the set of things that are part of at least one car.

   (https://www.w3.org/TR/owl2-syntax/#Inverse_Object_Properties)


   .. py:attribute:: __slots__
      :value: '_inverse_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1003



   .. py:method:: get_inverse() -> OWLObjectProperty

      Gets the property expression that this is the inverse of.

      :returns: The object property expression such that this object property expression is an inverse of it.



   .. py:method:: get_inverse_property() -> OWLObjectProperty

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLObjectPropertyExpression`, :py:obj:`OWLProperty`


   Represents an Object Property in the OWL 2 Specification. Object properties connect pairs of individuals.

   (https://www.w3.org/TR/owl2-syntax/#Object_Properties)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1002



   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: get_inverse_property() -> OWLObjectInverseOf

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: is_owl_top_object_property() -> bool

      Determines if this is the owl:topObjectProperty.

      :returns: topObjectProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLPropertyExpression`, :py:obj:`owlapy.owl_object.OWLEntity`


   A base class for properties that aren't expression i.e. named properties. By definition, properties
   are either data properties or object properties.


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string


   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


.. py:class:: OWLOntologyChange(ontology: owlapy.owl_ontology.OWLOntology)

   Represents an ontology change.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_ontology() -> owlapy.owl_ontology.OWLOntology

      Gets the ontology that the change is/was applied to.

      :returns: The ontology that the change is applicable to.



.. py:class:: OWLOntologyManager

   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.


   .. py:method:: create_ontology(iri: owlapy.iri.IRI) -> owlapy.owl_ontology.OWLOntology
      :abstractmethod:


      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created.

      :returns: The newly created ontology, or if an ontology with the specified IRI already exists then this existing
                ontology will be returned.



   .. py:method:: load_ontology(iri: owlapy.iri.IRI) -> owlapy.owl_ontology.OWLOntology
      :abstractmethod:


      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri: The IRI that identifies the ontology. It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.



   .. py:method:: apply_change(change: OWLOntologyChange)
      :abstractmethod:


      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.



   .. py:method:: add_axiom(ontology: owlapy.owl_ontology.OWLOntology, axiom: owlapy.owl_axiom.OWLAxiom)
      :abstractmethod:


      A convenience method that adds a single axiom to an ontology.

      :param ontology: The ontology to add the axiom to.
      :param axiom: The axiom to be added.



   .. py:method:: remove_axiom(ontology: owlapy.owl_ontology.OWLOntology, axiom: owlapy.owl_axiom.OWLAxiom)
      :abstractmethod:


      A convenience method that removes a single axiom from an ontology.

      :param ontology: The ontology to remove the axiom from.
      :param axiom: The axiom to be removed.



   .. py:method:: save_ontology(ontology: owlapy.owl_ontology.OWLOntology, document_iri: owlapy.iri.IRI)
      :abstractmethod:


      Saves the specified ontology, using the specified document IRI to determine where/how the ontology should be
      saved.

      :param ontology: The ontology to be saved.
      :param document_iri: The document IRI where the ontology should be saved to.



.. py:class:: OWLImportsDeclaration(import_iri: owlapy.iri.IRI)

   Bases: :py:obj:`owlapy.meta_classes.HasIRI`


   Represents an import statement in an ontology.


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the import IRI.

      :returns: The import IRI that points to the ontology to be imported. The imported ontology might have this IRI as
                its ontology IRI but this is not mandated. For example, an ontology with a non-resolvable ontology IRI
                can be deployed at a resolvable URL.


   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: AddImport(ontology: owlapy.owl_ontology.OWLOntology, import_declaration: OWLImportsDeclaration)

   Bases: :py:obj:`OWLOntologyChange`


   Represents an ontology change where an import statement is added to an ontology.


   .. py:attribute:: __slots__
      :value: ('_ont', '_declaration')



   .. py:method:: get_import_declaration() -> OWLImportsDeclaration

      Gets the import declaration that the change pertains to.

      :returns: The import declaration.



.. py:class:: OntologyManager(world_store=None)

   Bases: :py:obj:`OWLOntologyManager`


   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.


   .. py:attribute:: __slots__
      :value: '_world'



   .. py:method:: create_ontology(iri: owlapy.iri.IRI) -> owlapy.owl_ontology.Ontology

      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created.

      :returns: The newly created ontology, or if an ontology with the specified IRI already exists then this existing
                ontology will be returned.



   .. py:method:: load_ontology(iri: owlapy.iri.IRI) -> owlapy.owl_ontology.Ontology

      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri: The IRI that identifies the ontology. It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.



   .. py:method:: apply_change(change: OWLOntologyChange)

      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.



   .. py:method:: add_axiom(ontology: owlapy.owl_ontology.OWLOntology, axiom: owlapy.owl_axiom.OWLAxiom)

      A convenience method that adds a single axiom to an ontology.

      :param ontology: The ontology to add the axiom to.
      :param axiom: The axiom to be added.



   .. py:method:: remove_axiom(ontology: owlapy.owl_ontology.OWLOntology, axiom: owlapy.owl_axiom.OWLAxiom)

      A convenience method that removes a single axiom from an ontology.

      :param ontology: The ontology to remove the axiom from.
      :param axiom: The axiom to be removed.



   .. py:method:: save_ontology(ontology: owlapy.owl_ontology.OWLOntology, document_iri: owlapy.iri.IRI)

      Saves the specified ontology, using the specified document IRI to determine where/how the ontology should be
      saved.

      :param ontology: The ontology to be saved.
      :param document_iri: The document IRI where the ontology should be saved to.



   .. py:method:: save_world()

      Saves the actual state of the quadstore in the SQLite3 file.




