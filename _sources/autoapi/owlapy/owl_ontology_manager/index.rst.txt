:py:mod:`owlapy.owl_ontology_manager`
=====================================

.. py:module:: owlapy.owl_ontology_manager


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   owlapy.owl_ontology_manager.OWLOntologyChange
   owlapy.owl_ontology_manager.OWLOntologyManager
   owlapy.owl_ontology_manager.OWLImportsDeclaration
   owlapy.owl_ontology_manager.AddImport




.. py:class:: OWLOntologyChange(ontology: owlapy.owl_ontology.OWLOntology)


   Represents an ontology change.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_ontology() -> owlapy.owl_ontology.OWLOntology

      Gets the ontology that the change is/was applied to.

      :returns: The ontology that the change is applicable to.



.. py:class:: OWLOntologyManager


   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.

   .. py:method:: create_ontology(iri: owlapy.iri.IRI) -> owlapy.owl_ontology.OWLOntology
      :abstractmethod:

      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created.

      :returns: The newly created ontology, or if an ontology with the specified IRI already exists then this existing
                ontology will be returned.


   .. py:method:: load_ontology(iri: owlapy.iri.IRI) -> owlapy.owl_ontology.OWLOntology
      :abstractmethod:

      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri: The IRI that identifies the ontology. It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.


   .. py:method:: apply_change(change: OWLOntologyChange)
      :abstractmethod:

      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.


   .. py:method:: add_axiom(ontology: owlapy.owl_ontology.OWLOntology, axiom: owlapy.owl_axiom.OWLAxiom)
      :abstractmethod:

      A convenience method that adds a single axiom to an ontology.

      :param ontology: The ontology to add the axiom to.
      :param axiom: The axiom to be added.


   .. py:method:: remove_axiom(ontology: owlapy.owl_ontology.OWLOntology, axiom: owlapy.owl_axiom.OWLAxiom)
      :abstractmethod:

      A convenience method that removes a single axiom from an ontology.

      :param ontology: The ontology to remove the axiom from.
      :param axiom: The axiom to be removed.


   .. py:method:: save_ontology(ontology: owlapy.owl_ontology.OWLOntology, document_iri: owlapy.iri.IRI)
      :abstractmethod:

      Saves the specified ontology, using the specified document IRI to determine where/how the ontology should be
      saved.

      :param ontology: The ontology to be saved.
      :param document_iri: The document IRI where the ontology should be saved to.



.. py:class:: OWLImportsDeclaration(import_iri: owlapy.iri.IRI)


   Bases: :py:obj:`owlapy.meta_classes.HasIRI`

   Represents an import statement in an ontology.

   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the import IRI.

      :returns: The import IRI that points to the ontology to be imported. The imported ontology might have this IRI as
                its ontology IRI but this is not mandated. For example, an ontology with a non-resolvable ontology IRI
                can be deployed at a resolvable URL.

   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string

   .. py:attribute:: __slots__
      :value: '_iri'

      


.. py:class:: AddImport(ontology: owlapy.owl_ontology.OWLOntology, import_declaration: OWLImportsDeclaration)


   Bases: :py:obj:`OWLOntologyChange`

   Represents an ontology change where an import statement is added to an ontology.

   .. py:attribute:: __slots__
      :value: ('_ont', '_declaration')

      

   .. py:method:: get_import_declaration() -> OWLImportsDeclaration

      Gets the import declaration that the change pertains to.

      :returns: The import declaration.



