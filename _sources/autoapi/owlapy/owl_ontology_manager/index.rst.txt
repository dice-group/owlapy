owlapy.owl_ontology_manager
===========================

.. py:module:: owlapy.owl_ontology_manager


Classes
-------

.. autoapisummary::

   owlapy.owl_ontology_manager.OWLImportsDeclaration
   owlapy.owl_ontology_manager.AddImport
   owlapy.owl_ontology_manager.OntologyManager
   owlapy.owl_ontology_manager.SyncOntologyManager


Module Contents
---------------

.. py:class:: OWLImportsDeclaration(import_iri: owlapy.iri.IRI)

   Bases: :py:obj:`owlapy.meta_classes.HasIRI`


   Represents an import statement in an ontology.


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the import IRI.

      :returns: The import IRI that points to the ontology to be imported. The imported ontology might have this IRI as
                its ontology IRI but this is not mandated. For example, an ontology with a non-resolvable ontology IRI
                can be deployed at a resolvable URL.


   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: AddImport(ontology: owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology, import_declaration: OWLImportsDeclaration)

   Bases: :py:obj:`owlapy.abstracts.abstract_owl_ontology_manager.AbstractOWLOntologyChange`


   Represents an ontology change where an import statement is added to an ontology.


   .. py:attribute:: __slots__
      :value: ('_ont', '_declaration')



   .. py:method:: get_import_declaration() -> OWLImportsDeclaration

      Gets the import declaration that the change pertains to.

      :returns: The import declaration.



.. py:class:: OntologyManager(world_store=None)

   Bases: :py:obj:`owlapy.abstracts.abstract_owl_ontology_manager.AbstractOWLOntologyManager`


   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.


   .. py:attribute:: __slots__
      :value: '_world'



   .. py:method:: create_ontology(iri: Union[str, owlapy.iri.IRI] = None) -> owlapy.owl_ontology.Ontology

      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created, can also be a string.

      :returns: The newly created ontology.



   .. py:method:: load_ontology(path: Union[owlapy.iri.IRI, str] = None) -> owlapy.owl_ontology.Ontology

      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri:
                  The IRI that identifies the ontology, can also be a string.
                   It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.



   .. py:method:: apply_change(change: owlapy.abstracts.abstract_owl_ontology_manager.AbstractOWLOntologyChange)

      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.



   .. py:method:: save_world()

      Saves the actual state of the quadstore in the SQLite3 file.




.. py:class:: SyncOntologyManager

   Bases: :py:obj:`owlapy.abstracts.abstract_owl_ontology_manager.AbstractOWLOntologyManager`


   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.


   .. py:attribute:: owlapi_manager


   .. py:method:: create_ontology(iri: Union[owlapy.iri.IRI, str]) -> owlapy.owl_ontology.SyncOntology

      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created, can also be a string.

      :returns: The newly created ontology.



   .. py:method:: load_ontology(iri: Union[owlapy.iri.IRI, str]) -> owlapy.owl_ontology.SyncOntology

      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri:
                  The IRI that identifies the ontology, can also be a string.
                   It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.



   .. py:method:: get_owlapi_manager()


   .. py:method:: apply_change(change: owlapy.abstracts.abstract_owl_ontology_manager.AbstractOWLOntologyChange)
      :abstractmethod:


      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.



