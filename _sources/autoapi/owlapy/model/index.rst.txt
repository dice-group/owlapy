:py:mod:`owlapy.model`
======================

.. py:module:: owlapy.model

.. autoapi-nested-parse::

   @TODO: CD: This is not a python code. We should refactor this model module.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   providers/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   owlapy.model.OWLRDFVocabulary
   owlapy.model.XSDVocabulary
   owlapy.model.OWLFacet
   owlapy.model.OWLObject
   owlapy.model.OWLAnnotationObject
   owlapy.model.OWLAnnotationSubject
   owlapy.model.OWLAnnotationValue
   owlapy.model.HasIRI
   owlapy.model.IRI
   owlapy.model.HasIndex
   owlapy.model.HasOperands
   owlapy.model.OWLPropertyRange
   owlapy.model.OWLDataRange
   owlapy.model.OWLClassExpression
   owlapy.model.OWLAnonymousClassExpression
   owlapy.model.OWLBooleanClassExpression
   owlapy.model.OWLObjectComplementOf
   owlapy.model.OWLNamedObject
   owlapy.model.OWLEntity
   owlapy.model.OWLClass
   owlapy.model.OWLPropertyExpression
   owlapy.model.OWLRestriction
   owlapy.model.OWLObjectPropertyExpression
   owlapy.model.OWLDataPropertyExpression
   owlapy.model.OWLProperty
   owlapy.model.OWLDataProperty
   owlapy.model.OWLObjectProperty
   owlapy.model.OWLObjectInverseOf
   owlapy.model.OWLDataRestriction
   owlapy.model.OWLObjectRestriction
   owlapy.model.HasFiller
   owlapy.model.OWLHasValueRestriction
   owlapy.model.OWLQuantifiedRestriction
   owlapy.model.OWLQuantifiedObjectRestriction
   owlapy.model.OWLObjectSomeValuesFrom
   owlapy.model.OWLObjectAllValuesFrom
   owlapy.model.OWLNaryBooleanClassExpression
   owlapy.model.OWLObjectUnionOf
   owlapy.model.OWLObjectIntersectionOf
   owlapy.model.HasCardinality
   owlapy.model.OWLCardinalityRestriction
   owlapy.model.OWLObjectCardinalityRestriction
   owlapy.model.OWLObjectMinCardinality
   owlapy.model.OWLObjectMaxCardinality
   owlapy.model.OWLObjectExactCardinality
   owlapy.model.OWLObjectHasSelf
   owlapy.model.OWLIndividual
   owlapy.model.OWLObjectHasValue
   owlapy.model.OWLObjectOneOf
   owlapy.model.OWLNamedIndividual
   owlapy.model.OWLOntologyID
   owlapy.model.OWLAxiom
   owlapy.model.OWLDatatype
   owlapy.model.OWLDatatypeRestriction
   owlapy.model.OWLFacetRestriction
   owlapy.model.OWLLiteral
   owlapy.model.OWLQuantifiedDataRestriction
   owlapy.model.OWLDataCardinalityRestriction
   owlapy.model.OWLDataAllValuesFrom
   owlapy.model.OWLDataComplementOf
   owlapy.model.OWLDataExactCardinality
   owlapy.model.OWLDataHasValue
   owlapy.model.OWLDataMaxCardinality
   owlapy.model.OWLDataMinCardinality
   owlapy.model.OWLDataOneOf
   owlapy.model.OWLDataSomeValuesFrom
   owlapy.model.OWLNaryDataRange
   owlapy.model.OWLDataUnionOf
   owlapy.model.OWLDataIntersectionOf
   owlapy.model.OWLImportsDeclaration
   owlapy.model.OWLLogicalAxiom
   owlapy.model.OWLPropertyAxiom
   owlapy.model.OWLObjectPropertyAxiom
   owlapy.model.OWLDataPropertyAxiom
   owlapy.model.OWLIndividualAxiom
   owlapy.model.OWLClassAxiom
   owlapy.model.OWLDeclarationAxiom
   owlapy.model.OWLDatatypeDefinitionAxiom
   owlapy.model.OWLHasKeyAxiom
   owlapy.model.OWLNaryAxiom
   owlapy.model.OWLNaryClassAxiom
   owlapy.model.OWLEquivalentClassesAxiom
   owlapy.model.OWLDisjointClassesAxiom
   owlapy.model.OWLNaryIndividualAxiom
   owlapy.model.OWLDifferentIndividualsAxiom
   owlapy.model.OWLSameIndividualAxiom
   owlapy.model.OWLNaryPropertyAxiom
   owlapy.model.OWLEquivalentObjectPropertiesAxiom
   owlapy.model.OWLDisjointObjectPropertiesAxiom
   owlapy.model.OWLInverseObjectPropertiesAxiom
   owlapy.model.OWLEquivalentDataPropertiesAxiom
   owlapy.model.OWLDisjointDataPropertiesAxiom
   owlapy.model.OWLSubClassOfAxiom
   owlapy.model.OWLDisjointUnionAxiom
   owlapy.model.OWLClassAssertionAxiom
   owlapy.model.OWLAnnotationAxiom
   owlapy.model.OWLAnnotationProperty
   owlapy.model.OWLAnnotation
   owlapy.model.OWLAnnotationAssertionAxiom
   owlapy.model.OWLSubAnnotationPropertyOfAxiom
   owlapy.model.OWLAnnotationPropertyDomainAxiom
   owlapy.model.OWLAnnotationPropertyRangeAxiom
   owlapy.model.OWLSubPropertyAxiom
   owlapy.model.OWLSubObjectPropertyOfAxiom
   owlapy.model.OWLSubDataPropertyOfAxiom
   owlapy.model.OWLPropertyAssertionAxiom
   owlapy.model.OWLObjectPropertyAssertionAxiom
   owlapy.model.OWLNegativeObjectPropertyAssertionAxiom
   owlapy.model.OWLDataPropertyAssertionAxiom
   owlapy.model.OWLNegativeDataPropertyAssertionAxiom
   owlapy.model.OWLUnaryPropertyAxiom
   owlapy.model.OWLObjectPropertyCharacteristicAxiom
   owlapy.model.OWLFunctionalObjectPropertyAxiom
   owlapy.model.OWLAsymmetricObjectPropertyAxiom
   owlapy.model.OWLInverseFunctionalObjectPropertyAxiom
   owlapy.model.OWLIrreflexiveObjectPropertyAxiom
   owlapy.model.OWLReflexiveObjectPropertyAxiom
   owlapy.model.OWLSymmetricObjectPropertyAxiom
   owlapy.model.OWLTransitiveObjectPropertyAxiom
   owlapy.model.OWLDataPropertyCharacteristicAxiom
   owlapy.model.OWLFunctionalDataPropertyAxiom
   owlapy.model.OWLPropertyDomainAxiom
   owlapy.model.OWLPropertyRangeAxiom
   owlapy.model.OWLObjectPropertyDomainAxiom
   owlapy.model.OWLDataPropertyDomainAxiom
   owlapy.model.OWLObjectPropertyRangeAxiom
   owlapy.model.OWLDataPropertyRangeAxiom
   owlapy.model.OWLOntology
   owlapy.model.OWLOntologyChange
   owlapy.model.AddImport
   owlapy.model.OWLOntologyManager
   owlapy.model.OWLReasoner



Functions
~~~~~~~~~

.. autoapisummary::

   owlapy.model.MOVE



Attributes
~~~~~~~~~~

.. autoapisummary::

   owlapy.model.Literals
   owlapy.model.OWLThing
   owlapy.model.OWLNothing
   owlapy.model.OWLTopObjectProperty
   owlapy.model.OWLBottomObjectProperty
   owlapy.model.OWLTopDataProperty
   owlapy.model.OWLBottomDataProperty
   owlapy.model.DoubleOWLDatatype
   owlapy.model.IntegerOWLDatatype
   owlapy.model.BooleanOWLDatatype
   owlapy.model.StringOWLDatatype
   owlapy.model.DateOWLDatatype
   owlapy.model.DateTimeOWLDatatype
   owlapy.model.DurationOWLDatatype
   owlapy.model.TopOWLDatatype
   owlapy.model.NUMERIC_DATATYPES
   owlapy.model.TIME_DATATYPES


.. py:class:: OWLRDFVocabulary(namespace: owlapy.namespaces.Namespaces, remainder: str)


   Bases: :py:obj:`_Vocabulary`, :py:obj:`enum.Enum`

   Enumerations for OWL/RDF vocabulary.

   .. py:attribute:: OWL_THING
      :value: ()

      

   .. py:attribute:: OWL_NOTHING
      :value: ()

      

   .. py:attribute:: OWL_CLASS
      :value: ()

      

   .. py:attribute:: OWL_NAMED_INDIVIDUAL
      :value: ()

      

   .. py:attribute:: OWL_TOP_OBJECT_PROPERTY
      :value: ()

      

   .. py:attribute:: OWL_BOTTOM_OBJECT_PROPERTY
      :value: ()

      

   .. py:attribute:: OWL_TOP_DATA_PROPERTY
      :value: ()

      

   .. py:attribute:: OWL_BOTTOM_DATA_PROPERTY
      :value: ()

      

   .. py:attribute:: RDFS_LITERAL
      :value: ()

      


.. py:class:: XSDVocabulary(remainder: str)


   Bases: :py:obj:`_Vocabulary`, :py:obj:`enum.Enum`

   Enumerations for XSD vocabulary.

   .. py:attribute:: DECIMAL
      :type: Final
      :value: 'decimal'

      

   .. py:attribute:: INTEGER
      :type: Final
      :value: 'integer'

      

   .. py:attribute:: LONG
      :type: Final
      :value: 'long'

      

   .. py:attribute:: DOUBLE
      :type: Final
      :value: 'double'

      

   .. py:attribute:: FLOAT
      :type: Final
      :value: 'float'

      

   .. py:attribute:: BOOLEAN
      :type: Final
      :value: 'boolean'

      

   .. py:attribute:: STRING
      :type: Final
      :value: 'string'

      

   .. py:attribute:: DATE
      :type: Final
      :value: 'date'

      

   .. py:attribute:: DATE_TIME
      :type: Final
      :value: 'dateTime'

      

   .. py:attribute:: DATE_TIME_STAMP
      :type: Final
      :value: 'dateTimeStamp'

      

   .. py:attribute:: DURATION
      :type: Final
      :value: 'duration'

      


.. py:class:: OWLFacet(remainder: str, symbolic_form: str, operator: Callable[[_X, _X], bool])


   Bases: :py:obj:`_Vocabulary`, :py:obj:`enum.Enum`

   Enumerations for OWL facets.

   .. py:property:: symbolic_form


   .. py:property:: operator


   .. py:attribute:: MIN_INCLUSIVE
      :type: Final
      :value: ('minInclusive', '>=')

      

   .. py:attribute:: MIN_EXCLUSIVE
      :type: Final
      :value: ('minExclusive', '>')

      

   .. py:attribute:: MAX_INCLUSIVE
      :type: Final
      :value: ('maxInclusive', '<=')

      

   .. py:attribute:: MAX_EXCLUSIVE
      :type: Final
      :value: ('maxExclusive', '<')

      

   .. py:attribute:: LENGTH
      :type: Final
      :value: ('length', 'length')

      

   .. py:attribute:: MIN_LENGTH
      :type: Final
      :value: ('minLength', 'minLength')

      

   .. py:attribute:: MAX_LENGTH
      :type: Final
      :value: ('maxLength', 'maxLength')

      

   .. py:attribute:: PATTERN
      :type: Final
      :value: ('pattern', 'pattern')

      

   .. py:attribute:: TOTAL_DIGITS
      :type: Final
      :value: ('totalDigits', 'totalDigits')

      

   .. py:attribute:: FRACTION_DIGITS
      :type: Final
      :value: ('fractionDigits', 'fractionDigits')

      

   .. py:method:: from_str(name: str) -> OWLFacet
      :staticmethod:



.. py:function:: MOVE(*args)

   "Move" an imported class to the current module by setting the classes __module__ attribute.

   This is useful for documentation purposes to hide internal packages in sphinx.

   :param args: List of classes to move.


.. py:class:: OWLObject


   Base interface for OWL objects

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: __eq__(other)
      :abstractmethod:

      Return self==value.


   .. py:method:: __hash__()
      :abstractmethod:

      Return hash(self).


   .. py:method:: __repr__()
      :abstractmethod:

      Return repr(self).


   .. py:method:: is_anonymous() -> bool



.. py:class:: OWLAnnotationObject


   Bases: :py:obj:`OWLObject`

   A marker interface for the values (objects) of annotations.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: as_iri() -> Optional[owlapy.model._iri.IRI]

      :returns: if the value is an IRI, return it. Return Mone otherwise.


   .. py:method:: as_anonymous_individual()

      :returns: if the value is an anonymous, return it. Return None otherwise.



.. py:class:: OWLAnnotationSubject


   Bases: :py:obj:`OWLAnnotationObject`

   A marker interface for annotation subjects, which can either be IRIs or anonymous individuals

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLAnnotationValue


   Bases: :py:obj:`OWLAnnotationObject`

   A marker interface for annotation values, which can either be an IRI (URI), Literal or Anonymous Individual.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: is_literal() -> bool

      :returns: true if the annotation value is a literal


   .. py:method:: as_literal() -> Optional[owlapy.model.OWLLiteral]

      :returns: if the value is a literal, returns it. Return None otherwise



.. py:class:: HasIRI


   Simple class to access the IRI.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_iri() -> IRI
      :abstractmethod:

      Gets the IRI of this object.

      :returns: The IRI of this object.



.. py:class:: IRI(namespace: Union[str, owlapy.namespaces.Namespaces], remainder: str)


   Bases: :py:obj:`owlapy.model._base.OWLAnnotationSubject`, :py:obj:`owlapy.model._base.OWLAnnotationValue`

   An IRI, consisting of a namespace and a remainder.

   .. py:property:: str
      :type: str

      Returns:
      The string that specifies the IRI.

   .. py:property:: reminder
      :type: str

      Returns:
      The string corresponding to the reminder of the IRI.

   .. py:attribute:: __slots__
      :value: ('_namespace', '_remainder', '__weakref__')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 0

      

   .. py:method:: create(namespace: owlapy.namespaces.Namespaces, remainder: str) -> IRI
                  create(namespace: str, remainder: str) -> IRI
                  create(string: str) -> IRI
      :staticmethod:


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: is_nothing()

      Determines if this IRI is equal to the IRI that owl:Nothing is named with.

      :returns: True if this IRI is equal to <http://www.w3.org/2002/07/owl#Nothing> and otherwise False.


   .. py:method:: is_thing()

      Determines if this IRI is equal to the IRI that owl:Thing is named with.

      :returns: True if this IRI is equal to <http://www.w3.org/2002/07/owl#Thing> and otherwise False.


   .. py:method:: is_reserved_vocabulary() -> bool

      Determines if this IRI is in the reserved vocabulary. An IRI is in the reserved vocabulary if it starts with
      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> or <http://www.w3.org/2000/01/rdf-schema#> or
      <http://www.w3.org/2001/XMLSchema#> or <http://www.w3.org/2002/07/owl#>.

      :returns: True if the IRI is in the reserved vocabulary, otherwise False.


   .. py:method:: as_iri() -> IRI

      :returns: if the value is an IRI, return it. Return Mone otherwise.


   .. py:method:: as_str() -> str

      CD: Should be deprecated.
      :returns: The string that specifies the IRI.


   .. py:method:: get_short_form() -> str

      Gets the short form.

      :returns: A string that represents the short form.


   .. py:method:: get_namespace() -> str

      :returns: The namespace as string.


   .. py:method:: get_remainder() -> str

      :returns: The remainder (coincident with NCName usually) for this IRI.



.. py:data:: Literals

   

.. py:class:: HasIndex


   Bases: :py:obj:`Protocol`

   Interface for types with an index; this is used to group objects by type when sorting.

   .. py:attribute:: type_index
      :type: ClassVar[int]

      

   .. py:method:: __eq__(other)

      Return self==value.



.. py:class:: HasOperands


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_T`\ ]

   An interface to objects that have a collection of operands.

   :param _T: Operand type.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: operands() -> Iterable[_T]
      :abstractmethod:

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



.. py:class:: OWLPropertyRange


   Bases: :py:obj:`_base.OWLObject`

   OWL Objects that can be the ranges of properties.


.. py:class:: OWLDataRange


   Bases: :py:obj:`OWLPropertyRange`

   Represents a DataRange in the OWL 2 Specification.


.. py:class:: OWLClassExpression


   Bases: :py:obj:`OWLPropertyRange`

   An OWL 2 Class Expression.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: is_owl_thing() -> bool
      :abstractmethod:

      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl


   .. py:method:: is_owl_nothing() -> bool
      :abstractmethod:

      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.


   .. py:method:: get_object_complement_of() -> OWLObjectComplementOf
      :abstractmethod:

      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.


   .. py:method:: get_nnf() -> OWLClassExpression
      :abstractmethod:

      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: OWLAnonymousClassExpression


   Bases: :py:obj:`OWLClassExpression`

   A Class Expression which is not a named Class.

   .. py:method:: is_owl_nothing() -> bool

      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.


   .. py:method:: is_owl_thing() -> bool

      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl


   .. py:method:: get_object_complement_of() -> OWLObjectComplementOf

      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.


   .. py:method:: get_nnf() -> OWLClassExpression

      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: OWLBooleanClassExpression


   Bases: :py:obj:`OWLAnonymousClassExpression`

   Represent an anonymous boolean class expression.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLObjectComplementOf(op: OWLClassExpression)


   Bases: :py:obj:`OWLBooleanClassExpression`, :py:obj:`HasOperands`\ [\ :py:obj:`OWLClassExpression`\ ]

   Represents an ObjectComplementOf class expression in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_operand'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3003

      

   .. py:method:: get_operand() -> OWLClassExpression

      :returns: The wrapped expression.


   .. py:method:: operands() -> Iterable[OWLClassExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLNamedObject


   Bases: :py:obj:`_base.OWLObject`, :py:obj:`_iri.HasIRI`

   Represents a named object for example, class, property, ontology etc. - i.e. anything that has an
   IRI as its name.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __lt__(other)

      Return self<value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLEntity


   Bases: :py:obj:`OWLNamedObject`

   Represents Entities in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: to_string_id() -> str


   .. py:method:: is_anonymous() -> bool



.. py:class:: OWLClass(iri: _iri.IRI)


   Bases: :py:obj:`OWLClassExpression`, :py:obj:`OWLEntity`

   An OWL 2 named Class

   .. py:property:: str


   .. py:property:: reminder
      :type: str

      The reminder of the IRI

   .. py:attribute:: __slots__
      :value: ('_iri', '_is_nothing', '_is_thing')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 1001

      

   .. py:method:: get_iri() -> _iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:method:: is_owl_thing() -> bool

      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl


   .. py:method:: is_owl_nothing() -> bool

      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.


   .. py:method:: get_object_complement_of() -> OWLObjectComplementOf

      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.


   .. py:method:: get_nnf() -> OWLClass

      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: OWLPropertyExpression


   Bases: :py:obj:`_base.OWLObject`

   Represents a property or possibly the inverse of a property.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: is_data_property_expression() -> bool

      :returns: True if this is a data property.


   .. py:method:: is_object_property_expression() -> bool

      :returns: True if this is an object property.


   .. py:method:: is_owl_top_object_property() -> bool

      Determines if this is the owl:topObjectProperty.

      :returns: topObjectProperty.
      :rtype: True if this property is the owl


   .. py:method:: is_owl_top_data_property() -> bool

      Determines if this is the owl:topDataProperty.

      :returns: topDataProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLRestriction


   Bases: :py:obj:`OWLAnonymousClassExpression`

   Represents an Object Property Restriction or Data Property Restriction in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_property() -> OWLPropertyExpression
      :abstractmethod:

      :returns: Property being restricted.


   .. py:method:: is_data_restriction() -> bool

      Determines if this is a data restriction.

      :returns: True if this is a data restriction.


   .. py:method:: is_object_restriction() -> bool

      Determines if this is an object restriction.

      :returns: True if this is an object restriction.



.. py:class:: OWLObjectPropertyExpression


   Bases: :py:obj:`OWLPropertyExpression`

   A high level interface to describe different types of object properties.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_inverse_property() -> OWLObjectPropertyExpression
      :abstractmethod:

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.


   .. py:method:: get_named_property() -> OWLObjectProperty
      :abstractmethod:

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.


   .. py:method:: is_object_property_expression() -> bool

      :returns: True if this is an object property.



.. py:class:: OWLDataPropertyExpression


   Bases: :py:obj:`OWLPropertyExpression`

   A high level interface to describe different types of data properties.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: is_data_property_expression()

      :returns: True if this is a data property.



.. py:class:: OWLProperty


   Bases: :py:obj:`OWLPropertyExpression`, :py:obj:`OWLEntity`

   A marker interface for properties that aren't expression i.e. named properties. By definition, properties
   are either data properties or object properties.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDataProperty(iri: _iri.IRI)


   Bases: :py:obj:`OWLDataPropertyExpression`, :py:obj:`OWLProperty`

   Represents a Data Property in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_iri'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 1004

      

   .. py:method:: get_iri() -> _iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:method:: is_owl_top_data_property() -> bool

      Determines if this is the owl:topDataProperty.

      :returns: topDataProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLObjectProperty(iri: _iri.IRI)


   Bases: :py:obj:`OWLObjectPropertyExpression`, :py:obj:`OWLProperty`

   Represents an Object Property in the OWL 2 Specification.

   .. py:property:: str
      :type: str


   .. py:attribute:: __slots__
      :value: '_iri'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 1002

      

   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.


   .. py:method:: get_inverse_property() -> OWLObjectInverseOf

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.


   .. py:method:: get_iri() -> _iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:method:: is_owl_top_object_property() -> bool

      Determines if this is the owl:topObjectProperty.

      :returns: topObjectProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLObjectInverseOf(property: OWLObjectProperty)


   Bases: :py:obj:`OWLObjectPropertyExpression`

   Represents the inverse of a property expression (ObjectInverseOf). This can be used to refer to the inverse of
   a property, without actually naming the property. For example, consider the property hasPart, the inverse property
   of hasPart (isPartOf) can be referred to using this interface inverseOf(hasPart), which can be used in
   restrictions e.g. inverseOf(hasPart) some Car refers to the set of things that are part of at least one car.

   .. py:attribute:: __slots__
      :value: '_inverse_property'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 1003

      

   .. py:method:: get_inverse() -> OWLObjectProperty

      Gets the property expression that this is the inverse of.

      :returns: The object property expression such that this object property expression is an inverse of it.


   .. py:method:: get_inverse_property() -> OWLObjectProperty

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.


   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataRestriction


   Bases: :py:obj:`OWLRestriction`

   Represents a Data Property Restriction in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: is_data_restriction() -> bool

      Determines if this is a data restriction.

      :returns: True if this is a data restriction.



.. py:class:: OWLObjectRestriction


   Bases: :py:obj:`OWLRestriction`

   Represents a Object Property Restriction in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: is_object_restriction() -> bool

      Determines if this is an object restriction.

      :returns: True if this is an object restriction.


   .. py:method:: get_property() -> OWLObjectPropertyExpression
      :abstractmethod:

      :returns: Property being restricted.



.. py:class:: HasFiller


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_T`\ ]

   An interface to objects that have a filler.

   :param _T: Filler type.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_filler() -> _T
      :abstractmethod:

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLHasValueRestriction(value: _T)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_T`\ ], :py:obj:`OWLRestriction`, :py:obj:`HasFiller`\ [\ :py:obj:`_T`\ ]

   OWLHasValueRestriction.

   :param _T: The value type.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: get_filler() -> _T

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLQuantifiedRestriction


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_T`\ ], :py:obj:`OWLRestriction`, :py:obj:`HasFiller`\ [\ :py:obj:`_T`\ ]

   Represents a quantified restriction.

   :param _T: value type

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLQuantifiedObjectRestriction(filler: OWLClassExpression)


   Bases: :py:obj:`OWLQuantifiedRestriction`\ [\ :py:obj:`OWLClassExpression`\ ], :py:obj:`OWLObjectRestriction`

   Represents a quantified object restriction.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_filler() -> OWLClassExpression

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLObjectSomeValuesFrom(property: OWLObjectPropertyExpression, filler: OWLClassExpression)


   Bases: :py:obj:`OWLQuantifiedObjectRestriction`

   Represents an ObjectSomeValuesFrom class expression in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_property', '_filler')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3005

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: get_property() -> OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectAllValuesFrom(property: OWLObjectPropertyExpression, filler: OWLClassExpression)


   Bases: :py:obj:`OWLQuantifiedObjectRestriction`

   Represents an ObjectAllValuesFrom class expression in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_property', '_filler')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3006

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: get_property() -> OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLNaryBooleanClassExpression(operands: Iterable[OWLClassExpression])


   Bases: :py:obj:`OWLBooleanClassExpression`, :py:obj:`HasOperands`\ [\ :py:obj:`OWLClassExpression`\ ]

   OWLNaryBooleanClassExpression.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: operands() -> Iterable[OWLClassExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectUnionOf(operands: Iterable[OWLClassExpression])


   Bases: :py:obj:`OWLNaryBooleanClassExpression`

   Represents an ObjectUnionOf class expression in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_operands'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3002

      


.. py:class:: OWLObjectIntersectionOf(operands: Iterable[OWLClassExpression])


   Bases: :py:obj:`OWLNaryBooleanClassExpression`

   Represents an OWLObjectIntersectionOf class expression in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_operands'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3001

      


.. py:class:: HasCardinality


   An interface to objects that have a cardinality.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_cardinality() -> int
      :abstractmethod:

      Gets the cardinality of a restriction.

      :returns: The cardinality. A non-negative integer.



.. py:class:: OWLCardinalityRestriction(cardinality: int, filler: _F)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_F`\ ], :py:obj:`OWLQuantifiedRestriction`\ [\ :py:obj:`_F`\ ], :py:obj:`HasCardinality`

   Base interface for owl min and max cardinality restriction.

   :param _F: Type of filler.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_cardinality() -> int

      Gets the cardinality of a restriction.

      :returns: The cardinality. A non-negative integer.


   .. py:method:: get_filler() -> _F

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLObjectCardinalityRestriction(cardinality: int, property: OWLObjectPropertyExpression, filler: OWLClassExpression)


   Bases: :py:obj:`OWLCardinalityRestriction`\ [\ :py:obj:`OWLClassExpression`\ ], :py:obj:`OWLQuantifiedObjectRestriction`

   Represents Object Property Cardinality Restrictions in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_property() -> OWLObjectPropertyExpression

      :returns: Property being restricted.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectMinCardinality(cardinality: int, property: OWLObjectPropertyExpression, filler: OWLClassExpression)


   Bases: :py:obj:`OWLObjectCardinalityRestriction`

   Represents a ObjectMinCardinality restriction in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3008

      


.. py:class:: OWLObjectMaxCardinality(cardinality: int, property: OWLObjectPropertyExpression, filler: OWLClassExpression)


   Bases: :py:obj:`OWLObjectCardinalityRestriction`

   Represents a ObjectMaxCardinality restriction in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3010

      


.. py:class:: OWLObjectExactCardinality(cardinality: int, property: OWLObjectPropertyExpression, filler: OWLClassExpression)


   Bases: :py:obj:`OWLObjectCardinalityRestriction`

   Represents an ObjectExactCardinality  restriction in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3009

      

   .. py:method:: as_intersection_of_min_max() -> OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R C) = >= 1 R C and <= 1 R C.



.. py:class:: OWLObjectHasSelf(property: OWLObjectPropertyExpression)


   Bases: :py:obj:`OWLObjectRestriction`

   Represents an ObjectHasSelf class expression in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_property'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3011

      

   .. py:method:: get_property() -> OWLObjectPropertyExpression

      :returns: Property being restricted.


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLIndividual


   Bases: :py:obj:`_base.OWLObject`

   Represents a named or anonymous individual.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLObjectHasValue(property: OWLObjectPropertyExpression, individual: OWLIndividual)


   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`OWLIndividual`\ ], :py:obj:`OWLObjectRestriction`

   Represents an ObjectHasValue class expression in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_property', '_v')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3007

      

   .. py:method:: get_property() -> OWLObjectPropertyExpression

      :returns: Property being restricted.


   .. py:method:: as_some_values_from() -> OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectOneOf(values: Union[OWLIndividual, Iterable[OWLIndividual]])


   Bases: :py:obj:`OWLAnonymousClassExpression`, :py:obj:`HasOperands`\ [\ :py:obj:`OWLIndividual`\ ]

   Represents an ObjectOneOf class expression in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_values'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3004

      

   .. py:method:: individuals() -> Iterable[OWLIndividual]

      Gets the individuals that are in the oneOf. These individuals represent the exact instances (extension)
      of this class expression.

      :returns: The individuals that are the values of this {@code ObjectOneOf} class expression.


   .. py:method:: operands() -> Iterable[OWLIndividual]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.


   .. py:method:: as_object_union_of() -> OWLClassExpression

      Simplifies this enumeration to a union of singleton nominals.

      :returns: This enumeration in a more standard DL form.
                simp({a}) = {a} simp({a0, ... , {an}) = unionOf({a0}, ... , {an})


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLNamedIndividual(iri: _iri.IRI)


   Bases: :py:obj:`OWLIndividual`, :py:obj:`OWLEntity`

   Represents a Named Individual in the OWL 2 Specification.

   .. py:property:: iri


   .. py:property:: str


   .. py:attribute:: __slots__
      :value: '_iri'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 1005

      

   .. py:method:: get_iri() -> _iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.



.. py:class:: OWLOntologyID(ontology_iri: Optional[_iri.IRI] = None, version_iri: Optional[_iri.IRI] = None)


   An object that identifies an ontology. Since OWL 2, ontologies do not have to have an ontology IRI, or if they
   have an ontology IRI then they can optionally also have a version IRI. Instances of this OWLOntologyID class bundle
   identifying information of an ontology together. If an ontology doesn't have an ontology IRI then we say that it is
   "anonymous".

   .. py:attribute:: __slots__
      :value: ('_ontology_iri', '_version_iri')

      

   .. py:method:: get_ontology_iri() -> Optional[_iri.IRI]

      Gets the ontology IRI.

      :returns: Ontology IRI. If the ontology is anonymous, it will return None.


   .. py:method:: get_version_iri() -> Optional[_iri.IRI]

      Gets the version IRI.

      :returns: Version IRI or None.


   .. py:method:: get_default_document_iri() -> Optional[_iri.IRI]

      Gets the IRI which is used as a default for the document that contain a representation of an ontology with
      this ID. This will be the version IRI if there is an ontology IRI and version IRI, else it will be the ontology
      IRI if there is an ontology IRI but no version IRI, else it will be None if there is no ontology IRI. See
      Ontology Documents in the OWL 2 Structural Specification.

      :returns: the IRI that can be used as a default for an ontology document, or None.


   .. py:method:: is_anonymous() -> bool


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.



.. py:class:: OWLAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`_base.OWLObject`

   Represents Axioms in the OWL 2 Specification.

   An OWL ontology contains a set of axioms. These axioms can be annotation axioms, declaration axioms, imports axioms
   or logical axioms.

   .. py:attribute:: __slots__
      :value: '_annotations'

      

   .. py:method:: annotations() -> Optional[List[OWLAnnotation]]


   .. py:method:: is_annotated() -> bool


   .. py:method:: is_logical_axiom() -> bool


   .. py:method:: is_annotation_axiom() -> bool



.. py:class:: OWLDatatype(iri: Union[_iri.IRI, _iri.HasIRI])


   Bases: :py:obj:`OWLEntity`, :py:obj:`OWLDataRange`

   Represents a Datatype (named data range) in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_iri'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 4001

      

   .. py:method:: get_iri() -> _iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.



.. py:class:: OWLDatatypeRestriction(type_: OWLDatatype, facet_restrictions: Union[OWLFacetRestriction, Iterable[OWLFacetRestriction]])


   Bases: :py:obj:`OWLDataRange`

   Represents a DatatypeRestriction data range in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_type', '_facet_restrictions')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 4006

      

   .. py:method:: get_datatype() -> OWLDatatype


   .. py:method:: get_facet_restrictions() -> Sequence[OWLFacetRestriction]


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLFacetRestriction(facet: owlapy.vocab.OWLFacet, literal: Literals)


   Bases: :py:obj:`_base.OWLObject`

   A facet restriction is used to restrict a particular datatype.

   .. py:attribute:: __slots__
      :value: ('_facet', '_literal')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 4007

      

   .. py:method:: get_facet() -> owlapy.vocab.OWLFacet


   .. py:method:: get_facet_value() -> OWLLiteral


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLLiteral


   Bases: :py:obj:`_base.OWLAnnotationValue`

   Represents a Literal in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:attribute:: type_index
      :type: Final
      :value: 4008

      

   .. py:method:: get_literal() -> str

      Gets the lexical value of this literal. Note that the language tag is not included.

      :returns: The lexical value of this literal.


   .. py:method:: is_boolean() -> bool

      Whether this literal is typed as boolean.


   .. py:method:: parse_boolean() -> bool

      Parses the lexical value of this literal into a bool. The lexical value of this literal should be in the
      lexical space of the boolean datatype ("http://www.w3.org/2001/XMLSchema#boolean").

      :returns: A bool value that is represented by this literal.


   .. py:method:: is_double() -> bool

      Whether this literal is typed as double.


   .. py:method:: parse_double() -> float

      Parses the lexical value of this literal into a double. The lexical value of this literal should be in the
      lexical space of the double datatype ("http://www.w3.org/2001/XMLSchema#double").

      :returns: A double value that is represented by this literal.


   .. py:method:: is_integer() -> bool

      Whether this literal is typed as integer.


   .. py:method:: parse_integer() -> int

      Parses the lexical value of this literal into an integer. The lexical value of this literal should be in the
      lexical space of the integer datatype ("http://www.w3.org/2001/XMLSchema#integer").

      :returns: An integer value that is represented by this literal.


   .. py:method:: is_string() -> bool

      Whether this literal is typed as string.


   .. py:method:: parse_string() -> str

      Parses the lexical value of this literal into a string. The lexical value of this literal should be in the
      lexical space of the string datatype ("http://www.w3.org/2001/XMLSchema#string").

      :returns: A string value that is represented by this literal.


   .. py:method:: is_date() -> bool

      Whether this literal is typed as date.


   .. py:method:: parse_date() -> datetime.date

      Parses the lexical value of this literal into a date. The lexical value of this literal should be in the
      lexical space of the date datatype ("http://www.w3.org/2001/XMLSchema#date").

      :returns: A date value that is represented by this literal.


   .. py:method:: is_datetime() -> bool

      Whether this literal is typed as dateTime.


   .. py:method:: parse_datetime() -> datetime.datetime

      Parses the lexical value of this literal into a datetime. The lexical value of this literal should be in the
      lexical space of the dateTime datatype ("http://www.w3.org/2001/XMLSchema#dateTime").

      :returns: A datetime value that is represented by this literal.


   .. py:method:: is_duration() -> bool

      Whether this literal is typed as duration.


   .. py:method:: parse_duration() -> pandas.Timedelta

      Parses the lexical value of this literal into a Timedelta. The lexical value of this literal should be in the
      lexical space of the duration datatype ("http://www.w3.org/2001/XMLSchema#duration").

      :returns: A Timedelta value that is represented by this literal.


   .. py:method:: is_literal() -> bool

      :returns: true if the annotation value is a literal


   .. py:method:: as_literal() -> OWLLiteral

      :returns: if the value is a literal, returns it. Return None otherwise


   .. py:method:: to_python() -> Literals


   .. py:method:: get_datatype() -> OWLDatatype
      :abstractmethod:

      Gets the OWLDatatype which types this literal.

      :returns: The OWLDatatype that types this literal.



.. py:class:: OWLQuantifiedDataRestriction(filler: OWLDataRange)


   Bases: :py:obj:`OWLQuantifiedRestriction`\ [\ :py:obj:`OWLDataRange`\ ], :py:obj:`OWLDataRestriction`

   Represents a quantified data restriction.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_filler() -> OWLDataRange

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLDataCardinalityRestriction(cardinality: int, property: OWLDataPropertyExpression, filler: OWLDataRange)


   Bases: :py:obj:`OWLCardinalityRestriction`\ [\ :py:obj:`OWLDataRange`\ ], :py:obj:`OWLQuantifiedDataRestriction`, :py:obj:`OWLDataRestriction`

   Represents Data Property Cardinality Restrictions in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_property() -> OWLDataPropertyExpression

      :returns: Property being restricted.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataAllValuesFrom(property: OWLDataPropertyExpression, filler: OWLDataRange)


   Bases: :py:obj:`OWLQuantifiedDataRestriction`

   Represents DataAllValuesFrom class expressions in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_property'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3013

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: get_property() -> OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataComplementOf(data_range: OWLDataRange)


   Bases: :py:obj:`OWLDataRange`

   Represents DataComplementOf in the OWL 2 Specification.

   .. py:attribute:: type_index
      :type: Final
      :value: 4002

      

   .. py:method:: get_data_range() -> OWLDataRange

      :returns: The wrapped data range.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataExactCardinality(cardinality: int, property: OWLDataPropertyExpression, filler: OWLDataRange)


   Bases: :py:obj:`OWLDataCardinalityRestriction`

   Represents DataExactCardinality restrictions in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3016

      

   .. py:method:: as_intersection_of_min_max() -> OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R D) = >= 1 R D and <= 1 R D.



.. py:class:: OWLDataHasValue(property: OWLDataPropertyExpression, value: OWLLiteral)


   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`OWLLiteral`\ ], :py:obj:`OWLDataRestriction`

   Represents DataHasValue restrictions in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_property'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3014

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: as_some_values_from() -> OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).


   .. py:method:: get_property() -> OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataMaxCardinality(cardinality: int, property: OWLDataPropertyExpression, filler: OWLDataRange)


   Bases: :py:obj:`OWLDataCardinalityRestriction`

   Represents DataMaxCardinality restrictions in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3017

      


.. py:class:: OWLDataMinCardinality(cardinality: int, property: OWLDataPropertyExpression, filler: OWLDataRange)


   Bases: :py:obj:`OWLDataCardinalityRestriction`

   Represents DataMinCardinality restrictions in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3015

      


.. py:class:: OWLDataOneOf(values: Union[OWLLiteral, Iterable[OWLLiteral]])


   Bases: :py:obj:`OWLDataRange`, :py:obj:`HasOperands`\ [\ :py:obj:`OWLLiteral`\ ]

   Represents DataOneOf in the OWL 2 Specification.

   .. py:attribute:: type_index
      :type: Final
      :value: 4003

      

   .. py:method:: values() -> Iterable[OWLLiteral]

      Gets the values that are in the oneOf.

      :returns: The values of this {@code DataOneOf} class expression.


   .. py:method:: operands() -> Iterable[OWLLiteral]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDataSomeValuesFrom(property: OWLDataPropertyExpression, filler: OWLDataRange)


   Bases: :py:obj:`OWLQuantifiedDataRestriction`

   Represents a DataSomeValuesFrom restriction in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_property'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 3012

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: get_property() -> OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLNaryDataRange(operands: Iterable[OWLDataRange])


   Bases: :py:obj:`OWLDataRange`, :py:obj:`HasOperands`\ [\ :py:obj:`OWLDataRange`\ ]

   OWLNaryDataRange.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: operands() -> Iterable[OWLDataRange]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataUnionOf(operands: Iterable[OWLDataRange])


   Bases: :py:obj:`OWLNaryDataRange`

   Represents a DataUnionOf data range in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_operands'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 4005

      


.. py:class:: OWLDataIntersectionOf(operands: Iterable[OWLDataRange])


   Bases: :py:obj:`OWLNaryDataRange`

   Represents DataIntersectionOf  in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: '_operands'

      

   .. py:attribute:: type_index
      :type: Final
      :value: 4004

      


.. py:class:: OWLImportsDeclaration(import_iri: _iri.IRI)


   Bases: :py:obj:`_iri.HasIRI`

   Represents an import statement in an ontology.

   .. py:attribute:: __slots__
      :value: '_iri'

      

   .. py:method:: get_iri() -> _iri.IRI

      Gets the import IRI.

      :returns: The import IRI that points to the ontology to be imported. The imported ontology might have this IRI as
                its ontology IRI but this is not mandated. For example, an ontology with a non-resolvable ontology IRI
                can be deployed at a resolvable URL.



.. py:class:: OWLLogicalAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLAxiom`

   A base interface of all axioms that affect the logical meaning of an ontology. This excludes declaration axioms
   (including imports declarations) and annotation axioms.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: is_logical_axiom() -> bool



.. py:class:: OWLPropertyAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLLogicalAxiom`

   The base interface for property axioms.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLObjectPropertyAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyAxiom`

   The base interface for object property axioms.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDataPropertyAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyAxiom`

   The base interface for data property axioms.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLIndividualAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLLogicalAxiom`

   The base interface for individual axioms.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLClassAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLLogicalAxiom`

   The base interface for class axioms.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDeclarationAxiom(entity: OWLEntity, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLAxiom`

   Represents a Declaration axiom in the OWL 2 Specification. A declaration axiom declares an entity in an ontology.
   It doesn't affect the logical meaning of the ontology.

   .. py:attribute:: __slots__
      :value: '_entity'

      

   .. py:method:: get_entity() -> OWLEntity


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDatatypeDefinitionAxiom(datatype: OWLDatatype, datarange: OWLDataRange, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLLogicalAxiom`

   Represents a DatatypeDefinition axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_datatype', '_datarange')

      

   .. py:method:: get_datatype() -> OWLDatatype


   .. py:method:: get_datarange() -> OWLDataRange


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLHasKeyAxiom(class_expression: OWLClassExpression, property_expressions: List[OWLPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLLogicalAxiom`, :py:obj:`HasOperands`\ [\ :py:obj:`OWLPropertyExpression`\ ]

   Represents a HasKey axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_class_expression', '_property_expressions')

      

   .. py:method:: get_class_expression() -> OWLClassExpression


   .. py:method:: get_property_expressions() -> List[OWLPropertyExpression]


   .. py:method:: operands() -> Iterable[OWLPropertyExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLNaryAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_C`\ ], :py:obj:`OWLAxiom`

   Represents an axiom that contains two or more operands that could also be represented with multiple pairwise
   axioms.

   :param _C: Class of contained objects.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: as_pairwise_axioms() -> Iterable[OWLNaryAxiom[_C]]
      :abstractmethod:



.. py:class:: OWLNaryClassAxiom(class_expressions: List[OWLClassExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLClassAxiom`, :py:obj:`OWLNaryAxiom`\ [\ :py:obj:`OWLClassExpression`\ ]

   Represents an axiom that contains two or more operands that could also be represented with
   multiple pairwise axioms.

   .. py:attribute:: __slots__
      :value: '_class_expressions'

      

   .. py:method:: class_expressions() -> Iterable[OWLClassExpression]

      Gets all of the top level class expressions that appear in this axiom.

      :returns: Sorted stream of class expressions that appear in the axiom.


   .. py:method:: as_pairwise_axioms() -> Iterable[OWLNaryClassAxiom]

      Gets this axiom as a set of pairwise axioms; if the axiom contains only two operands,
      the axiom itself is returned unchanged, including its annotations.

      :returns: This axiom as a set of pairwise axioms.


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLEquivalentClassesAxiom(class_expressions: List[OWLClassExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryClassAxiom`

   Represents an EquivalentClasses axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: contains_named_equivalent_class() -> bool


   .. py:method:: contains_owl_nothing() -> bool


   .. py:method:: contains_owl_thing() -> bool


   .. py:method:: named_classes() -> Iterable[OWLClass]



.. py:class:: OWLDisjointClassesAxiom(class_expressions: List[OWLClassExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryClassAxiom`

   Represents a DisjointClasses axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLNaryIndividualAxiom(individuals: List[OWLIndividual], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLIndividualAxiom`, :py:obj:`OWLNaryAxiom`\ [\ :py:obj:`OWLIndividual`\ ]

   Represents an axiom that contains two or more operands that could also be represented with
   multiple pairwise individual axioms.

   .. py:attribute:: __slots__
      :value: '_individuals'

      

   .. py:method:: individuals() -> Iterable[OWLIndividual]

      Get the individuals.

      :returns: Generator containing the individuals.


   .. py:method:: as_pairwise_axioms() -> Iterable[OWLNaryIndividualAxiom]


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDifferentIndividualsAxiom(individuals: List[OWLIndividual], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryIndividualAxiom`

   Represents a DifferentIndividuals axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLSameIndividualAxiom(individuals: List[OWLIndividual], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryIndividualAxiom`

   Represents a SameIndividual axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLNaryPropertyAxiom(properties: List[_P], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ ], :py:obj:`OWLPropertyAxiom`, :py:obj:`OWLNaryAxiom`\ [\ :py:obj:`_P`\ ]

   Represents an axiom that contains two or more operands that could also be represented with
   multiple pairwise property axioms.

   .. py:attribute:: __slots__
      :value: '_properties'

      

   .. py:method:: properties() -> Iterable[_P]

      Get all the properties that appear in the axiom.

      :returns: Generator containing the properties.


   .. py:method:: as_pairwise_axioms() -> Iterable[OWLNaryPropertyAxiom]


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLEquivalentObjectPropertiesAxiom(properties: List[OWLObjectPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`

   Represents EquivalentObjectProperties axioms in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDisjointObjectPropertiesAxiom(properties: List[OWLObjectPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`

   Represents DisjointObjectProperties axioms in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLInverseObjectPropertiesAxiom(first: OWLObjectPropertyExpression, second: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`

   Represents InverseObjectProperties axioms in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_first', '_second')

      

   .. py:method:: get_first_property() -> OWLObjectPropertyExpression


   .. py:method:: get_second_property() -> OWLObjectPropertyExpression


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLEquivalentDataPropertiesAxiom(properties: List[OWLDataPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`OWLDataPropertyExpression`\ ], :py:obj:`OWLDataPropertyAxiom`

   Represents EquivalentDataProperties axioms in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDisjointDataPropertiesAxiom(properties: List[OWLDataPropertyExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLNaryPropertyAxiom`\ [\ :py:obj:`OWLDataPropertyExpression`\ ], :py:obj:`OWLDataPropertyAxiom`

   Represents DisjointDataProperties axioms in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLSubClassOfAxiom(sub_class: OWLClassExpression, super_class: OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLClassAxiom`

   Represents an SubClassOf axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_sub_class', '_super_class')

      

   .. py:method:: get_sub_class() -> OWLClassExpression


   .. py:method:: get_super_class() -> OWLClassExpression


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDisjointUnionAxiom(cls_: OWLClass, class_expressions: List[OWLClassExpression], annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLClassAxiom`

   Represents a DisjointUnion axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_cls', '_class_expressions')

      

   .. py:method:: get_owl_class() -> OWLClass


   .. py:method:: get_class_expressions() -> Iterable[OWLClassExpression]


   .. py:method:: get_owl_equivalent_classes_axiom() -> OWLEquivalentClassesAxiom


   .. py:method:: get_owl_disjoint_classes_axiom() -> OWLDisjointClassesAxiom


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLClassAssertionAxiom(individual: OWLIndividual, class_expression: OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLIndividualAxiom`

   Represents ClassAssertion axioms in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ('_individual', '_class_expression')

      

   .. py:method:: get_individual() -> OWLIndividual


   .. py:method:: get_class_expression() -> OWLClassExpression


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLAnnotationAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLAxiom`

   A super interface for annotation axioms.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: is_annotation_axiom() -> bool



.. py:class:: OWLAnnotationProperty(iri: _iri.IRI)


   Bases: :py:obj:`OWLProperty`

   Represents an AnnotationProperty in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: '_iri'

      

   .. py:method:: get_iri() -> _iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.



.. py:class:: OWLAnnotation(property: OWLAnnotationProperty, value: _base.OWLAnnotationValue)


   Bases: :py:obj:`_base.OWLObject`

   Annotations are used in the various types of annotation axioms, which bind annotations to their subjects
   (i.e. axioms or declarations).

   .. py:attribute:: __slots__
      :value: ('_property', '_value')

      

   .. py:method:: get_property() -> OWLAnnotationProperty

      Gets the property that this annotation acts along.

      :returns: The annotation property.


   .. py:method:: get_value() -> _base.OWLAnnotationValue

      Gets the annotation value. The type of value will depend upon the type of the annotation e.g. whether the
      annotation is an OWLLiteral, an IRI or an OWLAnonymousIndividual.

      :returns: The annotation value.


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLAnnotationAssertionAxiom(subject: _base.OWLAnnotationSubject, annotation: OWLAnnotation)


   Bases: :py:obj:`OWLAnnotationAxiom`

   Represents AnnotationAssertion axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ('_subject', '_annotation')

      

   .. py:method:: get_subject() -> _base.OWLAnnotationSubject

      Gets the subject of this object.

      :returns: The subject.


   .. py:method:: get_property() -> OWLAnnotationProperty

      Gets the property.

      :returns: The property.


   .. py:method:: get_value() -> _base.OWLAnnotationValue

      Gets the annotation value. This is either an IRI, an OWLAnonymousIndividual or an OWLLiteral.

      :returns: The annotation value.


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLSubAnnotationPropertyOfAxiom(sub_property: OWLAnnotationProperty, super_property: OWLAnnotationProperty, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLAnnotationAxiom`

   Represents an SubAnnotationPropertyOf axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ('_sub_property', '_super_property')

      

   .. py:method:: get_sub_property() -> OWLAnnotationProperty


   .. py:method:: get_super_property() -> OWLAnnotationProperty


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLAnnotationPropertyDomainAxiom(property_: OWLAnnotationProperty, domain: _iri.IRI, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLAnnotationAxiom`

   Represents an AnnotationPropertyDomain axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ('_property', '_domain')

      

   .. py:method:: get_property() -> OWLAnnotationProperty


   .. py:method:: get_domain() -> _iri.IRI


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLAnnotationPropertyRangeAxiom(property_: OWLAnnotationProperty, range_: _iri.IRI, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLAnnotationAxiom`

   Represents an AnnotationPropertyRange axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ('_property', '_range')

      

   .. py:method:: get_property() -> OWLAnnotationProperty


   .. py:method:: get_range() -> _iri.IRI


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLSubPropertyAxiom(sub_property: _P, super_property: _P, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ ], :py:obj:`OWLPropertyAxiom`

   Base interface for object and data sub-property axioms.

   .. py:attribute:: __slots__
      :value: ('_sub_property', '_super_property')

      

   .. py:method:: get_sub_property() -> _P


   .. py:method:: get_super_property() -> _P


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLSubObjectPropertyOfAxiom(sub_property: OWLObjectPropertyExpression, super_property: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLSubPropertyAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`

   Represents a SubObjectPropertyOf axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLSubDataPropertyOfAxiom(sub_property: OWLDataPropertyExpression, super_property: OWLDataPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLSubPropertyAxiom`\ [\ :py:obj:`OWLDataPropertyExpression`\ ], :py:obj:`OWLDataPropertyAxiom`

   Represents a SubDataPropertyOf axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLPropertyAssertionAxiom(subject: OWLIndividual, property_: _P, object_: _C, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ , :py:obj:`_C`\ ], :py:obj:`OWLIndividualAxiom`

   Represents a PropertyAssertion axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ('_subject', '_property', '_object')

      

   .. py:method:: get_subject() -> OWLIndividual


   .. py:method:: get_property() -> _P


   .. py:method:: get_object() -> _C


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectPropertyAssertionAxiom(subject: OWLIndividual, property_: OWLObjectPropertyExpression, object_: OWLIndividual, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyAssertionAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ , :py:obj:`OWLIndividual`\ ]

   Represents an ObjectPropertyAssertion axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLNegativeObjectPropertyAssertionAxiom(subject: OWLIndividual, property_: OWLObjectPropertyExpression, object_: OWLIndividual, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyAssertionAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ , :py:obj:`OWLIndividual`\ ]

   Represents a NegativeObjectPropertyAssertion axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDataPropertyAssertionAxiom(subject: OWLIndividual, property_: OWLDataPropertyExpression, object_: OWLLiteral, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyAssertionAxiom`\ [\ :py:obj:`OWLDataPropertyExpression`\ , :py:obj:`OWLLiteral`\ ]

   Represents an DataPropertyAssertion axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLNegativeDataPropertyAssertionAxiom(subject: OWLIndividual, property_: OWLDataPropertyExpression, object_: OWLLiteral, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyAssertionAxiom`\ [\ :py:obj:`OWLDataPropertyExpression`\ , :py:obj:`OWLLiteral`\ ]

   Represents an NegativeDataPropertyAssertion axiom in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLUnaryPropertyAxiom(property_: _P, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ ], :py:obj:`OWLPropertyAxiom`

   Unary property axiom.

   .. py:attribute:: __slots__
      :value: '_property'

      

   .. py:method:: get_property() -> _P



.. py:class:: OWLObjectPropertyCharacteristicAxiom(property_: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLUnaryPropertyAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ ], :py:obj:`OWLObjectPropertyAxiom`

   Base interface for functional object property axiom.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLFunctionalObjectPropertyAxiom(property_: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`

   Represents FunctionalObjectProperty axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLAsymmetricObjectPropertyAxiom(property_: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`

   Represents AsymmetricObjectProperty axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLInverseFunctionalObjectPropertyAxiom(property_: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`

   Represents InverseFunctionalObjectProperty axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLIrreflexiveObjectPropertyAxiom(property_: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`

   Represents IrreflexiveObjectProperty axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLReflexiveObjectPropertyAxiom(property_: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`

   Represents ReflexiveObjectProperty axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLSymmetricObjectPropertyAxiom(property_: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`

   Represents SymmetricObjectProperty axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLTransitiveObjectPropertyAxiom(property_: OWLObjectPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLObjectPropertyCharacteristicAxiom`

   Represents TransitiveObjectProperty axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDataPropertyCharacteristicAxiom(property_: OWLDataPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLUnaryPropertyAxiom`\ [\ :py:obj:`OWLDataPropertyExpression`\ ], :py:obj:`OWLDataPropertyAxiom`

   Base interface for Functional data property axiom.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLFunctionalDataPropertyAxiom(property_: OWLDataPropertyExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLDataPropertyCharacteristicAxiom`

   Represents FunctionalDataProperty axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLPropertyDomainAxiom(property_: _P, domain: OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ ], :py:obj:`OWLUnaryPropertyAxiom`\ [\ :py:obj:`_P`\ ]

   Represents ObjectPropertyDomain axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: '_domain'

      

   .. py:method:: get_domain() -> OWLClassExpression


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLPropertyRangeAxiom(property_: _P, range_: _R, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ , :py:obj:`_R`\ ], :py:obj:`OWLUnaryPropertyAxiom`\ [\ :py:obj:`_P`\ ]

   Represents ObjectPropertyRange axioms in the OWL 2 specification.

   .. py:attribute:: __slots__
      :value: '_range'

      

   .. py:method:: get_range() -> _R


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectPropertyDomainAxiom(property_: OWLObjectPropertyExpression, domain: OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyDomainAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ ]

   Represents a ObjectPropertyDomain axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDataPropertyDomainAxiom(property_: OWLDataPropertyExpression, domain: OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyDomainAxiom`\ [\ :py:obj:`OWLDataPropertyExpression`\ ]

   Represents a DataPropertyDomain axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLObjectPropertyRangeAxiom(property_: OWLObjectPropertyExpression, range_: OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyRangeAxiom`\ [\ :py:obj:`OWLObjectPropertyExpression`\ , :py:obj:`OWLClassExpression`\ ]

   Represents a ObjectPropertyRange axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLDataPropertyRangeAxiom(property_: OWLDataPropertyExpression, range_: OWLDataRange, annotations: Optional[Iterable[OWLAnnotation]] = None)


   Bases: :py:obj:`OWLPropertyRangeAxiom`\ [\ :py:obj:`OWLDataPropertyExpression`\ , :py:obj:`OWLDataRange`\ ]

   Represents a DataPropertyRange axiom in the OWL 2 Specification.

   .. py:attribute:: __slots__
      :value: ()

      


.. py:class:: OWLOntology


   Bases: :py:obj:`_base.OWLObject`

   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:attribute:: type_index
      :type: Final
      :value: 1

      

   .. py:method:: classes_in_signature() -> Iterable[OWLClass]
      :abstractmethod:

      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.


   .. py:method:: data_properties_in_signature() -> Iterable[OWLDataProperty]
      :abstractmethod:

      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.


   .. py:method:: object_properties_in_signature() -> Iterable[OWLObjectProperty]
      :abstractmethod:

      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.


   .. py:method:: individuals_in_signature() -> Iterable[OWLNamedIndividual]
      :abstractmethod:

      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.


   .. py:method:: equivalent_classes_axioms(c: OWLClass) -> Iterable[OWLEquivalentClassesAxiom]
      :abstractmethod:

      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.


   .. py:method:: general_class_axioms() -> Iterable[OWLClassAxiom]
      :abstractmethod:

      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.


   .. py:method:: data_property_domain_axioms(property: OWLDataProperty) -> Iterable[OWLDataPropertyDomainAxiom]
      :abstractmethod:

      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.


   .. py:method:: data_property_range_axioms(property: OWLDataProperty) -> Iterable[OWLDataPropertyRangeAxiom]
      :abstractmethod:

      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.


   .. py:method:: object_property_domain_axioms(property: OWLObjectProperty) -> Iterable[OWLObjectPropertyDomainAxiom]
      :abstractmethod:

      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.


   .. py:method:: object_property_range_axioms(property: OWLObjectProperty) -> Iterable[OWLObjectPropertyRangeAxiom]
      :abstractmethod:

      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.


   .. py:method:: get_owl_ontology_manager() -> _M
      :abstractmethod:

      Gets the manager that manages this ontology.


   .. py:method:: get_ontology_id() -> OWLOntologyID
      :abstractmethod:

      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.


   .. py:method:: is_anonymous() -> bool

      Check whether this ontology does contain an IRI or not.



.. py:class:: OWLOntologyChange(ontology: OWLOntology)


   Represents an ontology change.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: get_ontology() -> OWLOntology

      Gets the ontology that the change is/was applied to.

      :returns: The ontology that the change is applicable to.



.. py:class:: AddImport(ontology: OWLOntology, import_declaration: OWLImportsDeclaration)


   Bases: :py:obj:`OWLOntologyChange`

   Represents an ontology change where an import statement is added to an ontology.

   .. py:attribute:: __slots__
      :value: ('_ont', '_declaration')

      

   .. py:method:: get_import_declaration() -> OWLImportsDeclaration

      Gets the import declaration that the change pertains to.

      :returns: The import declaration.



.. py:class:: OWLOntologyManager


   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.

   .. py:method:: create_ontology(iri: _iri.IRI) -> OWLOntology
      :abstractmethod:

      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created.

      :returns: The newly created ontology, or if an ontology with the specified IRI already exists then this existing
                ontology will be returned.


   .. py:method:: load_ontology(iri: _iri.IRI) -> OWLOntology
      :abstractmethod:

      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri: The IRI that identifies the ontology. It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.


   .. py:method:: apply_change(change: OWLOntologyChange)
      :abstractmethod:

      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.


   .. py:method:: add_axiom(ontology: OWLOntology, axiom: OWLAxiom)
      :abstractmethod:

      A convenience method that adds a single axiom to an ontology.

      :param ontology: The ontology to add the axiom to.
      :param axiom: The axiom to be added.


   .. py:method:: remove_axiom(ontology: OWLOntology, axiom: OWLAxiom)
      :abstractmethod:

      A convenience method that removes a single axiom from an ontology.

      :param ontology: The ontology to remove the axiom from.
      :param axiom: The axiom to be removed.


   .. py:method:: save_ontology(ontology: OWLOntology, document_iri: _iri.IRI)
      :abstractmethod:

      Saves the specified ontology, using the specified document IRI to determine where/how the ontology should be
      saved.

      :param ontology: The ontology to be saved.
      :param document_iri: The document IRI where the ontology should be saved to.



.. py:class:: OWLReasoner(ontology: OWLOntology)


   An OWLReasoner reasons over a set of axioms (the set of reasoner axioms) that is based on the imports closure of
   a particular ontology - the "root" ontology.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: data_property_domains(pe: OWLDataProperty, direct: bool = False) -> Iterable[OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(DataSomeValuesFrom(pe rdfs:Literal)). If direct is True: then if N is not
                empty then the return value is N, else the return value is the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), true). If direct is False: then the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), false) together with N if N is non-empty.
                (Note, rdfs:Literal is the top datatype).


   .. py:method:: object_property_domains(pe: OWLObjectProperty, direct: bool = False) -> Iterable[OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(pe owl:Thing)). If direct is True: then if N is not empty
                then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), true). If direct is False: then the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), false) together with N if N is non-empty.


   .. py:method:: object_property_ranges(pe: OWLObjectProperty, direct: bool = False) -> Iterable[OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are the direct or indirect ranges of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing)). If direct is True: then
                if N is not empty then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), true). If direct is False: then
                the result of super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), false) together with N
                if N is non-empty.


   .. py:method:: equivalent_classes(ce: OWLClassExpression, only_named: bool = True) -> Iterable[OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are equivalent to the specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose equivalent classes are to be retrieved.
      :param only_named: Whether to only retrieve named equivalent classes or also complex class expressions.

      :returns: All class expressions C where the root ontology imports closure entails EquivalentClasses(ce C). If ce is
                not a class name (i.e. it is an anonymous class expression) and there are no such classes C then there will
                be no result. If ce is unsatisfiable with respect to the set of reasoner axioms then  owl:Nothing, i.e. the
                bottom node, will be returned.


   .. py:method:: disjoint_classes(ce: OWLClassExpression, only_named: bool = True) -> Iterable[OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are disjoint with specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose disjoint classes are to be retrieved.
      :param only_named: Whether to only retrieve named disjoint classes or also complex class expressions.

      :returns: All class expressions D where the set of reasoner axioms entails EquivalentClasses(D ObjectComplementOf(ce))
                or StrictSubClassOf(D ObjectComplementOf(ce)).


   .. py:method:: different_individuals(ind: OWLNamedIndividual) -> Iterable[OWLNamedIndividual]
      :abstractmethod:

      Gets the individuals that are different from the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose different individuals are to be retrieved.

      :returns: All individuals x where the set of reasoner axioms entails DifferentIndividuals(ind x).


   .. py:method:: same_individuals(ind: OWLNamedIndividual) -> Iterable[OWLNamedIndividual]
      :abstractmethod:

      Gets the individuals that are the same as the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose same individuals are to be retrieved.

      :returns: All individuals x where the root ontology imports closure entails SameIndividual(ind x).


   .. py:method:: equivalent_object_properties(op: OWLObjectPropertyExpression) -> Iterable[OWLObjectPropertyExpression]
      :abstractmethod:

      Gets the simplified object properties that are equivalent to the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose equivalent object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(op e). If op is unsatisfiable with respect to the set of reasoner axioms
                then owl:bottomDataProperty will be returned.


   .. py:method:: equivalent_data_properties(dp: OWLDataProperty) -> Iterable[OWLDataProperty]
      :abstractmethod:

      Gets the data properties that are equivalent to the specified data property with respect to the set of
      reasoner axioms.

      :param dp: The data property whose equivalent data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails EquivalentDataProperties(dp e).
                If dp is unsatisfiable with respect to the set of reasoner axioms then owl:bottomDataProperty will
                be returned.


   .. py:method:: data_property_values(ind: OWLNamedIndividual, pe: OWLDataProperty, direct: bool = True) -> Iterable[OWLLiteral]
      :abstractmethod:

      Gets the data property values for the specified individual and data property expression.

      :param ind: The individual that is the subject of the data property values.
      :param pe: The data property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l).


   .. py:method:: object_property_values(ind: OWLNamedIndividual, pe: OWLObjectPropertyExpression, direct: bool = True) -> Iterable[OWLNamedIndividual]
      :abstractmethod:

      Gets the object property values for the specified individual and object property expression.

      :param ind: The individual that is the subject of the object property values.
      :param pe: The object property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: The named individuals such that for each individual j, the set of reasoner axioms entails
                ObjectPropertyAssertion(pe ind j).


   .. py:method:: flush() -> None
      :abstractmethod:

      Flushes any changes stored in the buffer, which causes the reasoner to take into consideration the changes
      the current root ontology specified by the changes.


   .. py:method:: instances(ce: OWLClassExpression, direct: bool = False) -> Iterable[OWLNamedIndividual]
      :abstractmethod:

      Gets the individuals which are instances of the specified class expression.

      :param ce: The class expression whose instances are to be retrieved.
      :param direct: Specifies if the direct instances should be retrieved (True), or if all instances should be
                     retrieved (False).

      :returns: If direct is True, each named individual j where the set of reasoner axioms entails
                DirectClassAssertion(ce, j). If direct is False, each named individual j where the set of reasoner axioms
                entails ClassAssertion(ce, j). If ce is unsatisfiable with respect to the set of reasoner axioms then
                nothing returned.


   .. py:method:: sub_classes(ce: OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[OWLClassExpression]
      :abstractmethod:

      Gets the set of named classes that are the strict (potentially direct) subclasses of the specified class
      expression with respect to the reasoner axioms.

      :param ce: The class expression whose strict (direct) subclasses are to be retrieved.
      :param direct: Specifies if the direct subclasses should be retrieved (True) or if the all subclasses
                     (descendant) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named sub-classes or also complex class expressions.

      :returns: If direct is True, each class C where reasoner axioms entails DirectSubClassOf(C, ce). If direct is False,
                each class C where reasoner axioms entails StrictSubClassOf(C, ce). If ce is equivalent to owl:Nothing then
                nothing will be returned.


   .. py:method:: disjoint_object_properties(op: OWLObjectPropertyExpression) -> Iterable[OWLObjectPropertyExpression]
      :abstractmethod:

      Gets the simplified object properties that are disjoint with the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose disjoint object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(e ObjectPropertyComplementOf(op)) or
                StrictSubObjectPropertyOf(e ObjectPropertyComplementOf(op)).


   .. py:method:: disjoint_data_properties(dp: OWLDataProperty) -> Iterable[OWLDataProperty]
      :abstractmethod:

      Gets the data properties that are disjoint with the specified data property with respect
      to the set of reasoner axioms.

      :param dp: The data property whose disjoint data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails
                EquivalentDataProperties(e DataPropertyComplementOf(dp)) or
                StrictSubDataPropertyOf(e DataPropertyComplementOf(dp)).


   .. py:method:: sub_data_properties(dp: OWLDataProperty, direct: bool = False) -> Iterable[OWLDataProperty]
      :abstractmethod:

      Gets the set of named data properties that are the strict (potentially direct) subproperties of the
      specified data property expression with respect to the imports closure of the root ontology.

      :param dp: The data property whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, each property P where the set of reasoner axioms entails DirectSubDataPropertyOf(P, pe).
                If direct is False, each property P where the set of reasoner axioms entails
                StrictSubDataPropertyOf(P, pe). If pe is equivalent to owl:bottomDataProperty then nothing will be
                returned.


   .. py:method:: super_data_properties(dp: OWLDataProperty, direct: bool = False) -> Iterable[OWLDataProperty]
      :abstractmethod:

      Gets the stream of data properties that are the strict (potentially direct) super properties of the
      specified data property with respect to the imports closure of the root ontology.

      :param dp: The data property whose super properties are to be retrieved.
      :type dp: OWLDataProperty
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.


   .. py:method:: sub_object_properties(op: OWLObjectPropertyExpression, direct: bool = False) -> Iterable[OWLObjectPropertyExpression]
      :abstractmethod:

      Gets the stream of simplified object property expressions that are the strict (potentially direct)
      subproperties of the specified object property expression with respect to the imports closure of the root
      ontology.

      :param op: The object property expression whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails DirectSubObjectPropertyOf(P, pe).
                If direct is False, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails StrictSubObjectPropertyOf(P, pe).
                If pe is equivalent to owl:bottomObjectProperty then nothing will be returned.


   .. py:method:: super_object_properties(op: OWLObjectPropertyExpression, direct: bool = False) -> Iterable[OWLObjectPropertyExpression]
      :abstractmethod:

      Gets the stream of object properties that are the strict (potentially direct) super properties of the
      specified object property with respect to the imports closure of the root ontology.

      :param op: The object property expression whose super properties are to be
                 retrieved.
      :type op: OWLObjectPropertyExpression
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.


   .. py:method:: types(ind: OWLNamedIndividual, direct: bool = False) -> Iterable[OWLClass]
      :abstractmethod:

      Gets the named classes which are (potentially direct) types of the specified named individual.

      :param ind: The individual whose types are to be retrieved.
      :param direct: Specifies if the direct types should be retrieved (True), or if all types should be retrieved
                     (False).

      :returns: If direct is True, each named class C where the set of reasoner axioms entails
                DirectClassAssertion(C, ind). If direct is False, each named class C where the set of reasoner axioms
                entails ClassAssertion(C, ind).


   .. py:method:: get_root_ontology() -> OWLOntology
      :abstractmethod:

      Gets the "root" ontology that is loaded into this reasoner. The reasoner takes into account the axioms in
      this ontology and its import's closure.


   .. py:method:: is_isolated()
      :abstractmethod:

      Return True if this reasoner is using an isolated ontology.


   .. py:method:: is_using_triplestore()
      :abstractmethod:

      Return True if this reasoner is using a triplestore to retrieve instances.


   .. py:method:: super_classes(ce: OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[OWLClassExpression]
      :abstractmethod:

      Gets the stream of named classes that are the strict (potentially direct) super classes of the specified
      class expression with respect to the imports closure of the root ontology.

      :param ce: The class expression whose strict (direct) super classes are to be retrieved.
      :param direct: Specifies if the direct super classes should be retrieved (True) or if the all super classes
                     (ancestors) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named super classes or also complex class expressions.

      :returns: If direct is True, each class C where the set of reasoner axioms entails DirectSubClassOf(ce, C).
                If direct is False, each class C where  set of reasoner axioms entails StrictSubClassOf(ce, C).
                If ce is equivalent to owl:Thing then nothing will be returned.



.. py:data:: OWLThing
   :type: Final

   

.. py:data:: OWLNothing
   :type: Final

   

.. py:data:: OWLTopObjectProperty
   :type: Final

   

.. py:data:: OWLBottomObjectProperty
   :type: Final

   

.. py:data:: OWLTopDataProperty
   :type: Final

   

.. py:data:: OWLBottomDataProperty
   :type: Final

   

.. py:data:: DoubleOWLDatatype
   :type: Final

   

.. py:data:: IntegerOWLDatatype
   :type: Final

   

.. py:data:: BooleanOWLDatatype
   :type: Final

   

.. py:data:: StringOWLDatatype
   :type: Final

   

.. py:data:: DateOWLDatatype
   :type: Final

   

.. py:data:: DateTimeOWLDatatype
   :type: Final

   

.. py:data:: DurationOWLDatatype
   :type: Final

   

.. py:data:: TopOWLDatatype
   :type: Final

   

.. py:data:: NUMERIC_DATATYPES
   :type: Final[Set[OWLDatatype]]

   

.. py:data:: TIME_DATATYPES
   :type: Final[Set[OWLDatatype]]

   

