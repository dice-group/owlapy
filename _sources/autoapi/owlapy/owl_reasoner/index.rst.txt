:py:mod:`owlapy.owl_reasoner`
=============================

.. py:module:: owlapy.owl_reasoner

.. autoapi-nested-parse::

   OWL Reasoner



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   owlapy.owl_reasoner.OWLReasoner




.. py:class:: OWLReasoner(ontology: owlapy.owl_ontology.OWLOntology)


   An OWLReasoner reasons over a set of axioms (the set of reasoner axioms) that is based on the imports closure of
   a particular ontology - the "root" ontology.

   .. py:attribute:: __slots__
      :value: ()

      

   .. py:method:: data_property_domains(pe: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(DataSomeValuesFrom(pe rdfs:Literal)). If direct is True: then if N is not
                empty then the return value is N, else the return value is the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), true). If direct is False: then the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), false) together with N if N is non-empty.
                (Note, rdfs:Literal is the top datatype).


   .. py:method:: object_property_domains(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(pe owl:Thing)). If direct is True: then if N is not empty
                then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), true). If direct is False: then the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), false) together with N if N is non-empty.


   .. py:method:: object_property_ranges(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are the direct or indirect ranges of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing)). If direct is True: then
                if N is not empty then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), true). If direct is False: then
                the result of super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), false) together with N
                if N is non-empty.


   .. py:method:: equivalent_classes(ce: owlapy.class_expression.OWLClassExpression, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are equivalent to the specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose equivalent classes are to be retrieved.
      :param only_named: Whether to only retrieve named equivalent classes or also complex class expressions.

      :returns: All class expressions C where the root ontology imports closure entails EquivalentClasses(ce C). If ce is
                not a class name (i.e. it is an anonymous class expression) and there are no such classes C then there will
                be no result. If ce is unsatisfiable with respect to the set of reasoner axioms then  owl:Nothing, i.e. the
                bottom node, will be returned.


   .. py:method:: disjoint_classes(ce: owlapy.class_expression.OWLClassExpression, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:

      Gets the class expressions that are disjoint with specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose disjoint classes are to be retrieved.
      :param only_named: Whether to only retrieve named disjoint classes or also complex class expressions.

      :returns: All class expressions D where the set of reasoner axioms entails EquivalentClasses(D ObjectComplementOf(ce))
                or StrictSubClassOf(D ObjectComplementOf(ce)).


   .. py:method:: different_individuals(ind: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:

      Gets the individuals that are different from the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose different individuals are to be retrieved.

      :returns: All individuals x where the set of reasoner axioms entails DifferentIndividuals(ind x).


   .. py:method:: same_individuals(ind: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:

      Gets the individuals that are the same as the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose same individuals are to be retrieved.

      :returns: All individuals x where the root ontology imports closure entails SameIndividual(ind x).


   .. py:method:: equivalent_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:

      Gets the simplified object properties that are equivalent to the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose equivalent object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(op e). If op is unsatisfiable with respect to the set of reasoner axioms
                then owl:bottomDataProperty will be returned.


   .. py:method:: equivalent_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:

      Gets the data properties that are equivalent to the specified data property with respect to the set of
      reasoner axioms.

      :param dp: The data property whose equivalent data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails EquivalentDataProperties(dp e).
                If dp is unsatisfiable with respect to the set of reasoner axioms then owl:bottomDataProperty will
                be returned.


   .. py:method:: data_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLDataProperty, direct: bool = True) -> Iterable[owlapy.owl_literal.OWLLiteral]
      :abstractmethod:

      Gets the data property values for the specified individual and data property expression.

      :param ind: The individual that is the subject of the data property values.
      :param pe: The data property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l).


   .. py:method:: object_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = True) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:

      Gets the object property values for the specified individual and object property expression.

      :param ind: The individual that is the subject of the object property values.
      :param pe: The object property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: The named individuals such that for each individual j, the set of reasoner axioms entails
                ObjectPropertyAssertion(pe ind j).


   .. py:method:: flush() -> None
      :abstractmethod:

      Flushes any changes stored in the buffer, which causes the reasoner to take into consideration the changes
      the current root ontology specified by the changes.


   .. py:method:: instances(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:

      Gets the individuals which are instances of the specified class expression.

      :param ce: The class expression whose instances are to be retrieved.
      :param direct: Specifies if the direct instances should be retrieved (True), or if all instances should be
                     retrieved (False).

      :returns: If direct is True, each named individual j where the set of reasoner axioms entails
                DirectClassAssertion(ce, j). If direct is False, each named individual j where the set of reasoner axioms
                entails ClassAssertion(ce, j). If ce is unsatisfiable with respect to the set of reasoner axioms then
                nothing returned.


   .. py:method:: sub_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:

      Gets the set of named classes that are the strict (potentially direct) subclasses of the specified class
      expression with respect to the reasoner axioms.

      :param ce: The class expression whose strict (direct) subclasses are to be retrieved.
      :param direct: Specifies if the direct subclasses should be retrieved (True) or if the all subclasses
                     (descendant) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named sub-classes or also complex class expressions.

      :returns: If direct is True, each class C where reasoner axioms entails DirectSubClassOf(C, ce). If direct is False,
                each class C where reasoner axioms entails StrictSubClassOf(C, ce). If ce is equivalent to owl:Nothing then
                nothing will be returned.


   .. py:method:: disjoint_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:

      Gets the simplified object properties that are disjoint with the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose disjoint object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(e ObjectPropertyComplementOf(op)) or
                StrictSubObjectPropertyOf(e ObjectPropertyComplementOf(op)).


   .. py:method:: disjoint_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:

      Gets the data properties that are disjoint with the specified data property with respect
      to the set of reasoner axioms.

      :param dp: The data property whose disjoint data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails
                EquivalentDataProperties(e DataPropertyComplementOf(dp)) or
                StrictSubDataPropertyOf(e DataPropertyComplementOf(dp)).


   .. py:method:: sub_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:

      Gets the set of named data properties that are the strict (potentially direct) subproperties of the
      specified data property expression with respect to the imports closure of the root ontology.

      :param dp: The data property whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, each property P where the set of reasoner axioms entails DirectSubDataPropertyOf(P, pe).
                If direct is False, each property P where the set of reasoner axioms entails
                StrictSubDataPropertyOf(P, pe). If pe is equivalent to owl:bottomDataProperty then nothing will be
                returned.


   .. py:method:: super_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:

      Gets the stream of data properties that are the strict (potentially direct) super properties of the
      specified data property with respect to the imports closure of the root ontology.

      :param dp: The data property whose super properties are to be retrieved.
      :type dp: OWLDataProperty
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.


   .. py:method:: sub_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:

      Gets the stream of simplified object property expressions that are the strict (potentially direct)
      subproperties of the specified object property expression with respect to the imports closure of the root
      ontology.

      :param op: The object property expression whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails DirectSubObjectPropertyOf(P, pe).
                If direct is False, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails StrictSubObjectPropertyOf(P, pe).
                If pe is equivalent to owl:bottomObjectProperty then nothing will be returned.


   .. py:method:: super_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:

      Gets the stream of object properties that are the strict (potentially direct) super properties of the
      specified object property with respect to the imports closure of the root ontology.

      :param op: The object property expression whose super properties are to be
                 retrieved.
      :type op: OWLObjectPropertyExpression
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.


   .. py:method:: types(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClass]
      :abstractmethod:

      Gets the named classes which are (potentially direct) types of the specified named individual.

      :param ind: The individual whose types are to be retrieved.
      :param direct: Specifies if the direct types should be retrieved (True), or if all types should be retrieved
                     (False).

      :returns: If direct is True, each named class C where the set of reasoner axioms entails
                DirectClassAssertion(C, ind). If direct is False, each named class C where the set of reasoner axioms
                entails ClassAssertion(C, ind).


   .. py:method:: get_root_ontology() -> owlapy.owl_ontology.OWLOntology
      :abstractmethod:

      Gets the "root" ontology that is loaded into this reasoner. The reasoner takes into account the axioms in
      this ontology and its import's closure.


   .. py:method:: is_isolated()
      :abstractmethod:

      Return True if this reasoner is using an isolated ontology.


   .. py:method:: super_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:

      Gets the stream of named classes that are the strict (potentially direct) super classes of the specified
      class expression with respect to the imports closure of the root ontology.

      :param ce: The class expression whose strict (direct) super classes are to be retrieved.
      :param direct: Specifies if the direct super classes should be retrieved (True) or if the all super classes
                     (ancestors) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named super classes or also complex class expressions.

      :returns: If direct is True, each class C where the set of reasoner axioms entails DirectSubClassOf(ce, C).
                If direct is False, each class C where  set of reasoner axioms entails StrictSubClassOf(ce, C).
                If ce is equivalent to owl:Thing then nothing will be returned.



