owlapy.owl_reasoner
===================

.. py:module:: owlapy.owl_reasoner

.. autoapi-nested-parse::

   OWL Reasoner



Attributes
----------

.. autoapisummary::

   owlapy.owl_reasoner.logger


Classes
-------

.. autoapisummary::

   owlapy.owl_reasoner.OWLClassExpression
   owlapy.owl_reasoner.OWLObjectSomeValuesFrom
   owlapy.owl_reasoner.OWLObjectUnionOf
   owlapy.owl_reasoner.OWLObjectIntersectionOf
   owlapy.owl_reasoner.OWLObjectComplementOf
   owlapy.owl_reasoner.OWLObjectAllValuesFrom
   owlapy.owl_reasoner.OWLObjectOneOf
   owlapy.owl_reasoner.OWLObjectHasValue
   owlapy.owl_reasoner.OWLObjectMinCardinality
   owlapy.owl_reasoner.OWLObjectMaxCardinality
   owlapy.owl_reasoner.OWLObjectExactCardinality
   owlapy.owl_reasoner.OWLObjectCardinalityRestriction
   owlapy.owl_reasoner.OWLDataSomeValuesFrom
   owlapy.owl_reasoner.OWLDataOneOf
   owlapy.owl_reasoner.OWLDatatypeRestriction
   owlapy.owl_reasoner.OWLFacetRestriction
   owlapy.owl_reasoner.OWLDataHasValue
   owlapy.owl_reasoner.OWLDataAllValuesFrom
   owlapy.owl_reasoner.OWLClass
   owlapy.owl_reasoner.IRI
   owlapy.owl_reasoner.OWLAxiom
   owlapy.owl_reasoner.OWLSubClassOfAxiom
   owlapy.owl_reasoner.OWLDataRange
   owlapy.owl_reasoner.OWLDataComplementOf
   owlapy.owl_reasoner.OWLDataUnionOf
   owlapy.owl_reasoner.OWLDataIntersectionOf
   owlapy.owl_reasoner.OWLDatatype
   owlapy.owl_reasoner.OWLOntology
   owlapy.owl_reasoner.Ontology
   owlapy.owl_reasoner.ToOwlready2
   owlapy.owl_reasoner.OntologyManager
   owlapy.owl_reasoner.OWLObjectPropertyExpression
   owlapy.owl_reasoner.OWLDataProperty
   owlapy.owl_reasoner.OWLObjectProperty
   owlapy.owl_reasoner.OWLObjectInverseOf
   owlapy.owl_reasoner.OWLPropertyExpression
   owlapy.owl_reasoner.OWLDataPropertyExpression
   owlapy.owl_reasoner.OWLNamedIndividual
   owlapy.owl_reasoner.OWLLiteral
   owlapy.owl_reasoner.LRUCache
   owlapy.owl_reasoner.OWLReasoner
   owlapy.owl_reasoner.BaseReasoner
   owlapy.owl_reasoner.OWLReasonerEx
   owlapy.owl_reasoner.OntologyReasoner
   owlapy.owl_reasoner.FastInstanceCheckerReasoner
   owlapy.owl_reasoner.SyncReasoner


Module Contents
---------------

.. py:class:: OWLClassExpression

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLPropertyRange`


   OWL Class expressions represent sets of individuals by formally specifying conditions on the individuals' properties;
   individuals satisfying these conditions are said to be instances of the respective class expressions.
   In the structural specification of OWL 2, class expressions are represented by ClassExpression.
   (https://www.w3.org/TR/owl2-syntax/#Class_Expressions)


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_owl_thing() -> bool
      :abstractmethod:


      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl



   .. py:method:: is_owl_nothing() -> bool
      :abstractmethod:


      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.



   .. py:method:: get_object_complement_of() -> OWLObjectComplementOf
      :abstractmethod:


      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.



   .. py:method:: get_nnf() -> OWLClassExpression
      :abstractmethod:


      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: OWLObjectSomeValuesFrom(property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedObjectRestriction`


   An existential class expression ObjectSomeValuesFrom( OPE CE ) consists of an object property expression OPE and
   a class expression CE, and it contains all those individuals that are connected by OPE to an individual that is
   an instance of CE.


   .. py:attribute:: __slots__
      :value: ('_property', '_filler')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3005



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectUnionOf(operands: Iterable[owlapy.class_expression.class_expression.OWLClassExpression])

   Bases: :py:obj:`OWLNaryBooleanClassExpression`


   A union class expression ObjectUnionOf( CE1 ... CEn ) contains all individuals that are instances
   of at least one class expression CEi for 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Union_of_Class_Expressions)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3002



.. py:class:: OWLObjectIntersectionOf(operands: Iterable[owlapy.class_expression.class_expression.OWLClassExpression])

   Bases: :py:obj:`OWLNaryBooleanClassExpression`


   An intersection class expression ObjectIntersectionOf( CE1 ... CEn ) contains all individuals that are instances
   of all class expressions CEi for 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Intersection_of_Class_Expressions)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3001



.. py:class:: OWLObjectComplementOf(op: OWLClassExpression)

   Bases: :py:obj:`OWLBooleanClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`OWLClassExpression`\ ]


   Represents an ObjectComplementOf class expression in the OWL 2 Specification.


   .. py:attribute:: __slots__
      :value: '_operand'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3003



   .. py:method:: get_operand() -> OWLClassExpression

      :returns: The wrapped expression.



   .. py:method:: operands() -> Iterable[OWLClassExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectAllValuesFrom(property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedObjectRestriction`


   A universal class expression ObjectAllValuesFrom( OPE CE ) consists of an object property expression OPE and a
   class expression CE, and it contains all those individuals that are connected by OPE only to
   individuals that are instances of CE. (https://www.w3.org/TR/owl2-syntax/#Universal_Quantification)


   .. py:attribute:: __slots__
      :value: ('_property', '_filler')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3006



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectOneOf(values: Union[owlapy.owl_individual.OWLIndividual, Iterable[owlapy.owl_individual.OWLIndividual]])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLAnonymousClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ]


   An enumeration of individuals ObjectOneOf( a1 ... an ) contains exactly the individuals ai with 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Individuals)


   .. py:attribute:: __slots__
      :value: '_values'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3004



   .. py:method:: individuals() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the individuals that are in the oneOf. These individuals represent the exact instances (extension)
      of this class expression.

      :returns: The individuals that are the values of this {@code ObjectOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: as_object_union_of() -> owlapy.class_expression.class_expression.OWLClassExpression

      Simplifies this enumeration to a union of singleton nominals.

      :returns: This enumeration in a more standard DL form.
                simp({a}) = {a} simp({a0, ... , {an}) = unionOf({a0}, ... , {an})



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectHasValue(property: owlapy.owl_property.OWLObjectPropertyExpression, individual: owlapy.owl_individual.OWLIndividual)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ], :py:obj:`OWLObjectRestriction`


   A has-value class expression ObjectHasValue( OPE a ) consists of an object property expression OPE and an
   individual a, and it contains all those individuals that are connected by OPE to a. Each such class expression
   can be seen as a syntactic shortcut for the class expression ObjectSomeValuesFrom( OPE ObjectOneOf( a ) ).
   (https://www.w3.org/TR/owl2-syntax/#Individual_Value_Restriction)


   .. py:attribute:: __slots__
      :value: ('_property', '_v')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3007



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectMinCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   A minimum cardinality expression ObjectMinCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
   to at least n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Minimum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3008



.. py:class:: OWLObjectMaxCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   A maximum cardinality expression ObjectMaxCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
    to at most n different individuals that are instances of CE.
    (https://www.w3.org/TR/owl2-syntax/#Maximum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3010



.. py:class:: OWLObjectExactCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   An exact cardinality expression ObjectExactCardinality( n OPE CE ) consists of a nonnegative integer n, an object
    property expression OPE, and a class expression CE, and it contains all those individuals that are connected by
    to exactly n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Exact_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3009



   .. py:method:: as_intersection_of_min_max() -> owlapy.class_expression.nary_boolean_expression.OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R C) = >= 1 R C and <= 1 R C.



.. py:class:: OWLObjectCardinalityRestriction(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLCardinalityRestriction`\ [\ :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`\ ], :py:obj:`OWLQuantifiedObjectRestriction`


   Represents Object Property Cardinality Restrictions in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataSomeValuesFrom(property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedDataRestriction`


   An existential class expression DataSomeValuesFrom( DPE1 ... DPEn DR ) consists of n data property expressions
   DPEi, 1 ≤ i ≤ n, and a data range DR whose arity must be n. Such a class expression contains all those individuals
   that are connected by DPEi to literals lti, 1 ≤ i ≤ n, such that the tuple ( lt1 , ..., ltn ) is in DR. A class
   expression of the form DataSomeValuesFrom( DPE DR ) can be seen as a syntactic shortcut for the class expression
   DataMinCardinality( 1 DPE DR ).
   (https://www.w3.org/TR/owl2-syntax/#Existential_Quantification_2)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3012



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataOneOf(values: Union[owlapy.owl_literal.OWLLiteral, Iterable[owlapy.owl_literal.OWLLiteral]])

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLDataRange`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ]


   An enumeration of literals DataOneOf( lt1 ... ltn ) contains exactly the explicitly specified literals lti with
   1 ≤ i ≤ n. The resulting data range has arity one. (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Literals)


   .. py:attribute:: type_index
      :type:  Final
      :value: 4003



   .. py:method:: values() -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the values that are in the oneOf.

      :returns: The values of this {@code DataOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDatatypeRestriction(type_: owlapy.owl_datatype.OWLDatatype, facet_restrictions: Union[OWLFacetRestriction, Iterable[OWLFacetRestriction]])

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLDataRange`


   A datatype restriction DatatypeRestriction( DT F1 lt1 ... Fn ltn ) consists of a unary datatype DT and n pairs
   ( Fi , lti ). The resulting data range is unary and is obtained by restricting the value space of DT according to
   the semantics of all ( Fi , vi ) (multiple pairs are interpreted conjunctively), where vi are the data values of
   the literals lti.
   (https://www.w3.org/TR/owl2-syntax/#Datatype_Restrictions)


   .. py:attribute:: __slots__
      :value: ('_type', '_facet_restrictions')



   .. py:attribute:: type_index
      :type:  Final
      :value: 4006



   .. py:method:: get_datatype() -> owlapy.owl_datatype.OWLDatatype


   .. py:method:: get_facet_restrictions() -> Sequence[OWLFacetRestriction]


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLFacetRestriction(facet: owlapy.vocab.OWLFacet, literal: Literals)

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   A facet restriction is used to restrict a particular datatype.


   .. py:attribute:: __slots__
      :value: ('_facet', '_literal')



   .. py:attribute:: type_index
      :type:  Final
      :value: 4007



   .. py:method:: get_facet() -> owlapy.vocab.OWLFacet


   .. py:method:: get_facet_value() -> owlapy.owl_literal.OWLLiteral


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDataHasValue(property: owlapy.owl_property.OWLDataPropertyExpression, value: owlapy.owl_literal.OWLLiteral)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ], :py:obj:`OWLDataRestriction`


   A has-value class expression DataHasValue( DPE lt ) consists of a data property expression DPE and a literal lt,
   and it contains all those individuals that are connected by DPE to lt. Each such class expression can be seen as a
   syntactic shortcut for the class expression DataSomeValuesFrom( DPE DataOneOf( lt ) ).
   (https://www.w3.org/TR/owl2-syntax/#Literal_Value_Restriction)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3014



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataAllValuesFrom(property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedDataRestriction`


   A universal class expression DataAllValuesFrom( DPE1 ... DPEn DR ) consists of n data property expressions DPEi,
   1 ≤ i ≤ n, and a data range DR whose arity must be n. Such a class expression contains all those individuals that
    are connected by DPEi only to literals lti, 1 ≤ i ≤ n, such that each tuple ( lt1 , ..., ltn ) is in DR. A class
     expression of the form DataAllValuesFrom( DPE DR ) can be seen as a syntactic shortcut for the class expression
     DataMaxCardinality( 0 DPE DataComplementOf( DR ) ).
     (https://www.w3.org/TR/owl2-syntax/#Universal_Quantification_2)



   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3013



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLClass(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`, :py:obj:`owlapy.owl_object.OWLEntity`


   An OWL 2 named Class. Classes can be understood as sets of individuals.
   (https://www.w3.org/TR/owl2-syntax/#Classes)


   .. py:attribute:: __slots__
      :value: ('_iri', '_is_nothing', '_is_thing')



   .. py:attribute:: type_index
      :type:  Final
      :value: 1001



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      Gets the string representation of this object

      :returns: The IRI as string


   .. py:property:: reminder
      :type: str

      The reminder of the IRI


   .. py:method:: is_owl_thing() -> bool

      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl



   .. py:method:: is_owl_nothing() -> bool

      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.



   .. py:method:: get_object_complement_of() -> owlapy.class_expression.class_expression.OWLObjectComplementOf

      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.



   .. py:method:: get_nnf() -> OWLClass

      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: IRI(namespace: Union[str, owlapy.namespaces.Namespaces], remainder: str)

   Bases: :py:obj:`owlapy.owl_annotation.OWLAnnotationSubject`, :py:obj:`owlapy.owl_annotation.OWLAnnotationValue`


   An IRI, consisting of a namespace and a remainder.


   .. py:attribute:: __slots__
      :value: ('_namespace', '_remainder', '__weakref__')



   .. py:attribute:: type_index
      :type:  Final
      :value: 0



   .. py:method:: create(namespace: owlapy.namespaces.Namespaces, remainder: str) -> IRI
                  create(namespace: str, remainder: str) -> IRI
                  create(string: str) -> IRI
      :staticmethod:



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: is_nothing()

      Determines if this IRI is equal to the IRI that owl:Nothing is named with.

      :returns: True if this IRI is equal to <http://www.w3.org/2002/07/owl#Nothing> and otherwise False.



   .. py:method:: is_thing()

      Determines if this IRI is equal to the IRI that owl:Thing is named with.

      :returns: True if this IRI is equal to <http://www.w3.org/2002/07/owl#Thing> and otherwise False.



   .. py:method:: is_reserved_vocabulary() -> bool

      Determines if this IRI is in the reserved vocabulary. An IRI is in the reserved vocabulary if it starts with
      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> or <http://www.w3.org/2000/01/rdf-schema#> or
      <http://www.w3.org/2001/XMLSchema#> or <http://www.w3.org/2002/07/owl#>.

      :returns: True if the IRI is in the reserved vocabulary, otherwise False.



   .. py:method:: as_iri() -> IRI

      :returns: if the value is an IRI, return it. Return Mone otherwise.



   .. py:method:: as_str() -> str

      CD: Should be deprecated.
      :returns: The string that specifies the IRI.



   .. py:property:: str
      :type: str

      Returns:
      The string that specifies the IRI.


   .. py:property:: reminder
      :type: str

      Returns:
      The string corresponding to the reminder of the IRI.


   .. py:method:: get_short_form() -> str

      Gets the short form.

      :returns: A string that represents the short form.



   .. py:method:: get_namespace() -> str

      :returns: The namespace as string.



   .. py:method:: get_remainder() -> str

      :returns: The remainder (coincident with NCName usually) for this IRI.



.. py:class:: OWLAxiom(annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents Axioms in the OWL 2 Specification.

   An OWL ontology contains a set of axioms. These axioms can be annotation axioms, declaration axioms, imports axioms
   or logical axioms.


   .. py:attribute:: __slots__
      :value: '_annotations'



   .. py:method:: annotations() -> Optional[List[OWLAnnotation]]


   .. py:method:: is_annotated() -> bool


   .. py:method:: is_logical_axiom() -> bool


   .. py:method:: is_annotation_axiom() -> bool


.. py:class:: OWLSubClassOfAxiom(sub_class: owlapy.class_expression.OWLClassExpression, super_class: owlapy.class_expression.OWLClassExpression, annotations: Optional[Iterable[OWLAnnotation]] = None)

   Bases: :py:obj:`OWLClassAxiom`


   A subclass axiom SubClassOf( CE1 CE2 ) states that the class expression CE1 is a subclass of the class
   expression CE2. Roughly speaking, this states that CE1 is more specific than CE2. Subclass axioms are a
   fundamental type of axioms in OWL 2 and can be used to construct a class hierarchy. Other kinds of class
   expression axiom can be seen as syntactic shortcuts for one or more subclass axioms.

    (https://www.w3.org/TR/owl2-syntax/#Subclass_Axioms)



   .. py:attribute:: __slots__
      :value: ('_sub_class', '_super_class')



   .. py:method:: get_sub_class() -> owlapy.class_expression.OWLClassExpression


   .. py:method:: get_super_class() -> owlapy.class_expression.OWLClassExpression


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDataRange

   Bases: :py:obj:`OWLPropertyRange`


   Represents a DataRange in the OWL 2 Specification.


.. py:class:: OWLDataComplementOf(data_range: OWLDataRange)

   Bases: :py:obj:`OWLDataRange`


   A complement data range DataComplementOf( DR ) contains all tuples of literals that are not contained in the
   data range DR. The resulting data range has the arity equal to the arity of DR.

   (https://www.w3.org/TR/owl2-syntax/#Complement_of_Data_Ranges)


   .. py:attribute:: type_index
      :type:  Final
      :value: 4002



   .. py:method:: get_data_range() -> OWLDataRange

      :returns: The wrapped data range.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataUnionOf(operands: Iterable[OWLDataRange])

   Bases: :py:obj:`OWLNaryDataRange`


   A union data range DataUnionOf( DR1 ... DRn ) contains all tuples of literals that are contained in the at least
   one data range DRi for 1 ≤ i ≤ n. All data ranges DRi must be of the same arity, and the resulting data range is of
   that arity as well.

   (https://www.w3.org/TR/owl2-syntax/#Union_of_Data_Ranges)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4005



.. py:class:: OWLDataIntersectionOf(operands: Iterable[OWLDataRange])

   Bases: :py:obj:`OWLNaryDataRange`


   An intersection data range DataIntersectionOf( DR1 ... DRn ) contains all tuples of literals that are contained
   in each data range DRi for 1 ≤ i ≤ n. All data ranges DRi must be of the same arity, and the resulting data range
   is of that arity as well.

   (https://www.w3.org/TR/owl2-syntax/#Intersection_of_Data_Ranges)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4004



.. py:class:: OWLDatatype(iri: Union[owlapy.iri.IRI, owlapy.meta_classes.HasIRI])

   Bases: :py:obj:`owlapy.owl_object.OWLEntity`, :py:obj:`owlapy.owl_data_ranges.OWLDataRange`


   Datatypes are entities that refer to sets of data values. Thus, datatypes are analogous to classes,
   the main difference being that the former contain data values such as strings and numbers, rather than individuals.
   Datatypes are a kind of data range, which allows them to be used in restrictions. Each data range is associated
   with an arity; for datatypes, the arity is always one. The built-in datatype rdfs:Literal denotes any set of data
   values that contains the union of the value spaces of all datatypes.

   (https://www.w3.org/TR/owl2-syntax/#Datatypes)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4001



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLOntology

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: __slots__
      :value: ()



   .. py:attribute:: type_index
      :type:  Final
      :value: 1



   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]
      :abstractmethod:


      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]
      :abstractmethod:


      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]
      :abstractmethod:


      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]
      :abstractmethod:


      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: data_property_domain_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]
      :abstractmethod:


      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]
      :abstractmethod:


      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]
      :abstractmethod:


      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]
      :abstractmethod:


      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: get_owl_ontology_manager() -> _M
      :abstractmethod:


      Gets the manager that manages this ontology.



   .. py:method:: get_ontology_id() -> OWLOntologyID
      :abstractmethod:


      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: is_anonymous() -> bool

      Check whether this ontology does contain an IRI or not.



.. py:class:: Ontology(manager: OntologyManager, ontology_iri: owlapy.iri.IRI, load: bool)

   Bases: :py:obj:`OWLOntology`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: __slots__
      :value: ('_manager', '_iri', '_world', '_onto')



   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]

      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]

      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]

      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]

      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]

      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: get_owl_ontology_manager() -> OntologyManager

      Gets the manager that manages this ontology.



   .. py:method:: get_ontology_id() -> OWLOntologyID

      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: data_property_domain_axioms(pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]

      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]

      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(pe: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]

      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(pe: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]

      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: get_original_iri()

      Get the IRI argument that was used to create this ontology.



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: ToOwlready2(world: owlready2.World)

   .. py:attribute:: __slots__
      :value: '_world'



   .. py:method:: map_object(o: owlapy.owl_object.OWLObject)
      :abstractmethod:


      Map owlapy object classes.



   .. py:method:: map_concept(o: owlapy.class_expression.OWLClassExpression) -> Union[owlready2.ClassConstruct, owlready2.ThingClass]
      :abstractmethod:


      Map owlapy concept classes.



   .. py:method:: map_datarange(p: owlapy.owl_data_ranges.OWLDataRange) -> Union[owlready2.ClassConstruct, type]
      :abstractmethod:


      Map owlapy data range classes.



.. py:class:: OntologyManager(world_store=None)

   Bases: :py:obj:`OWLOntologyManager`


   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.


   .. py:attribute:: __slots__
      :value: '_world'



   .. py:method:: create_ontology(iri: owlapy.iri.IRI) -> owlapy.owl_ontology.Ontology

      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created.

      :returns: The newly created ontology, or if an ontology with the specified IRI already exists then this existing
                ontology will be returned.



   .. py:method:: load_ontology(iri: owlapy.iri.IRI) -> owlapy.owl_ontology.Ontology

      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri: The IRI that identifies the ontology. It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.



   .. py:method:: apply_change(change: OWLOntologyChange)

      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.



   .. py:method:: add_axiom(ontology: owlapy.owl_ontology.OWLOntology, axiom: owlapy.owl_axiom.OWLAxiom)

      A convenience method that adds a single axiom to an ontology.

      :param ontology: The ontology to add the axiom to.
      :param axiom: The axiom to be added.



   .. py:method:: remove_axiom(ontology: owlapy.owl_ontology.OWLOntology, axiom: owlapy.owl_axiom.OWLAxiom)

      A convenience method that removes a single axiom from an ontology.

      :param ontology: The ontology to remove the axiom from.
      :param axiom: The axiom to be removed.



   .. py:method:: save_ontology(ontology: owlapy.owl_ontology.OWLOntology, document_iri: owlapy.iri.IRI)

      Saves the specified ontology, using the specified document IRI to determine where/how the ontology should be
      saved.

      :param ontology: The ontology to be saved.
      :param document_iri: The document IRI where the ontology should be saved to.



   .. py:method:: save_world()

      Saves the actual state of the quadstore in the SQLite3 file.




.. py:class:: OWLObjectPropertyExpression

   Bases: :py:obj:`OWLPropertyExpression`


   A high level interface to describe different types of object properties.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_inverse_property() -> OWLObjectPropertyExpression
      :abstractmethod:


      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: get_named_property() -> OWLObjectProperty
      :abstractmethod:


      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: is_object_property_expression() -> bool

      :returns: True if this is an object property.



.. py:class:: OWLDataProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLDataPropertyExpression`, :py:obj:`OWLProperty`


   Represents a Data Property in the OWL 2 Specification. Data properties connect individuals with literals.
   In some knowledge representation systems, functional data properties are called attributes.

   (https://www.w3.org/TR/owl2-syntax/#Data_Properties)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1004



   .. py:method:: is_owl_top_data_property() -> bool

      Determines if this is the owl:topDataProperty.

      :returns: topDataProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLObjectProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLObjectPropertyExpression`, :py:obj:`OWLProperty`


   Represents an Object Property in the OWL 2 Specification. Object properties connect pairs of individuals.

   (https://www.w3.org/TR/owl2-syntax/#Object_Properties)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1002



   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: get_inverse_property() -> OWLObjectInverseOf

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: is_owl_top_object_property() -> bool

      Determines if this is the owl:topObjectProperty.

      :returns: topObjectProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLObjectInverseOf(property: OWLObjectProperty)

   Bases: :py:obj:`OWLObjectPropertyExpression`


   Represents the inverse of a property expression (ObjectInverseOf). An inverse object property expression
   ObjectInverseOf( P ) connects an individual I1 with I2 if and only if the object property P connects I2 with I1.
   This can be used to refer to the inverse of a property, without actually naming the property.
   For example, consider the property hasPart, the inverse
   property of hasPart (isPartOf) can be referred to using this interface inverseOf(hasPart), which can be used in
   restrictions e.g. inverseOf(hasPart) some Car refers to the set of things that are part of at least one car.

   (https://www.w3.org/TR/owl2-syntax/#Inverse_Object_Properties)


   .. py:attribute:: __slots__
      :value: '_inverse_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1003



   .. py:method:: get_inverse() -> OWLObjectProperty

      Gets the property expression that this is the inverse of.

      :returns: The object property expression such that this object property expression is an inverse of it.



   .. py:method:: get_inverse_property() -> OWLObjectProperty

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLPropertyExpression

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents a property or possibly the inverse of a property.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_data_property_expression() -> bool

      :returns: True if this is a data property.



   .. py:method:: is_object_property_expression() -> bool

      :returns: True if this is an object property.



   .. py:method:: is_owl_top_object_property() -> bool

      Determines if this is the owl:topObjectProperty.

      :returns: topObjectProperty.
      :rtype: True if this property is the owl



   .. py:method:: is_owl_top_data_property() -> bool

      Determines if this is the owl:topDataProperty.

      :returns: topDataProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLDataPropertyExpression

   Bases: :py:obj:`OWLPropertyExpression`


   A high level interface to describe different types of data properties.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_data_property_expression()

      :returns: True if this is a data property.



.. py:class:: OWLNamedIndividual(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLIndividual`, :py:obj:`owlapy.owl_object.OWLEntity`


   Named individuals are identified using an IRI. Since they are given an IRI, named individuals are entities.
   IRIs from the reserved vocabulary must not be used to identify named individuals in an OWL 2 DL ontology.

   (https://www.w3.org/TR/owl2-syntax/#Named_Individuals)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1005



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLLiteral

   Bases: :py:obj:`owlapy.owl_annotation.OWLAnnotationValue`


   Literals represent data values such as particular strings or integers. They are analogous to typed RDF
   literals and can also be understood as individuals denoting
   data values. Each literal consists of a lexical form, which is a string, and a datatype.

    (https://www.w3.org/TR/owl2-syntax/#Literals)



   .. py:attribute:: __slots__
      :value: ()



   .. py:attribute:: type_index
      :type:  Final
      :value: 4008



   .. py:method:: get_literal() -> str

      Gets the lexical value of this literal. Note that the language tag is not included.

      :returns: The lexical value of this literal.



   .. py:method:: is_boolean() -> bool

      Whether this literal is typed as boolean.



   .. py:method:: parse_boolean() -> bool

      Parses the lexical value of this literal into a bool. The lexical value of this literal should be in the
      lexical space of the boolean datatype ("http://www.w3.org/2001/XMLSchema#boolean").

      :returns: A bool value that is represented by this literal.



   .. py:method:: is_double() -> bool

      Whether this literal is typed as double.



   .. py:method:: parse_double() -> float

      Parses the lexical value of this literal into a double. The lexical value of this literal should be in the
      lexical space of the double datatype ("http://www.w3.org/2001/XMLSchema#double").

      :returns: A double value that is represented by this literal.



   .. py:method:: is_integer() -> bool

      Whether this literal is typed as integer.



   .. py:method:: parse_integer() -> int

      Parses the lexical value of this literal into an integer. The lexical value of this literal should be in the
      lexical space of the integer datatype ("http://www.w3.org/2001/XMLSchema#integer").

      :returns: An integer value that is represented by this literal.



   .. py:method:: is_string() -> bool

      Whether this literal is typed as string.



   .. py:method:: parse_string() -> str

      Parses the lexical value of this literal into a string. The lexical value of this literal should be in the
      lexical space of the string datatype ("http://www.w3.org/2001/XMLSchema#string").

      :returns: A string value that is represented by this literal.



   .. py:method:: is_date() -> bool

      Whether this literal is typed as date.



   .. py:method:: parse_date() -> datetime.date

      Parses the lexical value of this literal into a date. The lexical value of this literal should be in the
      lexical space of the date datatype ("http://www.w3.org/2001/XMLSchema#date").

      :returns: A date value that is represented by this literal.



   .. py:method:: is_datetime() -> bool

      Whether this literal is typed as dateTime.



   .. py:method:: parse_datetime() -> datetime.datetime

      Parses the lexical value of this literal into a datetime. The lexical value of this literal should be in the
      lexical space of the dateTime datatype ("http://www.w3.org/2001/XMLSchema#dateTime").

      :returns: A datetime value that is represented by this literal.



   .. py:method:: is_duration() -> bool

      Whether this literal is typed as duration.



   .. py:method:: parse_duration() -> pandas.Timedelta

      Parses the lexical value of this literal into a Timedelta. The lexical value of this literal should be in the
      lexical space of the duration datatype ("http://www.w3.org/2001/XMLSchema#duration").

      :returns: A Timedelta value that is represented by this literal.



   .. py:method:: is_literal() -> bool

      :returns: true if the annotation value is a literal



   .. py:method:: as_literal() -> OWLLiteral

      :returns: if the value is a literal, returns it. Return None otherwise



   .. py:method:: to_python() -> Literals


   .. py:method:: get_datatype() -> owlapy.owl_datatype.OWLDatatype
      :abstractmethod:


      Gets the OWLDatatype which types this literal.

      :returns: The OWLDatatype that types this literal.



.. py:class:: LRUCache(maxsize: Optional[int] = None)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_K`\ , :py:obj:`_V`\ ]


   Constants shares by all lru cache instances.

   Adapted from functools.lru_cache.

   .. attribute:: sentinel

      Unique object used to signal cache misses.

   .. attribute:: PREV

      Name for the link field 0.

   .. attribute:: NEXT

      Name for the link field 1.

   .. attribute:: KEY

      Name for the link field 2.

   .. attribute:: RESULT

      Name for the link field 3.


   .. py:attribute:: sentinel


   .. py:method:: __contains__(item: _K) -> bool


   .. py:method:: __getitem__(item: _K) -> _V


   .. py:method:: __setitem__(key: _K, value: _V)


   .. py:method:: cache_info()

      Report cache statistics.



   .. py:method:: cache_clear()

      Clear the cache and cache statistics.



.. py:data:: logger

.. py:class:: OWLReasoner(ontology: owlapy.owl_ontology.OWLOntology)

   An OWLReasoner reasons over a set of axioms (the set of reasoner axioms) that is based on the imports closure of
   a particular ontology - the "root" ontology.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: data_property_domains(pe: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(DataSomeValuesFrom(pe rdfs:Literal)). If direct is True: then if N is not
                empty then the return value is N, else the return value is the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), true). If direct is False: then the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), false) together with N if N is non-empty.
                (Note, rdfs:Literal is the top datatype).



   .. py:method:: object_property_domains(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(pe owl:Thing)). If direct is True: then if N is not empty
                then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), true). If direct is False: then the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), false) together with N if N is non-empty.



   .. py:method:: object_property_ranges(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are the direct or indirect ranges of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing)). If direct is True: then
                if N is not empty then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), true). If direct is False: then
                the result of super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), false) together with N
                if N is non-empty.



   .. py:method:: equivalent_classes(ce: owlapy.class_expression.OWLClassExpression, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are equivalent to the specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose equivalent classes are to be retrieved.
      :param only_named: Whether to only retrieve named equivalent classes or also complex class expressions.

      :returns: All class expressions C where the root ontology imports closure entails EquivalentClasses(ce C). If ce is
                not a class name (i.e. it is an anonymous class expression) and there are no such classes C then there will
                be no result. If ce is unsatisfiable with respect to the set of reasoner axioms then  owl:Nothing, i.e. the
                bottom node, will be returned.



   .. py:method:: disjoint_classes(ce: owlapy.class_expression.OWLClassExpression, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are disjoint with specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose disjoint classes are to be retrieved.
      :param only_named: Whether to only retrieve named disjoint classes or also complex class expressions.

      :returns: All class expressions D where the set of reasoner axioms entails EquivalentClasses(D ObjectComplementOf(ce))
                or StrictSubClassOf(D ObjectComplementOf(ce)).



   .. py:method:: different_individuals(ind: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      Gets the individuals that are different from the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose different individuals are to be retrieved.

      :returns: All individuals x where the set of reasoner axioms entails DifferentIndividuals(ind x).



   .. py:method:: same_individuals(ind: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      Gets the individuals that are the same as the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose same individuals are to be retrieved.

      :returns: All individuals x where the root ontology imports closure entails SameIndividual(ind x).



   .. py:method:: equivalent_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:


      Gets the simplified object properties that are equivalent to the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose equivalent object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(op e). If op is unsatisfiable with respect to the set of reasoner axioms
                then owl:bottomDataProperty will be returned.



   .. py:method:: equivalent_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Gets the data properties that are equivalent to the specified data property with respect to the set of
      reasoner axioms.

      :param dp: The data property whose equivalent data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails EquivalentDataProperties(dp e).
                If dp is unsatisfiable with respect to the set of reasoner axioms then owl:bottomDataProperty will
                be returned.



   .. py:method:: data_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLDataProperty, direct: bool = True) -> Iterable[owlapy.owl_literal.OWLLiteral]
      :abstractmethod:


      Gets the data property values for the specified individual and data property expression.

      :param ind: The individual that is the subject of the data property values.
      :param pe: The data property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l).



   .. py:method:: object_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = True) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      Gets the object property values for the specified individual and object property expression.

      :param ind: The individual that is the subject of the object property values.
      :param pe: The object property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: The named individuals such that for each individual j, the set of reasoner axioms entails
                ObjectPropertyAssertion(pe ind j).



   .. py:method:: flush() -> None
      :abstractmethod:


      Flushes any changes stored in the buffer, which causes the reasoner to take into consideration the changes
      the current root ontology specified by the changes.



   .. py:method:: instances(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      Gets the individuals which are instances of the specified class expression.

      :param ce: The class expression whose instances are to be retrieved.
      :param direct: Specifies if the direct instances should be retrieved (True), or if all instances should be
                     retrieved (False).

      :returns: If direct is True, each named individual j where the set of reasoner axioms entails
                DirectClassAssertion(ce, j). If direct is False, each named individual j where the set of reasoner axioms
                entails ClassAssertion(ce, j). If ce is unsatisfiable with respect to the set of reasoner axioms then
                nothing returned.



   .. py:method:: sub_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the set of named classes that are the strict (potentially direct) subclasses of the specified class
      expression with respect to the reasoner axioms.

      :param ce: The class expression whose strict (direct) subclasses are to be retrieved.
      :param direct: Specifies if the direct subclasses should be retrieved (True) or if the all subclasses
                     (descendant) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named sub-classes or also complex class expressions.

      :returns: If direct is True, each class C where reasoner axioms entails DirectSubClassOf(C, ce). If direct is False,
                each class C where reasoner axioms entails StrictSubClassOf(C, ce). If ce is equivalent to owl:Nothing then
                nothing will be returned.



   .. py:method:: disjoint_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:


      Gets the simplified object properties that are disjoint with the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose disjoint object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(e ObjectPropertyComplementOf(op)) or
                StrictSubObjectPropertyOf(e ObjectPropertyComplementOf(op)).



   .. py:method:: disjoint_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Gets the data properties that are disjoint with the specified data property with respect
      to the set of reasoner axioms.

      :param dp: The data property whose disjoint data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails
                EquivalentDataProperties(e DataPropertyComplementOf(dp)) or
                StrictSubDataPropertyOf(e DataPropertyComplementOf(dp)).



   .. py:method:: sub_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Gets the set of named data properties that are the strict (potentially direct) subproperties of the
      specified data property expression with respect to the imports closure of the root ontology.

      :param dp: The data property whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, each property P where the set of reasoner axioms entails DirectSubDataPropertyOf(P, pe).
                If direct is False, each property P where the set of reasoner axioms entails
                StrictSubDataPropertyOf(P, pe). If pe is equivalent to owl:bottomDataProperty then nothing will be
                returned.



   .. py:method:: super_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Gets the stream of data properties that are the strict (potentially direct) super properties of the
      specified data property with respect to the imports closure of the root ontology.

      :param dp: The data property whose super properties are to be retrieved.
      :type dp: OWLDataProperty
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.



   .. py:method:: sub_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:


      Gets the stream of simplified object property expressions that are the strict (potentially direct)
      subproperties of the specified object property expression with respect to the imports closure of the root
      ontology.

      :param op: The object property expression whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails DirectSubObjectPropertyOf(P, pe).
                If direct is False, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails StrictSubObjectPropertyOf(P, pe).
                If pe is equivalent to owl:bottomObjectProperty then nothing will be returned.



   .. py:method:: super_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:


      Gets the stream of object properties that are the strict (potentially direct) super properties of the
      specified object property with respect to the imports closure of the root ontology.

      :param op: The object property expression whose super properties are to be
                 retrieved.
      :type op: OWLObjectPropertyExpression
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.



   .. py:method:: types(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClass]
      :abstractmethod:


      Gets the named classes which are (potentially direct) types of the specified named individual.

      :param ind: The individual whose types are to be retrieved.
      :param direct: Specifies if the direct types should be retrieved (True), or if all types should be retrieved
                     (False).

      :returns: If direct is True, each named class C where the set of reasoner axioms entails
                DirectClassAssertion(C, ind). If direct is False, each named class C where the set of reasoner axioms
                entails ClassAssertion(C, ind).



   .. py:method:: get_root_ontology() -> owlapy.owl_ontology.OWLOntology
      :abstractmethod:


      Gets the "root" ontology that is loaded into this reasoner. The reasoner takes into account the axioms in
      this ontology and its import's closure.



   .. py:method:: is_isolated()
      :abstractmethod:


      Return True if this reasoner is using an isolated ontology.



   .. py:method:: super_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the stream of named classes that are the strict (potentially direct) super classes of the specified
      class expression with respect to the imports closure of the root ontology.

      :param ce: The class expression whose strict (direct) super classes are to be retrieved.
      :param direct: Specifies if the direct super classes should be retrieved (True) or if the all super classes
                     (ancestors) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named super classes or also complex class expressions.

      :returns: If direct is True, each class C where the set of reasoner axioms entails DirectSubClassOf(ce, C).
                If direct is False, each class C where  set of reasoner axioms entails StrictSubClassOf(ce, C).
                If ce is equivalent to owl:Thing then nothing will be returned.



.. py:class:: BaseReasoner

   Bases: :py:obj:`enum.Enum`


   Enumeration class for base reasoner when calling sync_reasoner.

   .. attribute:: PELLET

      Pellet base reasoner.

   .. attribute:: HERMIT

      HermiT base reasoner.


   .. py:attribute:: PELLET


   .. py:attribute:: HERMIT


.. py:class:: OWLReasonerEx(ontology: owlapy.owl_ontology.OWLOntology)

   Bases: :py:obj:`OWLReasoner`


   Extra convenience methods for OWL Reasoners


   .. py:method:: data_property_ranges(pe: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_data_ranges.OWLDataRange]

      Gets the data ranges that are the direct or indirect ranges of this property with respect to the imports
      closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      Returns:



   .. py:method:: all_data_property_values(pe: owlapy.owl_property.OWLDataProperty, direct: bool = True) -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets all values for the given data property expression that appear in the knowledge base.

      :param pe: The data property expression whose values are to be retrieved
      :param direct: Specifies if only the direct values of the data property pe should be retrieved (True), or if
                     the values of sub properties of pe should be taken into account (False).

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l) for any ind.



   .. py:method:: ind_data_properties(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = True) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets all data properties for the given individual that appear in the knowledge base.

      :param ind: The named individual whose data properties are to be retrieved
      :param direct: Specifies if the direct data properties should be retrieved (True), or if all
                     data properties should be retrieved (False), so that sub properties are taken into account.

      :returns: All data properties pe where the set of reasoner axioms entails DataPropertyAssertion(pe ind l)
                for atleast one l.



   .. py:method:: ind_object_properties(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = True) -> Iterable[owlapy.owl_property.OWLObjectProperty]

      Gets all object properties for the given individual that appear in the knowledge base.

      :param ind: The named individual whose object properties are to be retrieved
      :param direct: Specifies if the direct object properties should be retrieved (True), or if all
                     object properties should be retrieved (False), so that sub properties are taken into account.

      :returns: All data properties pe where the set of reasoner axioms entails ObjectPropertyAssertion(pe ind ind2)
                for atleast one ind2.



.. py:class:: OntologyReasoner(ontology: owlapy.owl_ontology.Ontology, isolate: bool = False)

   Bases: :py:obj:`OWLReasonerEx`


   Extra convenience methods for OWL Reasoners


   .. py:attribute:: __slots__
      :value: ('_ontology', '_world')



   .. py:method:: update_isolated_ontology(axioms_to_add: List[owlapy.owl_axiom.OWLAxiom] = None, axioms_to_remove: List[owlapy.owl_axiom.OWLAxiom] = None)

      Add or remove axioms to the isolated ontology that the reasoner is using.

      :param axioms_to_add: Axioms to add to the isolated ontology.
      :type axioms_to_add: List[OWLAxiom]
      :param axioms_to_remove: Axioms to remove from the isolated ontology.
      :type axioms_to_remove: List[OWLAxiom]



   .. py:method:: data_property_domains(pe: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(DataSomeValuesFrom(pe rdfs:Literal)). If direct is True: then if N is not
                empty then the return value is N, else the return value is the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), true). If direct is False: then the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), false) together with N if N is non-empty.
                (Note, rdfs:Literal is the top datatype).



   .. py:method:: object_property_domains(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(pe owl:Thing)). If direct is True: then if N is not empty
                then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), true). If direct is False: then the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), false) together with N if N is non-empty.



   .. py:method:: object_property_ranges(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are the direct or indirect ranges of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing)). If direct is True: then
                if N is not empty then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), true). If direct is False: then
                the result of super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), false) together with N
                if N is non-empty.



   .. py:method:: equivalent_classes(ce: owlapy.class_expression.OWLClassExpression, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are equivalent to the specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose equivalent classes are to be retrieved.
      :param only_named: Whether to only retrieve named equivalent classes or also complex class expressions.

      :returns: All class expressions C where the root ontology imports closure entails EquivalentClasses(ce C). If ce is
                not a class name (i.e. it is an anonymous class expression) and there are no such classes C then there will
                be no result. If ce is unsatisfiable with respect to the set of reasoner axioms then  owl:Nothing, i.e. the
                bottom node, will be returned.



   .. py:method:: disjoint_classes(ce: owlapy.class_expression.OWLClassExpression, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are disjoint with specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose disjoint classes are to be retrieved.
      :param only_named: Whether to only retrieve named disjoint classes or also complex class expressions.

      :returns: All class expressions D where the set of reasoner axioms entails EquivalentClasses(D ObjectComplementOf(ce))
                or StrictSubClassOf(D ObjectComplementOf(ce)).



   .. py:method:: different_individuals(ind: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the individuals that are different from the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose different individuals are to be retrieved.

      :returns: All individuals x where the set of reasoner axioms entails DifferentIndividuals(ind x).



   .. py:method:: same_individuals(ind: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the individuals that are the same as the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose same individuals are to be retrieved.

      :returns: All individuals x where the root ontology imports closure entails SameIndividual(ind x).



   .. py:method:: data_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLDataProperty, direct: bool = True) -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the data property values for the specified individual and data property expression.

      :param ind: The individual that is the subject of the data property values.
      :param pe: The data property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l).



   .. py:method:: all_data_property_values(pe: owlapy.owl_property.OWLDataProperty, direct: bool = True) -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets all values for the given data property expression that appear in the knowledge base.

      :param pe: The data property expression whose values are to be retrieved
      :param direct: Specifies if only the direct values of the data property pe should be retrieved (True), or if
                     the values of sub properties of pe should be taken into account (False).

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l) for any ind.



   .. py:method:: object_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the object property values for the specified individual and object property expression.

      :param ind: The individual that is the subject of the object property values.
      :param pe: The object property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: The named individuals such that for each individual j, the set of reasoner axioms entails
                ObjectPropertyAssertion(pe ind j).



   .. py:method:: flush() -> None

      Flushes any changes stored in the buffer, which causes the reasoner to take into consideration the changes
      the current root ontology specified by the changes.



   .. py:method:: instances(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the individuals which are instances of the specified class expression.

      :param ce: The class expression whose instances are to be retrieved.
      :param direct: Specifies if the direct instances should be retrieved (True), or if all instances should be
                     retrieved (False).

      :returns: If direct is True, each named individual j where the set of reasoner axioms entails
                DirectClassAssertion(ce, j). If direct is False, each named individual j where the set of reasoner axioms
                entails ClassAssertion(ce, j). If ce is unsatisfiable with respect to the set of reasoner axioms then
                nothing returned.



   .. py:method:: sub_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the set of named classes that are the strict (potentially direct) subclasses of the specified class
      expression with respect to the reasoner axioms.

      :param ce: The class expression whose strict (direct) subclasses are to be retrieved.
      :param direct: Specifies if the direct subclasses should be retrieved (True) or if the all subclasses
                     (descendant) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named sub-classes or also complex class expressions.

      :returns: If direct is True, each class C where reasoner axioms entails DirectSubClassOf(C, ce). If direct is False,
                each class C where reasoner axioms entails StrictSubClassOf(C, ce). If ce is equivalent to owl:Nothing then
                nothing will be returned.



   .. py:method:: super_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the stream of named classes that are the strict (potentially direct) super classes of the specified
      class expression with respect to the imports closure of the root ontology.

      :param ce: The class expression whose strict (direct) super classes are to be retrieved.
      :param direct: Specifies if the direct super classes should be retrieved (True) or if the all super classes
                     (ancestors) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named super classes or also complex class expressions.

      :returns: If direct is True, each class C where the set of reasoner axioms entails DirectSubClassOf(ce, C).
                If direct is False, each class C where  set of reasoner axioms entails StrictSubClassOf(ce, C).
                If ce is equivalent to owl:Thing then nothing will be returned.



   .. py:method:: equivalent_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]

      Gets the simplified object properties that are equivalent to the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose equivalent object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(op e). If op is unsatisfiable with respect to the set of reasoner axioms
                then owl:bottomDataProperty will be returned.



   .. py:method:: equivalent_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the data properties that are equivalent to the specified data property with respect to the set of
      reasoner axioms.

      :param dp: The data property whose equivalent data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails EquivalentDataProperties(dp e).
                If dp is unsatisfiable with respect to the set of reasoner axioms then owl:bottomDataProperty will
                be returned.



   .. py:method:: disjoint_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]

      Gets the simplified object properties that are disjoint with the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose disjoint object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(e ObjectPropertyComplementOf(op)) or
                StrictSubObjectPropertyOf(e ObjectPropertyComplementOf(op)).



   .. py:method:: disjoint_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the data properties that are disjoint with the specified data property with respect
      to the set of reasoner axioms.

      :param dp: The data property whose disjoint data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails
                EquivalentDataProperties(e DataPropertyComplementOf(dp)) or
                StrictSubDataPropertyOf(e DataPropertyComplementOf(dp)).



   .. py:method:: super_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the stream of data properties that are the strict (potentially direct) super properties of the
      specified data property with respect to the imports closure of the root ontology.

      :param dp: The data property whose super properties are to be retrieved.
      :type dp: OWLDataProperty
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.



   .. py:method:: sub_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the set of named data properties that are the strict (potentially direct) subproperties of the
      specified data property expression with respect to the imports closure of the root ontology.

      :param dp: The data property whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, each property P where the set of reasoner axioms entails DirectSubDataPropertyOf(P, pe).
                If direct is False, each property P where the set of reasoner axioms entails
                StrictSubDataPropertyOf(P, pe). If pe is equivalent to owl:bottomDataProperty then nothing will be
                returned.



   .. py:method:: super_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]

      Gets the stream of object properties that are the strict (potentially direct) super properties of the
      specified object property with respect to the imports closure of the root ontology.

      :param op: The object property expression whose super properties are to be
                 retrieved.
      :type op: OWLObjectPropertyExpression
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.



   .. py:method:: sub_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]

      Gets the stream of simplified object property expressions that are the strict (potentially direct)
      subproperties of the specified object property expression with respect to the imports closure of the root
      ontology.

      :param op: The object property expression whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails DirectSubObjectPropertyOf(P, pe).
                If direct is False, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails StrictSubObjectPropertyOf(P, pe).
                If pe is equivalent to owl:bottomObjectProperty then nothing will be returned.



   .. py:method:: types(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClass]

      Gets the named classes which are (potentially direct) types of the specified named individual.

      :param ind: The individual whose types are to be retrieved.
      :param direct: Specifies if the direct types should be retrieved (True), or if all types should be retrieved
                     (False).

      :returns: If direct is True, each named class C where the set of reasoner axioms entails
                DirectClassAssertion(C, ind). If direct is False, each named class C where the set of reasoner axioms
                entails ClassAssertion(C, ind).



   .. py:method:: get_root_ontology() -> owlapy.owl_ontology.OWLOntology

      Gets the "root" ontology that is loaded into this reasoner. The reasoner takes into account the axioms in
      this ontology and its import's closure.



   .. py:method:: is_isolated()

      Return True if this reasoner is using an isolated ontology.



.. py:class:: FastInstanceCheckerReasoner(ontology: owlapy.owl_ontology.OWLOntology, base_reasoner: OWLReasoner, *, property_cache: bool = True, negation_default: bool = True, sub_properties: bool = False)

   Bases: :py:obj:`OWLReasonerEx`


   Tries to check instances fast (but maybe incomplete).


   .. py:attribute:: __slots__
      :value: ('_ontology', '_base_reasoner', '_ind_set', '_cls_to_ind', '_has_prop',...



   .. py:method:: reset()

      The reset method shall reset any cached state.



   .. py:method:: is_isolated()

      Return True if this reasoner is using an isolated ontology.



   .. py:method:: is_using_triplestore()


   .. py:method:: data_property_domains(pe: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(DataSomeValuesFrom(pe rdfs:Literal)). If direct is True: then if N is not
                empty then the return value is N, else the return value is the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), true). If direct is False: then the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), false) together with N if N is non-empty.
                (Note, rdfs:Literal is the top datatype).



   .. py:method:: data_property_ranges(pe: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_data_ranges.OWLDataRange]

      Gets the data ranges that are the direct or indirect ranges of this property with respect to the imports
      closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      Returns:



   .. py:method:: object_property_domains(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(pe owl:Thing)). If direct is True: then if N is not empty
                then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), true). If direct is False: then the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), false) together with N if N is non-empty.



   .. py:method:: object_property_ranges(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are the direct or indirect ranges of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing)). If direct is True: then
                if N is not empty then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), true). If direct is False: then
                the result of super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), false) together with N
                if N is non-empty.



   .. py:method:: equivalent_classes(ce: owlapy.class_expression.OWLClassExpression, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are equivalent to the specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose equivalent classes are to be retrieved.
      :param only_named: Whether to only retrieve named equivalent classes or also complex class expressions.

      :returns: All class expressions C where the root ontology imports closure entails EquivalentClasses(ce C). If ce is
                not a class name (i.e. it is an anonymous class expression) and there are no such classes C then there will
                be no result. If ce is unsatisfiable with respect to the set of reasoner axioms then  owl:Nothing, i.e. the
                bottom node, will be returned.



   .. py:method:: disjoint_classes(ce: owlapy.class_expression.OWLClassExpression, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the class expressions that are disjoint with specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose disjoint classes are to be retrieved.
      :param only_named: Whether to only retrieve named disjoint classes or also complex class expressions.

      :returns: All class expressions D where the set of reasoner axioms entails EquivalentClasses(D ObjectComplementOf(ce))
                or StrictSubClassOf(D ObjectComplementOf(ce)).



   .. py:method:: different_individuals(ce: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the individuals that are different from the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose different individuals are to be retrieved.

      :returns: All individuals x where the set of reasoner axioms entails DifferentIndividuals(ind x).



   .. py:method:: same_individuals(ce: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the individuals that are the same as the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose same individuals are to be retrieved.

      :returns: All individuals x where the root ontology imports closure entails SameIndividual(ind x).



   .. py:method:: data_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLDataProperty, direct: bool = True) -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the data property values for the specified individual and data property expression.

      :param ind: The individual that is the subject of the data property values.
      :param pe: The data property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l).



   .. py:method:: all_data_property_values(pe: owlapy.owl_property.OWLDataProperty, direct: bool = True) -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets all values for the given data property expression that appear in the knowledge base.

      :param pe: The data property expression whose values are to be retrieved
      :param direct: Specifies if only the direct values of the data property pe should be retrieved (True), or if
                     the values of sub properties of pe should be taken into account (False).

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l) for any ind.



   .. py:method:: object_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = True) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the object property values for the specified individual and object property expression.

      :param ind: The individual that is the subject of the object property values.
      :param pe: The object property expression whose values are to be retrieved for the specified individual.
      :param direct: Specifies if the direct values should be retrieved (True), or if all values should be retrieved
                     (False), so that sub properties are taken into account.

      :returns: The named individuals such that for each individual j, the set of reasoner axioms entails
                ObjectPropertyAssertion(pe ind j).



   .. py:method:: flush() -> None

      Flushes any changes stored in the buffer, which causes the reasoner to take into consideration the changes
      the current root ontology specified by the changes.



   .. py:method:: instances(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the individuals which are instances of the specified class expression.

      :param ce: The class expression whose instances are to be retrieved.
      :param direct: Specifies if the direct instances should be retrieved (True), or if all instances should be
                     retrieved (False).

      :returns: If direct is True, each named individual j where the set of reasoner axioms entails
                DirectClassAssertion(ce, j). If direct is False, each named individual j where the set of reasoner axioms
                entails ClassAssertion(ce, j). If ce is unsatisfiable with respect to the set of reasoner axioms then
                nothing returned.



   .. py:method:: sub_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the set of named classes that are the strict (potentially direct) subclasses of the specified class
      expression with respect to the reasoner axioms.

      :param ce: The class expression whose strict (direct) subclasses are to be retrieved.
      :param direct: Specifies if the direct subclasses should be retrieved (True) or if the all subclasses
                     (descendant) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named sub-classes or also complex class expressions.

      :returns: If direct is True, each class C where reasoner axioms entails DirectSubClassOf(C, ce). If direct is False,
                each class C where reasoner axioms entails StrictSubClassOf(C, ce). If ce is equivalent to owl:Nothing then
                nothing will be returned.



   .. py:method:: super_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, only_named: bool = True) -> Iterable[owlapy.class_expression.OWLClassExpression]

      Gets the stream of named classes that are the strict (potentially direct) super classes of the specified
      class expression with respect to the imports closure of the root ontology.

      :param ce: The class expression whose strict (direct) super classes are to be retrieved.
      :param direct: Specifies if the direct super classes should be retrieved (True) or if the all super classes
                     (ancestors) classes should be retrieved (False).
      :param only_named: Whether to only retrieve named super classes or also complex class expressions.

      :returns: If direct is True, each class C where the set of reasoner axioms entails DirectSubClassOf(ce, C).
                If direct is False, each class C where  set of reasoner axioms entails StrictSubClassOf(ce, C).
                If ce is equivalent to owl:Thing then nothing will be returned.



   .. py:method:: types(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClass]

      Gets the named classes which are (potentially direct) types of the specified named individual.

      :param ind: The individual whose types are to be retrieved.
      :param direct: Specifies if the direct types should be retrieved (True), or if all types should be retrieved
                     (False).

      :returns: If direct is True, each named class C where the set of reasoner axioms entails
                DirectClassAssertion(C, ind). If direct is False, each named class C where the set of reasoner axioms
                entails ClassAssertion(C, ind).



   .. py:method:: equivalent_object_properties(dp: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]

      Gets the simplified object properties that are equivalent to the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose equivalent object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(op e). If op is unsatisfiable with respect to the set of reasoner axioms
                then owl:bottomDataProperty will be returned.



   .. py:method:: equivalent_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the data properties that are equivalent to the specified data property with respect to the set of
      reasoner axioms.

      :param dp: The data property whose equivalent data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails EquivalentDataProperties(dp e).
                If dp is unsatisfiable with respect to the set of reasoner axioms then owl:bottomDataProperty will
                be returned.



   .. py:method:: disjoint_object_properties(dp: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]

      Gets the simplified object properties that are disjoint with the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose disjoint object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(e ObjectPropertyComplementOf(op)) or
                StrictSubObjectPropertyOf(e ObjectPropertyComplementOf(op)).



   .. py:method:: disjoint_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the data properties that are disjoint with the specified data property with respect
      to the set of reasoner axioms.

      :param dp: The data property whose disjoint data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails
                EquivalentDataProperties(e DataPropertyComplementOf(dp)) or
                StrictSubDataPropertyOf(e DataPropertyComplementOf(dp)).



   .. py:method:: sub_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the set of named data properties that are the strict (potentially direct) subproperties of the
      specified data property expression with respect to the imports closure of the root ontology.

      :param dp: The data property whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, each property P where the set of reasoner axioms entails DirectSubDataPropertyOf(P, pe).
                If direct is False, each property P where the set of reasoner axioms entails
                StrictSubDataPropertyOf(P, pe). If pe is equivalent to owl:bottomDataProperty then nothing will be
                returned.



   .. py:method:: super_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the stream of data properties that are the strict (potentially direct) super properties of the
      specified data property with respect to the imports closure of the root ontology.

      :param dp: The data property whose super properties are to be retrieved.
      :type dp: OWLDataProperty
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.



   .. py:method:: super_object_properties(op: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets the stream of object properties that are the strict (potentially direct) super properties of the
      specified object property with respect to the imports closure of the root ontology.

      :param op: The object property expression whose super properties are to be
                 retrieved.
      :type op: OWLObjectPropertyExpression
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.



   .. py:method:: sub_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]

      Gets the stream of simplified object property expressions that are the strict (potentially direct)
      subproperties of the specified object property expression with respect to the imports closure of the root
      ontology.

      :param op: The object property expression whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails DirectSubObjectPropertyOf(P, pe).
                If direct is False, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails StrictSubObjectPropertyOf(P, pe).
                If pe is equivalent to owl:bottomObjectProperty then nothing will be returned.



   .. py:method:: get_root_ontology() -> owlapy.owl_ontology.OWLOntology

      Gets the "root" ontology that is loaded into this reasoner. The reasoner takes into account the axioms in
      this ontology and its import's closure.



.. py:class:: SyncReasoner(ontology: owlapy.owl_ontology.Ontology, base_reasoner: Optional[BaseReasoner] = None, infer_property_values: bool = True, infer_data_property_values: bool = True, isolate: bool = False)

   Bases: :py:obj:`OntologyReasoner`


   Extra convenience methods for OWL Reasoners


   .. py:attribute:: __slots__
      :value: ('_cnt', '_conv', '_base_reasoner')



   .. py:method:: update_isolated_ontology(axioms_to_add: List[owlapy.owl_axiom.OWLAxiom] = None, axioms_to_remove: List[owlapy.owl_axiom.OWLAxiom] = None)

      Add or remove axioms to the isolated ontology that the reasoner is using.

      :param axioms_to_add: Axioms to add to the isolated ontology.
      :type axioms_to_add: List[OWLAxiom]
      :param axioms_to_remove: Axioms to remove from the isolated ontology.
      :type axioms_to_remove: List[OWLAxiom]



   .. py:method:: instances(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]

      Gets the individuals which are instances of the specified class expression.

      :param ce: The class expression whose instances are to be retrieved.
      :param direct: Specifies if the direct instances should be retrieved (True), or if all instances should be
                     retrieved (False).

      :returns: If direct is True, each named individual j where the set of reasoner axioms entails
                DirectClassAssertion(ce, j). If direct is False, each named individual j where the set of reasoner axioms
                entails ClassAssertion(ce, j). If ce is unsatisfiable with respect to the set of reasoner axioms then
                nothing returned.



   .. py:method:: __del__()


