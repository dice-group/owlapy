:py:mod:`owlapy.owl2sparql.converter`
=====================================

.. py:module:: owlapy.owl2sparql.converter

.. autoapi-nested-parse::

   Format converter.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   owlapy.owl2sparql.converter.VariablesMapping
   owlapy.owl2sparql.converter.Owl2SparqlConverter



Functions
~~~~~~~~~

.. autoapisummary::

   owlapy.owl2sparql.converter.peek
   owlapy.owl2sparql.converter.owl_expression_to_sparql



Attributes
~~~~~~~~~~

.. autoapisummary::

   owlapy.owl2sparql.converter.converter


.. py:function:: peek(x)

   Peek the last element of an array.

   :returns: The last element arr[-1].


.. py:class:: VariablesMapping


   Helper class for owl-to-sparql conversion.

   .. py:attribute:: __slots__
      :value: ('class_cnt', 'prop_cnt', 'ind_cnt', 'dict')

      

   .. py:method:: get_variable(e: owlapy.model.OWLEntity) -> str


   .. py:method:: new_individual_variable() -> str


   .. py:method:: new_property_variable() -> str


   .. py:method:: __contains__(item: owlapy.model.OWLEntity) -> bool


   .. py:method:: __getitem__(item: owlapy.model.OWLEntity) -> str



.. py:class:: Owl2SparqlConverter


   Convert owl (owlapy model class expressions) to SPARQL.

   .. py:property:: modal_depth


   .. py:property:: current_variable


   .. py:attribute:: __slots__
      :value: ('ce', 'sparql', 'variables', 'parent', 'parent_var', 'properties', 'variable_entities', 'cnt',...

      

   .. py:attribute:: ce
      :type: owlapy.model.OWLClassExpression

      

   .. py:attribute:: sparql
      :type: List[str]

      

   .. py:attribute:: variables
      :type: List[str]

      

   .. py:attribute:: parent
      :type: List[owlapy.model.OWLClassExpression]

      

   .. py:attribute:: parent_var
      :type: List[str]

      

   .. py:attribute:: variable_entities
      :type: Set[owlapy.model.OWLEntity]

      

   .. py:attribute:: properties
      :type: Dict[int, List[owlapy.model.OWLEntity]]

      

   .. py:attribute:: mapping
      :type: VariablesMapping

      

   .. py:attribute:: grouping_vars
      :type: Dict[owlapy.model.OWLClassExpression, Set[str]]

      

   .. py:attribute:: having_conditions
      :type: Dict[owlapy.model.OWLClassExpression, Set[str]]

      

   .. py:attribute:: cnt
      :type: int

      

   .. py:method:: convert(root_variable: str, ce: owlapy.model.OWLClassExpression, named_individuals: bool = False)

      Used to convert owl class expression to SPARQL syntax.

      :param root_variable: Root variable name that will be used in SPARQL query.
      :type root_variable: str
      :param ce: The owl class expression to convert.
      :type ce: OWLClassExpression
      :param named_individuals: If 'True' return only entities that are instances of owl:NamedIndividual.
      :type named_individuals: bool

      :returns: The SPARQL query.
      :rtype: list[str]


   .. py:method:: render(e)
      :abstractmethod:


   .. py:method:: stack_variable(var)


   .. py:method:: stack_parent(parent: owlapy.model.OWLClassExpression)


   .. py:method:: process(ce: owlapy.model.OWLClassExpression)
      :abstractmethod:


   .. py:method:: new_count_var() -> str


   .. py:method:: append_triple(subject, predicate, object_)


   .. py:method:: append(frag)


   .. py:method:: triple(subject, predicate, object_)


   .. py:method:: as_query(root_variable: str, ce: owlapy.model.OWLClassExpression, count: bool = False, values: Optional[Iterable[owlapy.model.OWLNamedIndividual]] = None, named_individuals: bool = False)



.. py:data:: converter

   

.. py:function:: owl_expression_to_sparql(root_variable: str = '?x', ce: owlapy.model.OWLClassExpression = None, count: bool = False, values: Optional[Iterable[owlapy.model.OWLNamedIndividual]] = None, named_individuals: bool = False) -> str

   Convert an OWL Class Expression (https://www.w3.org/TR/owl2-syntax/#Class_Expressions) into a SPARQL query


