owlapy
======

.. py:module:: owlapy


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/owlapy/abstracts/index
   /autoapi/owlapy/class_expression/index
   /autoapi/owlapy/converter/index
   /autoapi/owlapy/entities/index
   /autoapi/owlapy/iri/index
   /autoapi/owlapy/meta_classes/index
   /autoapi/owlapy/namespaces/index
   /autoapi/owlapy/owl_annotation/index
   /autoapi/owlapy/owl_axiom/index
   /autoapi/owlapy/owl_data_ranges/index
   /autoapi/owlapy/owl_datatype/index
   /autoapi/owlapy/owl_hierarchy/index
   /autoapi/owlapy/owl_individual/index
   /autoapi/owlapy/owl_literal/index
   /autoapi/owlapy/owl_object/index
   /autoapi/owlapy/owl_ontology/index
   /autoapi/owlapy/owl_ontology_manager/index
   /autoapi/owlapy/owl_property/index
   /autoapi/owlapy/owl_reasoner/index
   /autoapi/owlapy/owlapi_mapper/index
   /autoapi/owlapy/parser/index
   /autoapi/owlapy/providers/index
   /autoapi/owlapy/render/index
   /autoapi/owlapy/static_funcs/index
   /autoapi/owlapy/util_owl_static_funcs/index
   /autoapi/owlapy/utils/index
   /autoapi/owlapy/vocab/index


Classes
-------

.. autoapisummary::

   owlapy.OntologyManager


Functions
---------

.. autoapisummary::

   owlapy.owl_expression_to_dl
   owlapy.owl_expression_to_manchester
   owlapy.dl_to_owl_expression
   owlapy.manchester_to_owl_expression
   owlapy.owl_expression_to_sparql
   owlapy.owl_expression_to_sparql_with_confusion_matrix


Package Contents
----------------

.. py:function:: owl_expression_to_dl(o: owlapy.owl_object.OWLObject) -> str

.. py:function:: owl_expression_to_manchester(o: owlapy.owl_object.OWLObject) -> str

.. py:function:: dl_to_owl_expression(dl_expression: str, namespace: str)

.. py:function:: manchester_to_owl_expression(manchester_expression: str, namespace: str)

.. py:function:: owl_expression_to_sparql(expression: owlapy.class_expression.OWLClassExpression = None, root_variable: str = '?x', values: Optional[Iterable[owlapy.owl_individual.OWLNamedIndividual]] = None, for_all_de_morgan: bool = True, named_individuals: bool = False) -> str

   Convert an OWL Class Expression (https://www.w3.org/TR/owl2-syntax/#Class_Expressions) into a SPARQL query
   root variable: the variable that will be projected
   expression: the class expression to be transformed to a SPARQL query

   values: positive or negative examples from a class expression problem. Unclear
   for_all_de_morgan: if set to True, the SPARQL mapping will use the mapping containing the nested FILTER NOT EXISTS
   patterns for the universal quantifier (¬(∃r.¬C)), instead of the counting query
   named_individuals: if set to True, the generated SPARQL query will return only entities
   that are instances of owl:NamedIndividual


.. py:function:: owl_expression_to_sparql_with_confusion_matrix(expression: owlapy.class_expression.OWLClassExpression, positive_examples: Optional[Iterable[owlapy.owl_individual.OWLNamedIndividual]], negative_examples: Optional[Iterable[owlapy.owl_individual.OWLNamedIndividual]], root_variable: str = '?x', for_all_de_morgan: bool = True, named_individuals: bool = False) -> str

   Convert an OWL Class Expression (https://www.w3.org/TR/owl2-syntax/#Class_Expressions) into a SPARQL query
   root variable: the variable that will be projected
   expression: the class expression to be transformed to a SPARQL query
   positive_examples: positive examples from a class expression problem
   negative_examples: positive examples from a class expression problem
   for_all_de_morgan: if set to True, the SPARQL mapping will use the mapping containing the nested FILTER NOT EXISTS
   patterns for the universal quantifier (¬(∃r.¬C)), instead of the counting query
   named_individuals: if set to True, the generated SPARQL query will return only entities
   that are instances of owl:NamedIndividual


.. py:class:: OntologyManager(world_store=None)

   Bases: :py:obj:`owlapy.abstracts.abstract_owl_ontology_manager.AbstractOWLOntologyManager`


   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.


   .. py:attribute:: __slots__
      :value: '_world'



   .. py:method:: create_ontology(iri: Union[str, owlapy.iri.IRI] = None) -> owlapy.owl_ontology.Ontology

      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created, can also be a string.

      :returns: The newly created ontology.



   .. py:method:: load_ontology(path: Union[owlapy.iri.IRI, str] = None) -> owlapy.owl_ontology.Ontology

      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri:
                  The IRI that identifies the ontology, can also be a string.
                   It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.



   .. py:method:: apply_change(change: owlapy.abstracts.abstract_owl_ontology_manager.AbstractOWLOntologyChange)

      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.



   .. py:method:: save_world()

      Saves the actual state of the quadstore in the SQLite3 file.




