owlapy
======

.. py:module:: owlapy


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/owlapy/abstracts/index
   /autoapi/owlapy/class_expression/index
   /autoapi/owlapy/converter/index
   /autoapi/owlapy/entities/index
   /autoapi/owlapy/iri/index
   /autoapi/owlapy/meta_classes/index
   /autoapi/owlapy/namespaces/index
   /autoapi/owlapy/owl_annotation/index
   /autoapi/owlapy/owl_axiom/index
   /autoapi/owlapy/owl_data_ranges/index
   /autoapi/owlapy/owl_datatype/index
   /autoapi/owlapy/owl_hierarchy/index
   /autoapi/owlapy/owl_individual/index
   /autoapi/owlapy/owl_literal/index
   /autoapi/owlapy/owl_object/index
   /autoapi/owlapy/owl_ontology/index
   /autoapi/owlapy/owl_property/index
   /autoapi/owlapy/owl_reasoner/index
   /autoapi/owlapy/owlapi_mapper/index
   /autoapi/owlapy/parser/index
   /autoapi/owlapy/providers/index
   /autoapi/owlapy/render/index
   /autoapi/owlapy/static_funcs/index
   /autoapi/owlapy/util_owl_static_funcs/index
   /autoapi/owlapy/utils/index
   /autoapi/owlapy/vocab/index


Functions
---------

.. autoapisummary::

   owlapy.owl_expression_to_dl
   owlapy.owl_expression_to_manchester
   owlapy.dl_to_owl_expression
   owlapy.manchester_to_owl_expression
   owlapy.owl_expression_to_sparql
   owlapy.owl_expression_to_sparql_with_confusion_matrix


Package Contents
----------------

.. py:function:: owl_expression_to_dl(o: owlapy.owl_object.OWLObject) -> str

.. py:function:: owl_expression_to_manchester(o: owlapy.owl_object.OWLObject) -> str

.. py:function:: dl_to_owl_expression(dl_expression: str, namespace: str)

.. py:function:: manchester_to_owl_expression(manchester_expression: str, namespace: str)

.. py:function:: owl_expression_to_sparql(expression: owlapy.class_expression.OWLClassExpression = None, root_variable: str = '?x', values: Optional[Iterable[owlapy.owl_individual.OWLNamedIndividual]] = None, for_all_de_morgan: bool = True, named_individuals: bool = False) -> str

   Convert an OWL Class Expression (https://www.w3.org/TR/owl2-syntax/#Class_Expressions) into a SPARQL query
   root variable: the variable that will be projected
   expression: the class expression to be transformed to a SPARQL query

   values: positive or negative examples from a class expression problem. Unclear
   for_all_de_morgan: if set to True, the SPARQL mapping will use the mapping containing the nested FILTER NOT EXISTS
   patterns for the universal quantifier (¬(∃r.¬C)), instead of the counting query
   named_individuals: if set to True, the generated SPARQL query will return only entities
   that are instances of owl:NamedIndividual


.. py:function:: owl_expression_to_sparql_with_confusion_matrix(expression: owlapy.class_expression.OWLClassExpression, positive_examples: Optional[Iterable[owlapy.owl_individual.OWLNamedIndividual]], negative_examples: Optional[Iterable[owlapy.owl_individual.OWLNamedIndividual]], root_variable: str = '?x', for_all_de_morgan: bool = True, named_individuals: bool = False) -> str

   Convert an OWL Class Expression (https://www.w3.org/TR/owl2-syntax/#Class_Expressions) into a SPARQL query
   root variable: the variable that will be projected
   expression: the class expression to be transformed to a SPARQL query
   positive_examples: positive examples from a class expression problem
   negative_examples: positive examples from a class expression problem
   for_all_de_morgan: if set to True, the SPARQL mapping will use the mapping containing the nested FILTER NOT EXISTS
   patterns for the universal quantifier (¬(∃r.¬C)), instead of the counting query
   named_individuals: if set to True, the generated SPARQL query will return only entities
   that are instances of owl:NamedIndividual


