owlapy.owlapi_adaptor
=====================

.. py:module:: owlapy.owlapi_adaptor


Classes
-------

.. autoapisummary::

   owlapy.owlapi_adaptor.OWLAPIAdaptor


Module Contents
---------------

.. py:class:: OWLAPIAdaptor(path: str, name_reasoner: str = 'HermiT')

   A class to interface with the OWL API using the HermiT reasoner, enabling ontology management,
   reasoning, and parsing class expressions in Manchester OWL Syntax.

   .. attribute:: path

      The file path to the ontology.

      :type: str

   .. attribute:: name_reasoner

      The reasoner to be used, default is "HermiT".

      :type: str

   .. attribute:: manager

      The OWL ontology manager.

   .. attribute:: ontology

      The loaded OWL ontology.

   .. attribute:: reasoner

      Choose from (case-sensitive): ["HermiT", "Pellet", "JFact", "Openllet"]. Default: "HermiT".

   .. attribute:: parser

      The Manchester OWL Syntax parser.

   .. attribute:: renderer

      The Manchester OWL Syntax renderer.


   .. py:method:: stopJVM(*args, **kwargs) -> None

      Detaches the thread from Java packages and shuts down the java virtual machine hosted by jpype.



   .. py:method:: generate_inferred_class_assertion_axioms(output='temp.ttl', format: str = None)

      Generates inferred class assertion axioms for the ontology managed by this instance's reasoner and saves them to a file.

      This function uses the OWL API to generate inferred class assertion axioms based on the ontology and reasoner
      associated with this instance. The inferred axioms are saved to the specified output file in the desired format.

      Parameters:
      -----------
      output : str, optional
          The name of the file where the inferred axioms will be saved. Default is "temp.ttl".

      format : str, optional
          The format in which to save the inferred axioms. Supported formats are:
          - "ttl" or "turtle" for Turtle format
          - "rdf/xml" for RDF/XML format
          - "owl/xml" for OWL/XML format
          If not specified, the format of the original ontology is used.

      Notes:
      ------
      - The function supports saving in multiple formats: Turtle, RDF/XML, and OWL/XML.
      - The inferred axioms are generated using the reasoner associated with this instance and the OWL API's
        InferredClassAssertionAxiomGenerator.
      - The inferred axioms are added to a new ontology which is then saved in the specified format.

      Example:
      --------
      >>> instance.generate_inferred_class_assertion_axioms(output="inferred_axioms.ttl", format="ttl")

      This will save the inferred class assertion axioms to the file "inferred_axioms.ttl" in Turtle format.




   .. py:method:: convert_to_owlapi(ce: owlapy.class_expression.OWLClassExpression)

      Converts an OWLAPY class expression to an OWLAPI class expression.

      :param ce: The class expression in OWLAPY format to be converted.
      :type ce: OWLClassExpression

      :returns: The class expression in OWLAPI format.



   .. py:method:: convert_from_owlapi(ce, namespace: str) -> owlapy.class_expression.OWLClassExpression

      Converts an OWLAPI class expression to an OWLAPY class expression.

      :param ce: The class expression in OWLAPI format.
      :param namespace: The ontology's namespace where the class expression belongs.
      :type namespace: str

      :returns: The class expression in OWLAPY format.
      :rtype: OWLClassExpression



   .. py:method:: instances(ce: owlapy.class_expression.OWLClassExpression) -> List[owlapy.owl_individual.OWLNamedIndividual]

      Get the instances for a given class expression using HermiT.

      :param ce: The class expression in OWLAPY format.
      :type ce: OWLClassExpression

      :returns: A list of individuals classified by the given class expression.
      :rtype: list



   .. py:method:: has_consistent_ontology() -> bool

      Check if the used ontology is consistent.

      :returns: True if the ontology is consistent, False otherwise.
      :rtype: bool



