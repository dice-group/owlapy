owlapy.owlapi_adaptor
=====================

.. py:module:: owlapy.owlapi_adaptor


Classes
-------

.. autoapisummary::

   owlapy.owlapi_adaptor.OWLAPIAdaptor


Module Contents
---------------

.. py:class:: OWLAPIAdaptor(path: str, name_reasoner: str = 'HermiT')

   A class to interface with the OWL API using the HermiT reasoner, enabling ontology management,
   reasoning, and parsing class expressions in Manchester OWL Syntax.

   .. attribute:: path

      The file path to the ontology.

      :type: str

   .. attribute:: name_reasoner

      The reasoner to be used, default is "HermiT".

      :type: str

   .. attribute:: manager

      The OWL ontology manager.

   .. attribute:: ontology

      The loaded OWL ontology.

   .. attribute:: reasoner

      The HermiT reasoner for the ontology.

   .. attribute:: parser

      The Manchester OWL Syntax parser.

   .. attribute:: renderer

      The Manchester OWL Syntax renderer.

   .. attribute:: __is_open

      Flag to check if the JVM is open.

      :type: bool


   .. py:method:: __exit__(exc_type, exc_val, exc_tb)

      Shuts down the java virtual machine hosted by jpype.



   .. py:method:: __enter__()

      Initialization via the `with` statement.

      :returns: The current instance.
      :rtype: OWLAPIAdaptor



   .. py:method:: open()

      Start the JVM with jar dependencies, import necessary OWL API dependencies, and initialize attributes.



   .. py:method:: close(*args, **kwargs) -> None

      Shuts down the java virtual machine hosted by jpype.



   .. py:method:: convert_to_owlapi(ce: owlapy.class_expression.OWLClassExpression)

      Converts an OWLAPY class expression to an OWLAPI class expression.

      :param ce: The class expression in OWLAPY format to be converted.
      :type ce: OWLClassExpression

      :returns: The class expression in OWLAPI format.



   .. py:method:: convert_from_owlapi(ce, namespace: str) -> owlapy.class_expression.OWLClassExpression

      Converts an OWLAPI class expression to an OWLAPY class expression.

      :param ce: The class expression in OWLAPI format.
      :param namespace: The ontology's namespace where the class expression belongs.
      :type namespace: str

      :returns: The class expression in OWLAPY format.
      :rtype: OWLClassExpression



   .. py:method:: instances(ce: owlapy.class_expression.OWLClassExpression) -> List[owlapy.owl_individual.OWLNamedIndividual]

      Get the instances for a given class expression using HermiT.

      :param ce: The class expression in OWLAPY format.
      :type ce: OWLClassExpression

      :returns: A list of individuals classified by the given class expression.
      :rtype: list



   .. py:method:: has_consistent_ontology() -> bool

      Check if the used ontology is consistent.

      :returns: True if the ontology is consistent, False otherwise.
      :rtype: bool



