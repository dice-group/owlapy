:py:mod:`owlapy.providers`
==========================

.. py:module:: owlapy.providers

.. autoapi-nested-parse::

   OWL Datatype restriction constructors.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   owlapy.providers.owl_datatype_max_exclusive_restriction
   owlapy.providers.owl_datatype_min_exclusive_restriction
   owlapy.providers.owl_datatype_max_inclusive_restriction
   owlapy.providers.owl_datatype_min_inclusive_restriction
   owlapy.providers.owl_datatype_min_max_exclusive_restriction
   owlapy.providers.owl_datatype_min_max_inclusive_restriction



Attributes
~~~~~~~~~~

.. autoapisummary::

   owlapy.providers.Restriction_Literals


.. py:data:: Restriction_Literals

   

.. py:function:: owl_datatype_max_exclusive_restriction(max_: Restriction_Literals) -> owlapy.class_expression.OWLDatatypeRestriction

   Create a max exclusive restriction.


.. py:function:: owl_datatype_min_exclusive_restriction(min_: Restriction_Literals) -> owlapy.class_expression.OWLDatatypeRestriction

   Create a min exclusive restriction.


.. py:function:: owl_datatype_max_inclusive_restriction(max_: Restriction_Literals) -> owlapy.class_expression.OWLDatatypeRestriction

   Create a max inclusive restriction.


.. py:function:: owl_datatype_min_inclusive_restriction(min_: Restriction_Literals) -> owlapy.class_expression.OWLDatatypeRestriction

   Create a min inclusive restriction.


.. py:function:: owl_datatype_min_max_exclusive_restriction(min_: Restriction_Literals, max_: Restriction_Literals) -> owlapy.class_expression.OWLDatatypeRestriction

   Create a min-max exclusive restriction.


.. py:function:: owl_datatype_min_max_inclusive_restriction(min_: Restriction_Literals, max_: Restriction_Literals) -> owlapy.class_expression.OWLDatatypeRestriction

   Create a min-max inclusive restriction.


