owlapy.class_expression.restriction
===================================

.. py:module:: owlapy.class_expression.restriction

.. autoapi-nested-parse::

   OWL Restrictions



Attributes
----------

.. autoapisummary::

   owlapy.class_expression.restriction.Literals


Classes
-------

.. autoapisummary::

   owlapy.class_expression.restriction.OWLRestriction
   owlapy.class_expression.restriction.OWLHasValueRestriction
   owlapy.class_expression.restriction.OWLObjectRestriction
   owlapy.class_expression.restriction.OWLQuantifiedRestriction
   owlapy.class_expression.restriction.OWLCardinalityRestriction
   owlapy.class_expression.restriction.OWLQuantifiedObjectRestriction
   owlapy.class_expression.restriction.OWLObjectCardinalityRestriction
   owlapy.class_expression.restriction.OWLObjectMinCardinality
   owlapy.class_expression.restriction.OWLObjectMaxCardinality
   owlapy.class_expression.restriction.OWLObjectExactCardinality
   owlapy.class_expression.restriction.OWLObjectSomeValuesFrom
   owlapy.class_expression.restriction.OWLObjectAllValuesFrom
   owlapy.class_expression.restriction.OWLObjectHasSelf
   owlapy.class_expression.restriction.OWLObjectHasValue
   owlapy.class_expression.restriction.OWLObjectOneOf
   owlapy.class_expression.restriction.OWLDataRestriction
   owlapy.class_expression.restriction.OWLQuantifiedDataRestriction
   owlapy.class_expression.restriction.OWLDataCardinalityRestriction
   owlapy.class_expression.restriction.OWLDataMinCardinality
   owlapy.class_expression.restriction.OWLDataMaxCardinality
   owlapy.class_expression.restriction.OWLDataExactCardinality
   owlapy.class_expression.restriction.OWLDataSomeValuesFrom
   owlapy.class_expression.restriction.OWLDataAllValuesFrom
   owlapy.class_expression.restriction.OWLDataHasValue
   owlapy.class_expression.restriction.OWLDataOneOf
   owlapy.class_expression.restriction.OWLDatatypeRestriction
   owlapy.class_expression.restriction.OWLFacetRestriction


Module Contents
---------------

.. py:data:: Literals

.. py:class:: OWLRestriction

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLAnonymousClassExpression`


   Represents an Object Property Restriction or Data Property Restriction in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_property() -> owlapy.owl_property.OWLPropertyExpression
      :abstractmethod:


      :returns: Property being restricted.



   .. py:method:: is_data_restriction() -> bool

      Determines if this is a data restriction.

      :returns: True if this is a data restriction.



   .. py:method:: is_object_restriction() -> bool

      Determines if this is an object restriction.

      :returns: True if this is an object restriction.



.. py:class:: OWLHasValueRestriction(value: _T)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_T`\ ], :py:obj:`OWLRestriction`, :py:obj:`owlapy.meta_classes.HasFiller`\ [\ :py:obj:`_T`\ ]


   Represent a HasValue restriction in the OWL 2

   :param _T: The value type.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: get_filler() -> _T

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLObjectRestriction

   Bases: :py:obj:`OWLRestriction`


   Represents an Object Property Restriction in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_object_restriction() -> bool

      Determines if this is an object restriction.

      :returns: True if this is an object restriction.



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression
      :abstractmethod:


      :returns: Property being restricted.



.. py:class:: OWLQuantifiedRestriction

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_T`\ ], :py:obj:`OWLRestriction`, :py:obj:`owlapy.meta_classes.HasFiller`\ [\ :py:obj:`_T`\ ]


   Represents a quantified restriction.

   :param _T: value type


   .. py:attribute:: __slots__
      :value: ()



.. py:class:: OWLCardinalityRestriction(cardinality: int, filler: _F)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_F`\ ], :py:obj:`OWLQuantifiedRestriction`\ [\ :py:obj:`_F`\ ], :py:obj:`owlapy.meta_classes.HasCardinality`


   Base interface for owl min and max cardinality restriction.

   :param _F: Type of filler.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_cardinality() -> int

      Gets the cardinality of a restriction.

      :returns: The cardinality. A non-negative integer.



   .. py:method:: get_filler() -> _F

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLQuantifiedObjectRestriction(filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedRestriction`\ [\ :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`\ ], :py:obj:`OWLObjectRestriction`


   Represents a quantified object restriction.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_filler() -> owlapy.class_expression.class_expression.OWLClassExpression

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLObjectCardinalityRestriction(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLCardinalityRestriction`\ [\ :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`\ ], :py:obj:`OWLQuantifiedObjectRestriction`


   Represents Object Property Cardinality Restrictions in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: __repr__()


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


.. py:class:: OWLObjectMinCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   A minimum cardinality expression ObjectMinCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
   to at least n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Minimum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3008



.. py:class:: OWLObjectMaxCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   A maximum cardinality expression ObjectMaxCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
    to at most n different individuals that are instances of CE.
    (https://www.w3.org/TR/owl2-syntax/#Maximum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3010



.. py:class:: OWLObjectExactCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   An exact cardinality expression ObjectExactCardinality( n OPE CE ) consists of a nonnegative integer n, an object
    property expression OPE, and a class expression CE, and it contains all those individuals that are connected by
    to exactly n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Exact_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3009



   .. py:method:: as_intersection_of_min_max() -> owlapy.class_expression.nary_boolean_expression.OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R C) = >= 1 R C and <= 1 R C.



.. py:class:: OWLObjectSomeValuesFrom(property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedObjectRestriction`


   An existential class expression ObjectSomeValuesFrom( OPE CE ) consists of an object property expression OPE and
   a class expression CE, and it contains all those individuals that are connected by OPE to an individual that is
   an instance of CE.


   .. py:attribute:: __slots__
      :value: ('_property', '_filler')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3005



   .. py:method:: __repr__()


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectAllValuesFrom(property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedObjectRestriction`


   A universal class expression ObjectAllValuesFrom( OPE CE ) consists of an object property expression OPE and a
   class expression CE, and it contains all those individuals that are connected by OPE only to
   individuals that are instances of CE. (https://www.w3.org/TR/owl2-syntax/#Universal_Quantification)


   .. py:attribute:: __slots__
      :value: ('_property', '_filler')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3006



   .. py:method:: __repr__()


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectHasSelf(property: owlapy.owl_property.OWLObjectPropertyExpression)

   Bases: :py:obj:`OWLObjectRestriction`


   A self-restriction ObjectHasSelf( OPE ) consists of an object property expression OPE,
   and it contains all those individuals that are connected by OPE to themselves.
   (https://www.w3.org/TR/owl2-syntax/#Self-Restriction)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3011



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: __repr__()


.. py:class:: OWLObjectHasValue(property: owlapy.owl_property.OWLObjectPropertyExpression, individual: owlapy.owl_individual.OWLIndividual)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ], :py:obj:`OWLObjectRestriction`


   A has-value class expression ObjectHasValue( OPE a ) consists of an object property expression OPE and an
   individual a, and it contains all those individuals that are connected by OPE to a. Each such class expression
   can be seen as a syntactic shortcut for the class expression ObjectSomeValuesFrom( OPE ObjectOneOf( a ) ).
   (https://www.w3.org/TR/owl2-syntax/#Individual_Value_Restriction)


   .. py:attribute:: __slots__
      :value: ('_property', '_v')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3007



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: __repr__()


.. py:class:: OWLObjectOneOf(values: Union[owlapy.owl_individual.OWLIndividual, Iterable[owlapy.owl_individual.OWLIndividual]])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLAnonymousClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ]


   An enumeration of individuals ObjectOneOf( a1 ... an ) contains exactly the individuals ai with 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Individuals)


   .. py:attribute:: __slots__
      :value: '_values'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3004



   .. py:method:: individuals() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the individuals that are in the oneOf. These individuals represent the exact instances (extension)
      of this class expression.

      :returns: The individuals that are the values of this {@code ObjectOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: as_object_union_of() -> owlapy.class_expression.class_expression.OWLClassExpression

      Simplifies this enumeration to a union of singleton nominals.

      :returns: This enumeration in a more standard DL form.
                simp({a}) = {a} simp({a0, ... , {an}) = unionOf({a0}, ... , {an})



   .. py:method:: __hash__()


   .. py:method:: __eq__(other)


   .. py:method:: __repr__()


.. py:class:: OWLDataRestriction

   Bases: :py:obj:`OWLRestriction`


   Represents a Data Property Restriction.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_data_restriction() -> bool

      Determines if this is a data restriction.

      :returns: True if this is a data restriction.



.. py:class:: OWLQuantifiedDataRestriction(filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedRestriction`\ [\ :py:obj:`owlapy.owl_data_ranges.OWLDataRange`\ ], :py:obj:`OWLDataRestriction`


   Represents a quantified data restriction.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_filler() -> owlapy.owl_data_ranges.OWLDataRange

      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: OWLDataCardinalityRestriction(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLCardinalityRestriction`\ [\ :py:obj:`owlapy.owl_data_ranges.OWLDataRange`\ ], :py:obj:`OWLQuantifiedDataRestriction`, :py:obj:`OWLDataRestriction`


   Represents Data Property Cardinality Restrictions.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



   .. py:method:: __repr__()


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


.. py:class:: OWLDataMinCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   A minimum cardinality expression DataMinCardinality( n DPE DR ) consists of a nonnegative integer n, a data
   property expression DPE, and a unary data range DR, and it contains all those individuals that are connected by
   DPE to at least n different literals in DR.
   (https://www.w3.org/TR/owl2-syntax/#Minimum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3015



.. py:class:: OWLDataMaxCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   A maximum cardinality expression ObjectMaxCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
   to at most n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Maximum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3017



.. py:class:: OWLDataExactCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   An exact cardinality expression ObjectExactCardinality( n OPE CE ) consists of a nonnegative integer n, an
   object property expression OPE, and a class expression CE, and it contains all those individuals that are connected
    by OPE to exactly n different individuals that are instances of CE
    (https://www.w3.org/TR/owl2-syntax/#Exact_Cardinality)



   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3016



   .. py:method:: as_intersection_of_min_max() -> owlapy.class_expression.nary_boolean_expression.OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R D) = >= 1 R D and <= 1 R D.



.. py:class:: OWLDataSomeValuesFrom(property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedDataRestriction`


   An existential class expression DataSomeValuesFrom( DPE1 ... DPEn DR ) consists of n data property expressions
   DPEi, 1 ≤ i ≤ n, and a data range DR whose arity must be n. Such a class expression contains all those individuals
   that are connected by DPEi to literals lti, 1 ≤ i ≤ n, such that the tuple ( lt1 , ..., ltn ) is in DR. A class
   expression of the form DataSomeValuesFrom( DPE DR ) can be seen as a syntactic shortcut for the class expression
   DataMinCardinality( 1 DPE DR ).
   (https://www.w3.org/TR/owl2-syntax/#Existential_Quantification_2)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3012



   .. py:method:: __repr__()


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataAllValuesFrom(property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedDataRestriction`


   A universal class expression DataAllValuesFrom( DPE1 ... DPEn DR ) consists of n data property expressions DPEi,
   1 ≤ i ≤ n, and a data range DR whose arity must be n. Such a class expression contains all those individuals that
    are connected by DPEi only to literals lti, 1 ≤ i ≤ n, such that each tuple ( lt1 , ..., ltn ) is in DR. A class
     expression of the form DataAllValuesFrom( DPE DR ) can be seen as a syntactic shortcut for the class expression
     DataMaxCardinality( 0 DPE DataComplementOf( DR ) ).
     (https://www.w3.org/TR/owl2-syntax/#Universal_Quantification_2)



   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3013



   .. py:method:: __repr__()


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataHasValue(property: owlapy.owl_property.OWLDataPropertyExpression, value: owlapy.owl_literal.OWLLiteral)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ], :py:obj:`OWLDataRestriction`


   A has-value class expression DataHasValue( DPE lt ) consists of a data property expression DPE and a literal lt,
   and it contains all those individuals that are connected by DPE to lt. Each such class expression can be seen as a
   syntactic shortcut for the class expression DataSomeValuesFrom( DPE DataOneOf( lt ) ).
   (https://www.w3.org/TR/owl2-syntax/#Literal_Value_Restriction)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3014



   .. py:method:: __repr__()


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataOneOf(values: Union[owlapy.owl_literal.OWLLiteral, Iterable[owlapy.owl_literal.OWLLiteral]])

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLDataRange`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ]


   An enumeration of literals DataOneOf( lt1 ... ltn ) contains exactly the explicitly specified literals lti with
   1 ≤ i ≤ n. The resulting data range has arity one. (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Literals)


   .. py:attribute:: type_index
      :type:  Final
      :value: 4003



   .. py:method:: values() -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the values that are in the oneOf.

      :returns: The values of this {@code DataOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __hash__()


   .. py:method:: __eq__(other)


   .. py:method:: __repr__()


.. py:class:: OWLDatatypeRestriction(type_: owlapy.owl_datatype.OWLDatatype, facet_restrictions: Union[OWLFacetRestriction, Iterable[OWLFacetRestriction]])

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLDataRange`


   A datatype restriction DatatypeRestriction( DT F1 lt1 ... Fn ltn ) consists of a unary datatype DT and n pairs
   ( Fi , lti ). The resulting data range is unary and is obtained by restricting the value space of DT according to
   the semantics of all ( Fi , vi ) (multiple pairs are interpreted conjunctively), where vi are the data values of
   the literals lti.
   (https://www.w3.org/TR/owl2-syntax/#Datatype_Restrictions)


   .. py:attribute:: __slots__
      :value: ('_type', '_facet_restrictions')



   .. py:attribute:: type_index
      :type:  Final
      :value: 4006



   .. py:method:: get_datatype() -> owlapy.owl_datatype.OWLDatatype


   .. py:method:: get_facet_restrictions() -> Sequence[OWLFacetRestriction]


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: __repr__()


.. py:class:: OWLFacetRestriction(facet: owlapy.vocab.OWLFacet, literal: Literals)

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   A facet restriction is used to restrict a particular datatype.


   .. py:attribute:: __slots__
      :value: ('_facet', '_literal')



   .. py:attribute:: type_index
      :type:  Final
      :value: 4007



   .. py:method:: get_facet() -> owlapy.vocab.OWLFacet


   .. py:method:: get_facet_value() -> owlapy.owl_literal.OWLLiteral


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


   .. py:method:: __repr__()


