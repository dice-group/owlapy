owlapy.utils
============

.. py:module:: owlapy.utils

.. autoapi-nested-parse::

   Owlapy utils.



Attributes
----------

.. autoapisummary::

   owlapy.utils.OWLNothing
   owlapy.utils.OWLThing
   owlapy.utils.measurer


Classes
-------

.. autoapisummary::

   owlapy.utils.OWLNamedIndividual
   owlapy.utils.HasIRI
   owlapy.utils.HasFiller
   owlapy.utils.HasCardinality
   owlapy.utils.HasOperands
   owlapy.utils.OWLLiteral
   owlapy.utils.OWLObjectInverseOf
   owlapy.utils.OWLObjectProperty
   owlapy.utils.OWLDataProperty
   owlapy.utils.OWLClassExpression
   owlapy.utils.OWLClass
   owlapy.utils.OWLObjectCardinalityRestriction
   owlapy.utils.OWLObjectComplementOf
   owlapy.utils.OWLRestriction
   owlapy.utils.OWLObjectSomeValuesFrom
   owlapy.utils.OWLObjectMinCardinality
   owlapy.utils.OWLObjectMaxCardinality
   owlapy.utils.OWLObjectExactCardinality
   owlapy.utils.OWLObjectHasSelf
   owlapy.utils.OWLDataMaxCardinality
   owlapy.utils.OWLDataMinCardinality
   owlapy.utils.OWLDataExactCardinality
   owlapy.utils.OWLDataHasValue
   owlapy.utils.OWLDataAllValuesFrom
   owlapy.utils.OWLDataSomeValuesFrom
   owlapy.utils.OWLObjectAllValuesFrom
   owlapy.utils.OWLDataOneOf
   owlapy.utils.OWLObjectIntersectionOf
   owlapy.utils.OWLDataCardinalityRestriction
   owlapy.utils.OWLNaryBooleanClassExpression
   owlapy.utils.OWLObjectUnionOf
   owlapy.utils.OWLObjectHasValue
   owlapy.utils.OWLDatatypeRestriction
   owlapy.utils.OWLFacetRestriction
   owlapy.utils.OWLObjectOneOf
   owlapy.utils.OWLDataComplementOf
   owlapy.utils.OWLDataUnionOf
   owlapy.utils.OWLDataIntersectionOf
   owlapy.utils.OWLNaryDataRange
   owlapy.utils.OWLDataRange
   owlapy.utils.OWLPropertyRange
   owlapy.utils.OWLObject
   owlapy.utils.OWLDatatype
   owlapy.utils.OWLClassExpressionLengthMetric
   owlapy.utils.EvaluatedDescriptionSet
   owlapy.utils.ConceptOperandSorter
   owlapy.utils.OperandSetTransform
   owlapy.utils.HasIndex
   owlapy.utils.OrderedOWLObject
   owlapy.utils.NNF
   owlapy.utils.TopLevelCNF
   owlapy.utils.TopLevelDNF
   owlapy.utils.LRUCache


Functions
---------

.. autoapisummary::

   owlapy.utils.get_expression_length
   owlapy.utils.combine_nary_expressions
   owlapy.utils.iter_count
   owlapy.utils.as_index


Module Contents
---------------

.. py:class:: OWLNamedIndividual(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLIndividual`, :py:obj:`owlapy.owl_object.OWLEntity`


   Named individuals are identified using an IRI. Since they are given an IRI, named individuals are entities.
   IRIs from the reserved vocabulary must not be used to identify named individuals in an OWL 2 DL ontology.

   (https://www.w3.org/TR/owl2-syntax/#Named_Individuals)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1005



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: HasIRI

   Simple class to access the IRI.


   .. py:attribute:: __slots__
      :value: ()



   .. py:property:: iri
      :type: IRI

      :abstractmethod:

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      :type: str

      :abstractmethod:

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: HasFiller

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_T`\ ]


   An interface to objects that have a filler.

   :param _T: Filler type.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_filler() -> _T
      :abstractmethod:


      Gets the filler for this restriction. In the case of an object restriction this will be an individual, in
      the case of a data restriction this will be a constant (data value). For quantified restriction this will be
      a class expression or a data range.

      :returns: the value



.. py:class:: HasCardinality

   An interface to objects that have a cardinality.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_cardinality() -> int
      :abstractmethod:


      Gets the cardinality of a restriction.

      :returns: The cardinality. A non-negative integer.



.. py:class:: HasOperands

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_T`\ ]


   An interface to objects that have a collection of operands.

   :param _T: Operand type.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: operands() -> Iterable[_T]
      :abstractmethod:


      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



.. py:class:: OWLLiteral

   Bases: :py:obj:`owlapy.owl_annotation.OWLAnnotationValue`


   Literals represent data values such as particular strings or integers. They are analogous to typed RDF
   literals and can also be understood as individuals denoting
   data values. Each literal consists of a lexical form, which is a string, and a datatype.

    (https://www.w3.org/TR/owl2-syntax/#Literals)



   .. py:attribute:: __slots__
      :value: ()



   .. py:attribute:: type_index
      :type:  Final
      :value: 4008



   .. py:method:: get_literal() -> str

      Gets the lexical value of this literal. Note that the language tag is not included.

      :returns: The lexical value of this literal.



   .. py:method:: is_boolean() -> bool

      Whether this literal is typed as boolean.



   .. py:method:: parse_boolean() -> bool

      Parses the lexical value of this literal into a bool. The lexical value of this literal should be in the
      lexical space of the boolean datatype ("http://www.w3.org/2001/XMLSchema#boolean").

      :returns: A bool value that is represented by this literal.



   .. py:method:: is_double() -> bool

      Whether this literal is typed as double.



   .. py:method:: parse_double() -> float

      Parses the lexical value of this literal into a double. The lexical value of this literal should be in the
      lexical space of the double datatype ("http://www.w3.org/2001/XMLSchema#double").

      :returns: A double value that is represented by this literal.



   .. py:method:: is_integer() -> bool

      Whether this literal is typed as integer.



   .. py:method:: parse_integer() -> int

      Parses the lexical value of this literal into an integer. The lexical value of this literal should be in the
      lexical space of the integer datatype ("http://www.w3.org/2001/XMLSchema#integer").

      :returns: An integer value that is represented by this literal.



   .. py:method:: is_string() -> bool

      Whether this literal is typed as string.



   .. py:method:: parse_string() -> str

      Parses the lexical value of this literal into a string. The lexical value of this literal should be in the
      lexical space of the string datatype ("http://www.w3.org/2001/XMLSchema#string").

      :returns: A string value that is represented by this literal.



   .. py:method:: is_date() -> bool

      Whether this literal is typed as date.



   .. py:method:: parse_date() -> datetime.date

      Parses the lexical value of this literal into a date. The lexical value of this literal should be in the
      lexical space of the date datatype ("http://www.w3.org/2001/XMLSchema#date").

      :returns: A date value that is represented by this literal.



   .. py:method:: is_datetime() -> bool

      Whether this literal is typed as dateTime.



   .. py:method:: parse_datetime() -> datetime.datetime

      Parses the lexical value of this literal into a datetime. The lexical value of this literal should be in the
      lexical space of the dateTime datatype ("http://www.w3.org/2001/XMLSchema#dateTime").

      :returns: A datetime value that is represented by this literal.



   .. py:method:: is_duration() -> bool

      Whether this literal is typed as duration.



   .. py:method:: parse_duration() -> pandas.Timedelta

      Parses the lexical value of this literal into a Timedelta. The lexical value of this literal should be in the
      lexical space of the duration datatype ("http://www.w3.org/2001/XMLSchema#duration").

      :returns: A Timedelta value that is represented by this literal.



   .. py:method:: is_literal() -> bool

      :returns: true if the annotation value is a literal



   .. py:method:: as_literal() -> OWLLiteral

      :returns: if the value is a literal, returns it. Return None otherwise



   .. py:method:: to_python() -> Literals


   .. py:method:: get_datatype() -> owlapy.owl_datatype.OWLDatatype
      :abstractmethod:


      Gets the OWLDatatype which types this literal.

      :returns: The OWLDatatype that types this literal.



.. py:class:: OWLObjectInverseOf(property: OWLObjectProperty)

   Bases: :py:obj:`OWLObjectPropertyExpression`


   Represents the inverse of a property expression (ObjectInverseOf). An inverse object property expression
   ObjectInverseOf( P ) connects an individual I1 with I2 if and only if the object property P connects I2 with I1.
   This can be used to refer to the inverse of a property, without actually naming the property.
   For example, consider the property hasPart, the inverse
   property of hasPart (isPartOf) can be referred to using this interface inverseOf(hasPart), which can be used in
   restrictions e.g. inverseOf(hasPart) some Car refers to the set of things that are part of at least one car.

   (https://www.w3.org/TR/owl2-syntax/#Inverse_Object_Properties)


   .. py:attribute:: __slots__
      :value: '_inverse_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1003



   .. py:method:: get_inverse() -> OWLObjectProperty

      Gets the property expression that this is the inverse of.

      :returns: The object property expression such that this object property expression is an inverse of it.



   .. py:method:: get_inverse_property() -> OWLObjectProperty

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLObjectPropertyExpression`, :py:obj:`OWLProperty`


   Represents an Object Property in the OWL 2 Specification. Object properties connect pairs of individuals.

   (https://www.w3.org/TR/owl2-syntax/#Object_Properties)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1002



   .. py:method:: get_named_property() -> OWLObjectProperty

      Get the named object property used in this property expression.

      :returns: P if this expression is either inv(P) or P.



   .. py:method:: get_inverse_property() -> OWLObjectInverseOf

      Obtains the property that corresponds to the inverse of this property.

      :returns: The inverse of this property. Note that this property will not necessarily be in the simplest form.



   .. py:method:: is_owl_top_object_property() -> bool

      Determines if this is the owl:topObjectProperty.

      :returns: topObjectProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLDataProperty(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`OWLDataPropertyExpression`, :py:obj:`OWLProperty`


   Represents a Data Property in the OWL 2 Specification. Data properties connect individuals with literals.
   In some knowledge representation systems, functional data properties are called attributes.

   (https://www.w3.org/TR/owl2-syntax/#Data_Properties)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 1004



   .. py:method:: is_owl_top_data_property() -> bool

      Determines if this is the owl:topDataProperty.

      :returns: topDataProperty.
      :rtype: True if this property is the owl



.. py:class:: OWLClassExpression

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLPropertyRange`


   OWL Class expressions represent sets of individuals by formally specifying conditions on the individuals' properties;
   individuals satisfying these conditions are said to be instances of the respective class expressions.
   In the structural specification of OWL 2, class expressions are represented by ClassExpression.
   (https://www.w3.org/TR/owl2-syntax/#Class_Expressions)


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: is_owl_thing() -> bool
      :abstractmethod:


      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl



   .. py:method:: is_owl_nothing() -> bool
      :abstractmethod:


      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.



   .. py:method:: get_object_complement_of() -> OWLObjectComplementOf
      :abstractmethod:


      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.



   .. py:method:: get_nnf() -> OWLClassExpression
      :abstractmethod:


      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: OWLClass(iri: Union[owlapy.iri.IRI, str])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`, :py:obj:`owlapy.owl_object.OWLEntity`


   An OWL 2 named Class. Classes can be understood as sets of individuals.
   (https://www.w3.org/TR/owl2-syntax/#Classes)


   .. py:attribute:: __slots__
      :value: ('_iri', '_is_nothing', '_is_thing')



   .. py:attribute:: type_index
      :type:  Final
      :value: 1001



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      Gets the string representation of this object

      :returns: The IRI as string


   .. py:property:: reminder
      :type: str

      The reminder of the IRI


   .. py:method:: is_owl_thing() -> bool

      Determines if this expression is the built in class owl:Thing. This method does not determine if the class
      is equivalent to owl:Thing.

      :returns: Thing.
      :rtype: True if this expression is owl



   .. py:method:: is_owl_nothing() -> bool

      Determines if this expression is the built in class owl:Nothing. This method does not determine if the class
      is equivalent to owl:Nothing.



   .. py:method:: get_object_complement_of() -> owlapy.class_expression.class_expression.OWLObjectComplementOf

      Gets the object complement of this class expression.

      :returns: A class expression that is the complement of this class expression.



   .. py:method:: get_nnf() -> OWLClass

      Gets the negation normal form of the complement of this expression.

      :returns: A expression that represents the NNF of the complement of this expression.



.. py:class:: OWLObjectCardinalityRestriction(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLCardinalityRestriction`\ [\ :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`\ ], :py:obj:`OWLQuantifiedObjectRestriction`


   Represents Object Property Cardinality Restrictions in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectComplementOf(op: OWLClassExpression)

   Bases: :py:obj:`OWLBooleanClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`OWLClassExpression`\ ]


   Represents an ObjectComplementOf class expression in the OWL 2 Specification.


   .. py:attribute:: __slots__
      :value: '_operand'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3003



   .. py:method:: get_operand() -> OWLClassExpression

      :returns: The wrapped expression.



   .. py:method:: operands() -> Iterable[OWLClassExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:data:: OWLNothing
   :type:  Final

.. py:class:: OWLRestriction

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLAnonymousClassExpression`


   Represents an Object Property Restriction or Data Property Restriction in the OWL 2 specification.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_property() -> owlapy.owl_property.OWLPropertyExpression
      :abstractmethod:


      :returns: Property being restricted.



   .. py:method:: is_data_restriction() -> bool

      Determines if this is a data restriction.

      :returns: True if this is a data restriction.



   .. py:method:: is_object_restriction() -> bool

      Determines if this is an object restriction.

      :returns: True if this is an object restriction.



.. py:data:: OWLThing
   :type:  Final

.. py:class:: OWLObjectSomeValuesFrom(property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedObjectRestriction`


   An existential class expression ObjectSomeValuesFrom( OPE CE ) consists of an object property expression OPE and
   a class expression CE, and it contains all those individuals that are connected by OPE to an individual that is
   an instance of CE.


   .. py:attribute:: __slots__
      :value: ('_property', '_filler')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3005



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectMinCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   A minimum cardinality expression ObjectMinCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
   to at least n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Minimum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3008



.. py:class:: OWLObjectMaxCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   A maximum cardinality expression ObjectMaxCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
    to at most n different individuals that are instances of CE.
    (https://www.w3.org/TR/owl2-syntax/#Maximum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3010



.. py:class:: OWLObjectExactCardinality(cardinality: int, property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLObjectCardinalityRestriction`


   An exact cardinality expression ObjectExactCardinality( n OPE CE ) consists of a nonnegative integer n, an object
    property expression OPE, and a class expression CE, and it contains all those individuals that are connected by
    to exactly n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Exact_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3009



   .. py:method:: as_intersection_of_min_max() -> owlapy.class_expression.nary_boolean_expression.OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R C) = >= 1 R C and <= 1 R C.



.. py:class:: OWLObjectHasSelf(property: owlapy.owl_property.OWLObjectPropertyExpression)

   Bases: :py:obj:`OWLObjectRestriction`


   A self-restriction ObjectHasSelf( OPE ) consists of an object property expression OPE,
   and it contains all those individuals that are connected by OPE to themselves.
   (https://www.w3.org/TR/owl2-syntax/#Self-Restriction)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3011



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDataMaxCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   A maximum cardinality expression ObjectMaxCardinality( n OPE CE ) consists of a nonnegative integer n, an object
   property expression OPE, and a class expression CE, and it contains all those individuals that are connected by OPE
   to at most n different individuals that are instances of CE.
   (https://www.w3.org/TR/owl2-syntax/#Maximum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3017



.. py:class:: OWLDataMinCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   A minimum cardinality expression DataMinCardinality( n DPE DR ) consists of a nonnegative integer n, a data
   property expression DPE, and a unary data range DR, and it contains all those individuals that are connected by
   DPE to at least n different literals in DR.
   (https://www.w3.org/TR/owl2-syntax/#Minimum_Cardinality)


   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3015



.. py:class:: OWLDataExactCardinality(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLDataCardinalityRestriction`


   An exact cardinality expression ObjectExactCardinality( n OPE CE ) consists of a nonnegative integer n, an
   object property expression OPE, and a class expression CE, and it contains all those individuals that are connected
    by OPE to exactly n different individuals that are instances of CE
    (https://www.w3.org/TR/owl2-syntax/#Exact_Cardinality)



   .. py:attribute:: __slots__
      :value: ('_cardinality', '_filler', '_property')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3016



   .. py:method:: as_intersection_of_min_max() -> owlapy.class_expression.nary_boolean_expression.OWLObjectIntersectionOf

      Obtains an equivalent form that is a conjunction of a min cardinality and max cardinality restriction.

      :returns: The semantically equivalent but structurally simpler form (= 1 R D) = >= 1 R D and <= 1 R D.



.. py:class:: OWLDataHasValue(property: owlapy.owl_property.OWLDataPropertyExpression, value: owlapy.owl_literal.OWLLiteral)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ], :py:obj:`OWLDataRestriction`


   A has-value class expression DataHasValue( DPE lt ) consists of a data property expression DPE and a literal lt,
   and it contains all those individuals that are connected by DPE to lt. Each such class expression can be seen as a
   syntactic shortcut for the class expression DataSomeValuesFrom( DPE DataOneOf( lt ) ).
   (https://www.w3.org/TR/owl2-syntax/#Literal_Value_Restriction)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3014



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataAllValuesFrom(property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedDataRestriction`


   A universal class expression DataAllValuesFrom( DPE1 ... DPEn DR ) consists of n data property expressions DPEi,
   1 ≤ i ≤ n, and a data range DR whose arity must be n. Such a class expression contains all those individuals that
    are connected by DPEi only to literals lti, 1 ≤ i ≤ n, such that each tuple ( lt1 , ..., ltn ) is in DR. A class
     expression of the form DataAllValuesFrom( DPE DR ) can be seen as a syntactic shortcut for the class expression
     DataMaxCardinality( 0 DPE DataComplementOf( DR ) ).
     (https://www.w3.org/TR/owl2-syntax/#Universal_Quantification_2)



   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3013



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataSomeValuesFrom(property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLQuantifiedDataRestriction`


   An existential class expression DataSomeValuesFrom( DPE1 ... DPEn DR ) consists of n data property expressions
   DPEi, 1 ≤ i ≤ n, and a data range DR whose arity must be n. Such a class expression contains all those individuals
   that are connected by DPEi to literals lti, 1 ≤ i ≤ n, such that the tuple ( lt1 , ..., ltn ) is in DR. A class
   expression of the form DataSomeValuesFrom( DPE DR ) can be seen as a syntactic shortcut for the class expression
   DataMinCardinality( 1 DPE DR ).
   (https://www.w3.org/TR/owl2-syntax/#Existential_Quantification_2)


   .. py:attribute:: __slots__
      :value: '_property'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3012



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLObjectAllValuesFrom(property: owlapy.owl_property.OWLObjectPropertyExpression, filler: owlapy.class_expression.class_expression.OWLClassExpression)

   Bases: :py:obj:`OWLQuantifiedObjectRestriction`


   A universal class expression ObjectAllValuesFrom( OPE CE ) consists of an object property expression OPE and a
   class expression CE, and it contains all those individuals that are connected by OPE only to
   individuals that are instances of CE. (https://www.w3.org/TR/owl2-syntax/#Universal_Quantification)


   .. py:attribute:: __slots__
      :value: ('_property', '_filler')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3006



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



.. py:class:: OWLDataOneOf(values: Union[owlapy.owl_literal.OWLLiteral, Iterable[owlapy.owl_literal.OWLLiteral]])

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLDataRange`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_literal.OWLLiteral`\ ]


   An enumeration of literals DataOneOf( lt1 ... ltn ) contains exactly the explicitly specified literals lti with
   1 ≤ i ≤ n. The resulting data range has arity one. (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Literals)


   .. py:attribute:: type_index
      :type:  Final
      :value: 4003



   .. py:method:: values() -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the values that are in the oneOf.

      :returns: The values of this {@code DataOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectIntersectionOf(operands: Iterable[owlapy.class_expression.class_expression.OWLClassExpression])

   Bases: :py:obj:`OWLNaryBooleanClassExpression`


   An intersection class expression ObjectIntersectionOf( CE1 ... CEn ) contains all individuals that are instances
   of all class expressions CEi for 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Intersection_of_Class_Expressions)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3001



.. py:class:: OWLDataCardinalityRestriction(cardinality: int, property: owlapy.owl_property.OWLDataPropertyExpression, filler: owlapy.owl_data_ranges.OWLDataRange)

   Bases: :py:obj:`OWLCardinalityRestriction`\ [\ :py:obj:`owlapy.owl_data_ranges.OWLDataRange`\ ], :py:obj:`OWLQuantifiedDataRestriction`, :py:obj:`OWLDataRestriction`


   Represents Data Property Cardinality Restrictions.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_property() -> owlapy.owl_property.OWLDataPropertyExpression

      :returns: Property being restricted.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLNaryBooleanClassExpression(operands: Iterable[owlapy.class_expression.class_expression.OWLClassExpression])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLBooleanClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.class_expression.class_expression.OWLClassExpression`\ ]


   OWLNaryBooleanClassExpression.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: operands() -> Iterable[owlapy.class_expression.class_expression.OWLClassExpression]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLObjectUnionOf(operands: Iterable[owlapy.class_expression.class_expression.OWLClassExpression])

   Bases: :py:obj:`OWLNaryBooleanClassExpression`


   A union class expression ObjectUnionOf( CE1 ... CEn ) contains all individuals that are instances
   of at least one class expression CEi for 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Union_of_Class_Expressions)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3002



.. py:class:: OWLObjectHasValue(property: owlapy.owl_property.OWLObjectPropertyExpression, individual: owlapy.owl_individual.OWLIndividual)

   Bases: :py:obj:`OWLHasValueRestriction`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ], :py:obj:`OWLObjectRestriction`


   A has-value class expression ObjectHasValue( OPE a ) consists of an object property expression OPE and an
   individual a, and it contains all those individuals that are connected by OPE to a. Each such class expression
   can be seen as a syntactic shortcut for the class expression ObjectSomeValuesFrom( OPE ObjectOneOf( a ) ).
   (https://www.w3.org/TR/owl2-syntax/#Individual_Value_Restriction)


   .. py:attribute:: __slots__
      :value: ('_property', '_v')



   .. py:attribute:: type_index
      :type:  Final
      :value: 3007



   .. py:method:: get_property() -> owlapy.owl_property.OWLObjectPropertyExpression

      :returns: Property being restricted.



   .. py:method:: as_some_values_from() -> owlapy.class_expression.class_expression.OWLClassExpression

      A convenience method that obtains this restriction as an existential restriction with a nominal filler.

      :returns: The existential equivalent of this value restriction. simp(HasValue(p a)) = some(p {a}).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDatatypeRestriction(type_: owlapy.owl_datatype.OWLDatatype, facet_restrictions: Union[OWLFacetRestriction, Iterable[OWLFacetRestriction]])

   Bases: :py:obj:`owlapy.owl_data_ranges.OWLDataRange`


   A datatype restriction DatatypeRestriction( DT F1 lt1 ... Fn ltn ) consists of a unary datatype DT and n pairs
   ( Fi , lti ). The resulting data range is unary and is obtained by restricting the value space of DT according to
   the semantics of all ( Fi , vi ) (multiple pairs are interpreted conjunctively), where vi are the data values of
   the literals lti.
   (https://www.w3.org/TR/owl2-syntax/#Datatype_Restrictions)


   .. py:attribute:: __slots__
      :value: ('_type', '_facet_restrictions')



   .. py:attribute:: type_index
      :type:  Final
      :value: 4006



   .. py:method:: get_datatype() -> owlapy.owl_datatype.OWLDatatype


   .. py:method:: get_facet_restrictions() -> Sequence[OWLFacetRestriction]


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLFacetRestriction(facet: owlapy.vocab.OWLFacet, literal: Literals)

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   A facet restriction is used to restrict a particular datatype.


   .. py:attribute:: __slots__
      :value: ('_facet', '_literal')



   .. py:attribute:: type_index
      :type:  Final
      :value: 4007



   .. py:method:: get_facet() -> owlapy.vocab.OWLFacet


   .. py:method:: get_facet_value() -> owlapy.owl_literal.OWLLiteral


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLObjectOneOf(values: Union[owlapy.owl_individual.OWLIndividual, Iterable[owlapy.owl_individual.OWLIndividual]])

   Bases: :py:obj:`owlapy.class_expression.class_expression.OWLAnonymousClassExpression`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`owlapy.owl_individual.OWLIndividual`\ ]


   An enumeration of individuals ObjectOneOf( a1 ... an ) contains exactly the individuals ai with 1 ≤ i ≤ n.
   (https://www.w3.org/TR/owl2-syntax/#Enumeration_of_Individuals)


   .. py:attribute:: __slots__
      :value: '_values'



   .. py:attribute:: type_index
      :type:  Final
      :value: 3004



   .. py:method:: individuals() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the individuals that are in the oneOf. These individuals represent the exact instances (extension)
      of this class expression.

      :returns: The individuals that are the values of this {@code ObjectOneOf} class expression.



   .. py:method:: operands() -> Iterable[owlapy.owl_individual.OWLIndividual]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: as_object_union_of() -> owlapy.class_expression.class_expression.OWLClassExpression

      Simplifies this enumeration to a union of singleton nominals.

      :returns: This enumeration in a more standard DL form.
                simp({a}) = {a} simp({a0, ... , {an}) = unionOf({a0}, ... , {an})



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OWLDataComplementOf(data_range: OWLDataRange)

   Bases: :py:obj:`OWLDataRange`


   A complement data range DataComplementOf( DR ) contains all tuples of literals that are not contained in the
   data range DR. The resulting data range has the arity equal to the arity of DR.

   (https://www.w3.org/TR/owl2-syntax/#Complement_of_Data_Ranges)


   .. py:attribute:: type_index
      :type:  Final
      :value: 4002



   .. py:method:: get_data_range() -> OWLDataRange

      :returns: The wrapped data range.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataUnionOf(operands: Iterable[OWLDataRange])

   Bases: :py:obj:`OWLNaryDataRange`


   A union data range DataUnionOf( DR1 ... DRn ) contains all tuples of literals that are contained in the at least
   one data range DRi for 1 ≤ i ≤ n. All data ranges DRi must be of the same arity, and the resulting data range is of
   that arity as well.

   (https://www.w3.org/TR/owl2-syntax/#Union_of_Data_Ranges)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4005



.. py:class:: OWLDataIntersectionOf(operands: Iterable[OWLDataRange])

   Bases: :py:obj:`OWLNaryDataRange`


   An intersection data range DataIntersectionOf( DR1 ... DRn ) contains all tuples of literals that are contained
   in each data range DRi for 1 ≤ i ≤ n. All data ranges DRi must be of the same arity, and the resulting data range
   is of that arity as well.

   (https://www.w3.org/TR/owl2-syntax/#Intersection_of_Data_Ranges)


   .. py:attribute:: __slots__
      :value: '_operands'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4004



.. py:class:: OWLNaryDataRange(operands: Iterable[OWLDataRange])

   Bases: :py:obj:`OWLDataRange`, :py:obj:`owlapy.meta_classes.HasOperands`\ [\ :py:obj:`OWLDataRange`\ ]


   OWLNaryDataRange.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: operands() -> Iterable[OWLDataRange]

      Gets the operands - e.g., the individuals in a sameAs axiom, or the classes in an equivalent
      classes axiom.

      :returns: The operands.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).



.. py:class:: OWLDataRange

   Bases: :py:obj:`OWLPropertyRange`


   Represents a DataRange in the OWL 2 Specification.


.. py:class:: OWLPropertyRange

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   OWL Objects that can be the ranges of properties.


.. py:class:: OWLObject

   Base interface for OWL objects


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: __eq__(other)
      :abstractmethod:


      Return self==value.



   .. py:method:: __hash__()
      :abstractmethod:


      Return hash(self).



   .. py:method:: __repr__()
      :abstractmethod:


      Return repr(self).



   .. py:method:: is_anonymous() -> bool


.. py:class:: OWLDatatype(iri: Union[owlapy.iri.IRI, owlapy.meta_classes.HasIRI])

   Bases: :py:obj:`owlapy.owl_object.OWLEntity`, :py:obj:`owlapy.owl_data_ranges.OWLDataRange`


   Datatypes are entities that refer to sets of data values. Thus, datatypes are analogous to classes,
   the main difference being that the former contain data values such as strings and numbers, rather than individuals.
   Datatypes are a kind of data range, which allows them to be used in restrictions. Each data range is associated
   with an arity; for datatypes, the arity is always one. The built-in datatype rdfs:Literal denotes any set of data
   values that contains the union of the value spaces of all datatypes.

   (https://www.w3.org/TR/owl2-syntax/#Datatypes)


   .. py:attribute:: __slots__
      :value: '_iri'



   .. py:attribute:: type_index
      :type:  Final
      :value: 4001



   .. py:property:: iri
      :type: owlapy.iri.IRI

      Gets the IRI of this object.

      :returns: The IRI of this object.


   .. py:property:: str
      :type: str

      Gets the string representation of this object

      :returns: The IRI as string


.. py:class:: OWLClassExpressionLengthMetric(*, class_length: int, object_intersection_length: int, object_union_length: int, object_complement_length: int, object_some_values_length: int, object_all_values_length: int, object_has_value_length: int, object_cardinality_length: int, object_has_self_length: int, object_one_of_length: int, data_some_values_length: int, data_all_values_length: int, data_has_value_length: int, data_cardinality_length: int, object_property_length: int, object_inverse_length: int, data_property_length: int, datatype_length: int, data_one_of_length: int, data_complement_length: int, data_intersection_length: int, data_union_length: int)

   Length calculation of OWLClassExpression

   :param class_length: Class: "C"
   :param object_intersection_length: Intersection: A ⨅ B
   :param object_union_length: Union: A ⨆ B
   :param object_complement_length: Complement: ¬ C
   :param object_some_values_length: Obj. Some Values: ∃ r.C
   :param object_all_values_length: Obj. All Values: ∀ r.C
   :param object_has_value_length: Obj. Has Value: ∃ r.{I}
   :param object_cardinality_length: Obj. Cardinality restriction: ≤n r.C
   :param object_has_self_length: Obj. Self restriction: ∃ r.Self
   :param object_one_of_length: Obj. One of: ∃ r.{X,Y,Z}
   :param data_some_values_length: Data Some Values: ∃ p.t
   :param data_all_values_length: Data All Values: ∀ p.t
   :param data_has_value_length: Data Has Value: ∃ p.{V}
   :param data_cardinality_length: Data Cardinality restriction: ≤n r.t
   :param object_property_length: Obj. Property: ∃ r.C
   :param object_inverse_length: Inverse property: ∃ r⁻.C
   :param data_property_length: Data Property: ∃ p.t
   :param datatype_length: Datatype: ^^datatype
   :param data_one_of_length: Data One of: ∃ p.{U,V,W}
   :param data_complement_length: Data Complement: ¬datatype
   :param data_intersection_length: Data Intersection: datatype ⨅ datatype
   :param data_union_length: Data Union: datatype ⨆ datatype


   .. py:attribute:: __slots__
      :value: ('class_length', 'object_intersection_length', 'object_union_length',...



   .. py:attribute:: class_length
      :type:  int


   .. py:attribute:: object_intersection_length
      :type:  int


   .. py:attribute:: object_union_length
      :type:  int


   .. py:attribute:: object_complement_length
      :type:  int


   .. py:attribute:: object_some_values_length
      :type:  int


   .. py:attribute:: object_all_values_length
      :type:  int


   .. py:attribute:: object_has_value_length
      :type:  int


   .. py:attribute:: object_cardinality_length
      :type:  int


   .. py:attribute:: object_has_self_length
      :type:  int


   .. py:attribute:: object_one_of_length
      :type:  int


   .. py:attribute:: data_some_values_length
      :type:  int


   .. py:attribute:: data_all_values_length
      :type:  int


   .. py:attribute:: data_has_value_length
      :type:  int


   .. py:attribute:: data_cardinality_length
      :type:  int


   .. py:attribute:: object_property_length
      :type:  int


   .. py:attribute:: object_inverse_length
      :type:  int


   .. py:attribute:: data_property_length
      :type:  int


   .. py:attribute:: datatype_length
      :type:  int


   .. py:attribute:: data_one_of_length
      :type:  int


   .. py:attribute:: data_complement_length
      :type:  int


   .. py:attribute:: data_intersection_length
      :type:  int


   .. py:attribute:: data_union_length
      :type:  int


   .. py:method:: get_default() -> OWLClassExpressionLengthMetric
      :staticmethod:



   .. py:method:: length(o: owlapy.owl_object.OWLObject) -> int
      :abstractmethod:



.. py:data:: measurer

.. py:function:: get_expression_length(ce: owlapy.class_expression.OWLClassExpression) -> int

.. py:class:: EvaluatedDescriptionSet(ordering: Callable[[_N], _O], max_size: int = 10)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_N`\ , :py:obj:`_O`\ ]


   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default


   .. py:attribute:: __slots__
      :value: ('items', '_max_size', '_Ordering')



   .. py:attribute:: items
      :type:  SortedSet[_N]


   .. py:method:: maybe_add(node: _N)


   .. py:method:: clean()


   .. py:method:: worst()


   .. py:method:: best()


   .. py:method:: best_quality_value() -> float


   .. py:method:: __iter__() -> Iterable[_N]


.. py:class:: ConceptOperandSorter

   .. py:method:: sort(o: _O) -> _O
      :abstractmethod:



.. py:class:: OperandSetTransform

   .. py:method:: simplify(o: owlapy.class_expression.OWLClassExpression) -> owlapy.class_expression.OWLClassExpression


.. py:class:: HasIndex

   Bases: :py:obj:`Protocol`


   Interface for types with an index; this is used to group objects by type when sorting.


   .. py:attribute:: type_index
      :type:  ClassVar[int]


   .. py:method:: __eq__(other)

      Return self==value.



.. py:class:: OrderedOWLObject(o: _HasIndex)

   Holder of OWL Objects that can be used for Python sorted.

   The Ordering is dependent on the type_index of the impl. classes recursively followed by all components of the
   OWL Object.

   .. attribute:: o

      OWL object.


   .. py:attribute:: __slots__
      :value: ('o', '_chain')



   .. py:attribute:: o
      :type:  _HasIndex


   .. py:method:: __lt__(other)

      Return self<value.



   .. py:method:: __eq__(other)

      Return self==value.



.. py:class:: NNF

   This class contains functions to transform a Class Expression into Negation Normal Form.


   .. py:method:: get_class_nnf(ce: owlapy.class_expression.OWLClassExpression, negated: bool = False) -> owlapy.class_expression.OWLClassExpression
      :abstractmethod:


      Convert a Class Expression to Negation Normal Form. Operands will be sorted.

      :param ce: Class Expression.
      :param negated: Whether the result should be negated.

      :returns: Class Expression in Negation Normal Form.



.. py:class:: TopLevelCNF

   This class contains functions to transform a class expression into Top-Level Conjunctive Normal Form.


   .. py:method:: get_top_level_cnf(ce: owlapy.class_expression.OWLClassExpression) -> owlapy.class_expression.OWLClassExpression

      Convert a class expression into Top-Level Conjunctive Normal Form. Operands will be sorted.

      :param ce: Class Expression.

      :returns: Class Expression in Top-Level Conjunctive Normal Form.



.. py:class:: TopLevelDNF

   This class contains functions to transform a class expression into Top-Level Disjunctive Normal Form.


   .. py:method:: get_top_level_dnf(ce: owlapy.class_expression.OWLClassExpression) -> owlapy.class_expression.OWLClassExpression

      Convert a class expression into Top-Level Disjunctive Normal Form. Operands will be sorted.

      :param ce: Class Expression.

      :returns: Class Expression in Top-Level Disjunctive Normal Form.



.. py:function:: combine_nary_expressions(ce: owlapy.class_expression.OWLClassExpression) -> owlapy.class_expression.OWLClassExpression
                 combine_nary_expressions(ce: owlapy.owl_data_ranges.OWLDataRange) -> owlapy.owl_data_ranges.OWLDataRange

   Shortens an OWLClassExpression or OWLDataRange by combining all nested nary expressions of the same type.
   Operands will be sorted.

   E.g. OWLObjectUnionOf(A, OWLObjectUnionOf(C, B)) -> OWLObjectUnionOf(A, B, C).


.. py:function:: iter_count(i: Iterable) -> int

   Count the number of elements in an iterable.


.. py:function:: as_index(o: owlapy.owl_object.OWLObject) -> HasIndex

   Cast OWL Object to HasIndex.


.. py:class:: LRUCache(maxsize: Optional[int] = None)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_K`\ , :py:obj:`_V`\ ]


   Constants shares by all lru cache instances.

   Adapted from functools.lru_cache.

   .. attribute:: sentinel

      Unique object used to signal cache misses.

   .. attribute:: PREV

      Name for the link field 0.

   .. attribute:: NEXT

      Name for the link field 1.

   .. attribute:: KEY

      Name for the link field 2.

   .. attribute:: RESULT

      Name for the link field 3.


   .. py:attribute:: sentinel


   .. py:method:: __contains__(item: _K) -> bool


   .. py:method:: __getitem__(item: _K) -> _V


   .. py:method:: __setitem__(key: _K, value: _V)


   .. py:method:: cache_info()

      Report cache statistics.



   .. py:method:: cache_clear()

      Clear the cache and cache statistics.



