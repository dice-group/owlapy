:py:mod:`owlapy.parser`
=======================

.. py:module:: owlapy.parser

.. autoapi-nested-parse::

   String to OWL parsers.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   owlapy.parser.ManchesterOWLSyntaxParser
   owlapy.parser.DLSyntaxParser



Functions
~~~~~~~~~

.. autoapisummary::

   owlapy.parser.dl_to_owl_expression
   owlapy.parser.manchester_to_owl_expression



Attributes
~~~~~~~~~~

.. autoapisummary::

   owlapy.parser.MANCHESTER_GRAMMAR
   owlapy.parser.DL_GRAMMAR
   owlapy.parser.DLparser
   owlapy.parser.ManchesterParser


.. py:data:: MANCHESTER_GRAMMAR

   

.. py:class:: ManchesterOWLSyntaxParser(namespace: Optional[Union[str, owlapy.namespaces.Namespaces]] = None, grammar=None)


   Bases: :py:obj:`parsimonious.nodes.NodeVisitor`, :py:obj:`owlapy.owl_object.OWLObjectParser`

   Manchester Syntax parser to parse strings to OWLClassExpressions.
   Following: https://www.w3.org/TR/owl2-manchester-syntax.

   .. py:attribute:: slots
      :value: ('ns', 'grammar')

      

   .. py:attribute:: ns
      :type: Optional[Union[str, owlapy.namespaces.Namespaces]]

      

   .. py:method:: parse_expression(expression_str: str) -> owlapy.class_expression.OWLClassExpression

      Parse a string to an OWL Object.

      :param expression_str: Expression string.
      :type expression_str: str

      :returns: The OWL Object which is represented by the string.


   .. py:method:: visit_union(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: visit_intersection(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: visit_primary(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: visit_some_only_res(node, children) -> owlapy.class_expression.OWLQuantifiedObjectRestriction


   .. py:method:: visit_cardinality_res(node, children) -> owlapy.class_expression.OWLObjectCardinalityRestriction


   .. py:method:: visit_value_res(node, children) -> owlapy.class_expression.OWLObjectHasValue


   .. py:method:: visit_has_self(node, children) -> owlapy.class_expression.OWLObjectHasSelf


   .. py:method:: visit_object_property(node, children) -> owlapy.owl_property.OWLObjectPropertyExpression


   .. py:method:: visit_class_expression(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: visit_individual_list(node, children) -> owlapy.class_expression.OWLObjectOneOf


   .. py:method:: visit_data_primary(node, children) -> owlapy.data_ranges.OWLDataRange


   .. py:method:: visit_data_some_only_res(node, children) -> owlapy.class_expression.OWLQuantifiedDataRestriction


   .. py:method:: visit_data_cardinality_res(node, children) -> owlapy.class_expression.OWLDataCardinalityRestriction


   .. py:method:: visit_data_value_res(node, children) -> owlapy.class_expression.OWLDataHasValue


   .. py:method:: visit_data_union(node, children) -> owlapy.data_ranges.OWLDataRange


   .. py:method:: visit_data_intersection(node, children) -> owlapy.data_ranges.OWLDataRange


   .. py:method:: visit_literal_list(node, children) -> owlapy.class_expression.OWLDataOneOf


   .. py:method:: visit_data_parentheses(node, children) -> owlapy.data_ranges.OWLDataRange


   .. py:method:: visit_datatype_restriction(node, children) -> owlapy.class_expression.OWLDatatypeRestriction


   .. py:method:: visit_facet_restrictions(node, children) -> List[owlapy.class_expression.OWLFacetRestriction]


   .. py:method:: visit_facet_restriction(node, children) -> owlapy.class_expression.OWLFacetRestriction


   .. py:method:: visit_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_typed_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_string_literal_language(node, children)
      :abstractmethod:


   .. py:method:: visit_string_literal_no_language(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_quoted_string(node, children) -> str


   .. py:method:: visit_float_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_decimal_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_integer_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_boolean_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_datetime_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_duration_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_date_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_non_negative_integer(node, children) -> int


   .. py:method:: visit_datatype_iri(node, children) -> str


   .. py:method:: visit_datatype(node, children) -> owlapy.owl_datatype.OWLDatatype


   .. py:method:: visit_facet(node, children) -> owlapy.vocab.OWLFacet


   .. py:method:: visit_class_iri(node, children) -> owlapy.class_expression.OWLClass


   .. py:method:: visit_individual_iri(node, children) -> owlapy.owl_individual.OWLNamedIndividual


   .. py:method:: visit_object_property_iri(node, children) -> owlapy.owl_property.OWLObjectProperty


   .. py:method:: visit_data_property_iri(node, children) -> owlapy.owl_property.OWLDataProperty


   .. py:method:: visit_iri(node, children) -> owlapy.iri.IRI


   .. py:method:: visit_full_iri(node, children) -> owlapy.iri.IRI


   .. py:method:: visit_abbreviated_iri(node, children)
      :abstractmethod:


   .. py:method:: visit_simple_iri(node, children) -> owlapy.iri.IRI


   .. py:method:: visit_parentheses(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: generic_visit(node, children)

      Default visitor method

      :arg node: The node we're visiting
      :arg visited_children: The results of visiting the children of that
          node, in a list

      I'm not sure there's an implementation of this that makes sense across
      all (or even most) use cases, so we leave it to subclasses to implement
      for now.




.. py:data:: DL_GRAMMAR

   

.. py:class:: DLSyntaxParser(namespace: Optional[Union[str, owlapy.namespaces.Namespaces]] = None, grammar=None)


   Bases: :py:obj:`parsimonious.nodes.NodeVisitor`, :py:obj:`owlapy.owl_object.OWLObjectParser`

   Description Logic Syntax parser to parse strings to OWLClassExpressions.

   .. py:attribute:: slots
      :value: ('ns', 'grammar')

      

   .. py:attribute:: ns
      :type: Optional[Union[str, owlapy.namespaces.Namespaces]]

      

   .. py:method:: parse_expression(expression_str: str) -> owlapy.class_expression.OWLClassExpression

      Parse a string to an OWL Object.

      :param expression_str: Expression string.
      :type expression_str: str

      :returns: The OWL Object which is represented by the string.


   .. py:method:: visit_union(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: visit_intersection(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: visit_primary(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: visit_some_only_res(node, children) -> owlapy.class_expression.OWLQuantifiedObjectRestriction


   .. py:method:: visit_cardinality_res(node, children) -> owlapy.class_expression.OWLObjectCardinalityRestriction


   .. py:method:: visit_value_res(node, children) -> owlapy.class_expression.OWLObjectHasValue


   .. py:method:: visit_has_self(node, children) -> owlapy.class_expression.OWLObjectHasSelf


   .. py:method:: visit_object_property(node, children) -> owlapy.owl_property.OWLObjectPropertyExpression


   .. py:method:: visit_class_expression(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: visit_individual_list(node, children) -> owlapy.class_expression.OWLObjectOneOf


   .. py:method:: visit_data_primary(node, children) -> owlapy.data_ranges.OWLDataRange


   .. py:method:: visit_data_some_only_res(node, children) -> owlapy.class_expression.OWLQuantifiedDataRestriction


   .. py:method:: visit_data_cardinality_res(node, children) -> owlapy.class_expression.OWLDataCardinalityRestriction


   .. py:method:: visit_data_value_res(node, children) -> owlapy.class_expression.OWLDataHasValue


   .. py:method:: visit_data_union(node, children) -> owlapy.data_ranges.OWLDataRange


   .. py:method:: visit_data_intersection(node, children) -> owlapy.data_ranges.OWLDataRange


   .. py:method:: visit_literal_list(node, children) -> owlapy.class_expression.OWLDataOneOf


   .. py:method:: visit_data_parentheses(node, children) -> owlapy.data_ranges.OWLDataRange


   .. py:method:: visit_datatype_restriction(node, children) -> owlapy.class_expression.OWLDatatypeRestriction


   .. py:method:: visit_facet_restrictions(node, children) -> List[owlapy.class_expression.OWLFacetRestriction]


   .. py:method:: visit_facet_restriction(node, children) -> owlapy.class_expression.OWLFacetRestriction


   .. py:method:: visit_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_typed_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_string_literal_language(node, children)
      :abstractmethod:


   .. py:method:: visit_string_literal_no_language(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_quoted_string(node, children) -> str


   .. py:method:: visit_float_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_decimal_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_integer_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_boolean_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_datetime_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_duration_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_date_literal(node, children) -> owlapy.owl_literal.OWLLiteral


   .. py:method:: visit_non_negative_integer(node, children) -> int


   .. py:method:: visit_datatype_iri(node, children) -> str


   .. py:method:: visit_datatype(node, children) -> owlapy.owl_datatype.OWLDatatype


   .. py:method:: visit_facet(node, children) -> owlapy.vocab.OWLFacet


   .. py:method:: visit_class_iri(node, children) -> owlapy.class_expression.OWLClass


   .. py:method:: visit_individual_iri(node, children) -> owlapy.owl_individual.OWLNamedIndividual


   .. py:method:: visit_object_property_iri(node, children) -> owlapy.owl_property.OWLObjectProperty


   .. py:method:: visit_data_property_iri(node, children) -> owlapy.owl_property.OWLDataProperty


   .. py:method:: visit_iri(node, children) -> owlapy.iri.IRI


   .. py:method:: visit_full_iri(node, children) -> owlapy.iri.IRI


   .. py:method:: visit_abbreviated_iri(node, children)
      :abstractmethod:


   .. py:method:: visit_simple_iri(node, children) -> owlapy.iri.IRI


   .. py:method:: visit_parentheses(node, children) -> owlapy.class_expression.OWLClassExpression


   .. py:method:: generic_visit(node, children)

      Default visitor method

      :arg node: The node we're visiting
      :arg visited_children: The results of visiting the children of that
          node, in a list

      I'm not sure there's an implementation of this that makes sense across
      all (or even most) use cases, so we leave it to subclasses to implement
      for now.




.. py:data:: DLparser

   

.. py:data:: ManchesterParser

   

.. py:function:: dl_to_owl_expression(dl_expression: str, namespace: str)


.. py:function:: manchester_to_owl_expression(manchester_expression: str, namespace: str)


