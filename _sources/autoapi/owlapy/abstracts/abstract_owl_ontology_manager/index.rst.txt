owlapy.abstracts.abstract_owl_ontology_manager
==============================================

.. py:module:: owlapy.abstracts.abstract_owl_ontology_manager


Classes
-------

.. autoapisummary::

   owlapy.abstracts.abstract_owl_ontology_manager.OWLOntologyChange
   owlapy.abstracts.abstract_owl_ontology_manager.OWLOntologyManager


Module Contents
---------------

.. py:class:: OWLOntologyChange(ontology: owlapy.abstracts.abstract_owl_ontology.OWLOntology)

   Represents an ontology change.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_ontology() -> owlapy.abstracts.abstract_owl_ontology.OWLOntology

      Gets the ontology that the change is/was applied to.

      :returns: The ontology that the change is applicable to.



.. py:class:: OWLOntologyManager

   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.


   .. py:method:: create_ontology(iri: Union[str, owlapy.iri.IRI]) -> owlapy.abstracts.abstract_owl_ontology.OWLOntology
      :abstractmethod:


      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created, can also be a string.

      :returns: The newly created ontology.



   .. py:method:: load_ontology(iri: Union[owlapy.iri.IRI, str]) -> owlapy.abstracts.abstract_owl_ontology.OWLOntology
      :abstractmethod:


      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri:
                  The IRI that identifies the ontology, can also be a string.
                   It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.



   .. py:method:: apply_change(change: OWLOntologyChange)
      :abstractmethod:


      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.



