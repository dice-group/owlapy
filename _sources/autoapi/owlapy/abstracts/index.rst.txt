owlapy.abstracts
================

.. py:module:: owlapy.abstracts


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/owlapy/abstracts/abstract_owl_ontology/index
   /autoapi/owlapy/abstracts/abstract_owl_ontology_manager/index
   /autoapi/owlapy/abstracts/abstract_owl_reasoner/index


Classes
-------

.. autoapisummary::

   owlapy.abstracts.AbstractOWLOntologyManager
   owlapy.abstracts.AbstractOWLOntologyChange
   owlapy.abstracts.AbstractOWLOntology
   owlapy.abstracts.AbstractOWLReasoner
   owlapy.abstracts.AbstractOWLReasonerEx


Package Contents
----------------

.. py:class:: AbstractOWLOntologyManager

   An OWLOntologyManager manages a set of ontologies. It is the main point for creating, loading and accessing
   ontologies.


   .. py:method:: create_ontology(iri: Union[str, owlapy.iri.IRI]) -> owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology
      :abstractmethod:


      Creates a new (empty) ontology that that has the specified ontology IRI (and no version IRI).

      :param iri: The IRI of the ontology to be created, can also be a string.

      :returns: The newly created ontology.



   .. py:method:: load_ontology(iri: Union[owlapy.iri.IRI, str]) -> owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology
      :abstractmethod:


      Loads an ontology that is assumed to have the specified ontology IRI as its IRI or version IRI. The ontology
      IRI will be mapped to an ontology document IRI.

      :param iri:
                  The IRI that identifies the ontology, can also be a string.
                   It is expected that the ontology will also have this IRI
                  (although the OWL API should tolerate situations where this is not the case).

      :returns: The OWLOntology representation of the ontology that was loaded.



   .. py:method:: apply_change(change: AbstractOWLOntologyChange)
      :abstractmethod:


      A convenience method that applies just one change to an ontology. When this method is used through an
      OWLOntologyManager implementation, the instance used should be the one that the ontology returns through the
      get_owl_ontology_manager() call.

      :param change: The change to be applied.

      :raises ChangeApplied.UNSUCCESSFULLY: if the change was not applied successfully.



.. py:class:: AbstractOWLOntologyChange(ontology: owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology)

   Represents an ontology change.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: get_ontology() -> owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology

      Gets the ontology that the change is/was applied to.

      :returns: The ontology that the change is applicable to.



.. py:class:: AbstractOWLOntology

   Bases: :py:obj:`owlapy.owl_object.OWLObject`


   Represents an OWL 2 Ontology  in the OWL 2 specification.

   An OWLOntology consists of a possibly empty set of OWLAxioms and a possibly empty set of OWLAnnotations.
   An ontology can have an ontology IRI which can be used to identify the ontology. If it has an ontology IRI then
   it may also have an ontology version IRI. Since OWL 2, an ontology need not have an ontology IRI. (See the OWL 2
   Structural Specification).

   An ontology cannot be modified directly. Changes must be applied via its OWLOntologyManager.


   .. py:attribute:: __slots__
      :value: ()



   .. py:attribute:: type_index
      :type:  Final
      :value: 1



   .. py:method:: classes_in_signature() -> Iterable[owlapy.class_expression.OWLClass]
      :abstractmethod:


      Gets the classes in the signature of this object.

      :returns: Classes in the signature of this object.



   .. py:method:: data_properties_in_signature() -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Get the data properties that are in the signature of this object.

      :returns: Data properties that are in the signature of this object.



   .. py:method:: object_properties_in_signature() -> Iterable[owlapy.owl_property.OWLObjectProperty]
      :abstractmethod:


      A convenience method that obtains the object properties that are in the signature of this object.

      :returns: Object properties that are in the signature of this object.



   .. py:method:: individuals_in_signature() -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      A convenience method that obtains the individuals that are in the signature of this object.

      :returns: Individuals that are in the signature of this object.



   .. py:method:: equivalent_classes_axioms(c: owlapy.class_expression.OWLClass) -> Iterable[owlapy.owl_axiom.OWLEquivalentClassesAxiom]
      :abstractmethod:


      Gets all of the equivalent axioms in this ontology that contain the specified class as an operand.

      :param c: The class for which the EquivalentClasses axioms should be retrieved.

      :returns: EquivalentClasses axioms contained in this ontology.



   .. py:method:: general_class_axioms() -> Iterable[owlapy.owl_axiom.OWLClassAxiom]
      :abstractmethod:


      Get the general class axioms of this ontology. This includes SubClass axioms with a complex class expression
         as the sub class and EquivalentClass axioms and DisjointClass axioms with only complex class expressions.

      :returns: General class axioms contained in this ontology.



   .. py:method:: data_property_domain_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyDomainAxiom]
      :abstractmethod:


      Gets the OWLDataPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: data_property_range_axioms(property: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_axiom.OWLDataPropertyRangeAxiom]
      :abstractmethod:


      Gets the OWLDataPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_domain_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyDomainAxiom]
      :abstractmethod:


      Gets the OWLObjectPropertyDomainAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: object_property_range_axioms(property: owlapy.owl_property.OWLObjectProperty) -> Iterable[owlapy.owl_axiom.OWLObjectPropertyRangeAxiom]
      :abstractmethod:


      Gets the OWLObjectPropertyRangeAxiom objects where the property is equal to the specified property.

      :param property: The property which is equal to the property of the retrieved axioms.

      :returns: The axioms matching the search.



   .. py:method:: get_owl_ontology_manager() -> _M
      :abstractmethod:


      Gets the manager that manages this ontology.



   .. py:method:: get_ontology_id() -> _OI
      :abstractmethod:


      Gets the OWLOntologyID belonging to this object.

      :returns: The OWLOntologyID.



   .. py:method:: is_anonymous() -> bool

      Check whether this ontology does contain an IRI or not.



   .. py:method:: add_axiom(axiom: Union[owlapy.owl_axiom.OWLAxiom, Iterable[owlapy.owl_axiom.OWLAxiom]])
      :abstractmethod:


      Add the specified axiom/axioms to the ontology.

      :param axiom: Can be a single axiom or a collection of axioms.

      :returns: Nothing.



   .. py:method:: remove_axiom(axiom: Union[owlapy.owl_axiom.OWLAxiom, Iterable[owlapy.owl_axiom.OWLAxiom]])
      :abstractmethod:


      Removes the specified axiom/axioms to the ontology.

      :param axiom: Can be a single axiom or a collection of axioms.

      :returns: Nothing.



   .. py:method:: save(document_iri: Optional[owlapy.iri.IRI] = None)

      Saves this ontology, using its IRI to determine where/how the ontology should be
      saved.

      :param document_iri: Whether you want to save in a different location.



.. py:class:: AbstractOWLReasoner(ontology: owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology)

   An OWLReasoner reasons over a set of axioms (the set of reasoner axioms) that is based on the imports closure of
   a particular ontology - the "root" ontology.


   .. py:attribute:: __slots__
      :value: ()



   .. py:method:: data_property_domains(pe: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(DataSomeValuesFrom(pe rdfs:Literal)). If direct is True: then if N is not
                empty then the return value is N, else the return value is the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), true). If direct is False: then the result of
                super_classes(DataSomeValuesFrom(pe rdfs:Literal), false) together with N if N is non-empty.
                (Note, rdfs:Literal is the top datatype).



   .. py:method:: object_property_domains(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are the direct or indirect domains of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose domains are to be retrieved.
      :param direct: Specifies if the direct domains should be retrieved (True), or if all domains should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(pe owl:Thing)). If direct is True: then if N is not empty
                then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), true). If direct is False: then the result of
                super_classes(ObjectSomeValuesFrom(pe owl:Thing), false) together with N if N is non-empty.



   .. py:method:: object_property_ranges(pe: owlapy.owl_property.OWLObjectProperty, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are the direct or indirect ranges of this property with respect to the
         imports closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      :returns: Let N = equivalent_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing)). If direct is True: then
                if N is not empty then the return value is N, else the return value is the result of
                super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), true). If direct is False: then
                the result of super_classes(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), false) together with N
                if N is non-empty.



   .. py:method:: equivalent_classes(ce: owlapy.class_expression.OWLClassExpression) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are equivalent to the specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose equivalent classes are to be retrieved.

      :returns: All class expressions C where the root ontology imports closure entails EquivalentClasses(ce C). If ce is
                not a class name (i.e. it is an anonymous class expression) and there are no such classes C then there will
                be no result. If ce is unsatisfiable with respect to the set of reasoner axioms then  owl:Nothing, i.e. the
                bottom node, will be returned.



   .. py:method:: disjoint_classes(ce: owlapy.class_expression.OWLClassExpression) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the class expressions that are disjoint with specified class expression with respect to the set of
      reasoner axioms.

      :param ce: The class expression whose disjoint classes are to be retrieved.

      :returns: All class expressions D where the set of reasoner axioms entails EquivalentClasses(D ObjectComplementOf(ce))
                or StrictSubClassOf(D ObjectComplementOf(ce)).



   .. py:method:: different_individuals(ind: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      Gets the individuals that are different from the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose different individuals are to be retrieved.

      :returns: All individuals x where the set of reasoner axioms entails DifferentIndividuals(ind x).



   .. py:method:: same_individuals(ind: owlapy.owl_individual.OWLNamedIndividual) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      Gets the individuals that are the same as the specified individual with respect to the set of
      reasoner axioms.

      :param ind: The individual whose same individuals are to be retrieved.

      :returns: All individuals x where the root ontology imports closure entails SameIndividual(ind x).



   .. py:method:: equivalent_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:


      Gets the simplified object properties that are equivalent to the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose equivalent object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(op e). If op is unsatisfiable with respect to the set of reasoner axioms
                then owl:bottomDataProperty will be returned.



   .. py:method:: equivalent_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Gets the data properties that are equivalent to the specified data property with respect to the set of
      reasoner axioms.

      :param dp: The data property whose equivalent data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails EquivalentDataProperties(dp e).
                If dp is unsatisfiable with respect to the set of reasoner axioms then owl:bottomDataProperty will
                be returned.



   .. py:method:: data_property_values(e: owlapy.owl_object.OWLEntity, pe: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_literal.OWLLiteral]
      :abstractmethod:


      Gets the data property values for the specified entity and data property expression.

      :param e: The owl entity (usually an individual) that is the subject of the data property values.
      :param pe: The data property expression whose values are to be retrieved for the specified entity.

      Note: Can be used to get values, for example, of 'label' property of owl entities such as classes and properties
      too (not only individuals).

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l).



   .. py:method:: object_property_values(ind: owlapy.owl_individual.OWLNamedIndividual, pe: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      Gets the object property values for the specified individual and object property expression.

      :param ind: The individual that is the subject of the object property values.
      :param pe: The object property expression whose values are to be retrieved for the specified individual.

      :returns: The named individuals such that for each individual j, the set of reasoner axioms entails
                ObjectPropertyAssertion(pe ind j).



   .. py:method:: instances(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False, timeout: int = 1000) -> Iterable[owlapy.owl_individual.OWLNamedIndividual]
      :abstractmethod:


      Gets the individuals which are instances of the specified class expression.

      :param ce: The class expression whose instances are to be retrieved.
      :param direct: Specifies if the direct instances should be retrieved (True), or if all instances should be
                     retrieved (False).
      :param timeout: Time limit in seconds until results must be returned, else empty set is returned.

      :returns: If direct is True, each named individual j where the set of reasoner axioms entails
                DirectClassAssertion(ce, j). If direct is False, each named individual j where the set of reasoner axioms
                entails ClassAssertion(ce, j). If ce is unsatisfiable with respect to the set of reasoner axioms then
                nothing returned.



   .. py:method:: sub_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the set of named classes that are the strict (potentially direct) subclasses of the specified class
      expression with respect to the reasoner axioms.

      :param ce: The class expression whose strict (direct) subclasses are to be retrieved.
      :param direct: Specifies if the direct subclasses should be retrieved (True) or if the all subclasses
                     (descendant) classes should be retrieved (False).

      :returns: If direct is True, each class C where reasoner axioms entails DirectSubClassOf(C, ce). If direct is False,
                each class C where reasoner axioms entails StrictSubClassOf(C, ce). If ce is equivalent to owl:Nothing then
                nothing will be returned.



   .. py:method:: disjoint_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:


      Gets the simplified object properties that are disjoint with the specified object property with respect
      to the set of reasoner axioms.

      :param op: The object property whose disjoint object properties are to be retrieved.

      :returns: All simplified object properties e where the root ontology imports closure entails
                EquivalentObjectProperties(e ObjectPropertyComplementOf(op)) or
                StrictSubObjectPropertyOf(e ObjectPropertyComplementOf(op)).



   .. py:method:: disjoint_data_properties(dp: owlapy.owl_property.OWLDataProperty) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Gets the data properties that are disjoint with the specified data property with respect
      to the set of reasoner axioms.

      :param dp: The data property whose disjoint data properties are to be retrieved.

      :returns: All data properties e where the root ontology imports closure entails
                EquivalentDataProperties(e DataPropertyComplementOf(dp)) or
                StrictSubDataPropertyOf(e DataPropertyComplementOf(dp)).



   .. py:method:: sub_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Gets the set of named data properties that are the strict (potentially direct) subproperties of the
      specified data property expression with respect to the imports closure of the root ontology.

      :param dp: The data property whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, each property P where the set of reasoner axioms entails DirectSubDataPropertyOf(P, pe).
                If direct is False, each property P where the set of reasoner axioms entails
                StrictSubDataPropertyOf(P, pe). If pe is equivalent to owl:bottomDataProperty then nothing will be
                returned.



   .. py:method:: super_data_properties(dp: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_property.OWLDataProperty]
      :abstractmethod:


      Gets the stream of data properties that are the strict (potentially direct) super properties of the
      specified data property with respect to the imports closure of the root ontology.

      :param dp: The data property whose super properties are to be retrieved.
      :type dp: OWLDataProperty
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.



   .. py:method:: sub_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:


      Gets the stream of simplified object property expressions that are the strict (potentially direct)
      subproperties of the specified object property expression with respect to the imports closure of the root
      ontology.

      :param op: The object property expression whose strict (direct) subproperties are to be retrieved.
      :param direct: Specifies if the direct subproperties should be retrieved (True) or if the all subproperties
                     (descendants) should be retrieved (False).

      :returns: If direct is True, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails DirectSubObjectPropertyOf(P, pe).
                If direct is False, simplified object property expressions, such that for each simplified object property
                expression, P, the set of reasoner axioms entails StrictSubObjectPropertyOf(P, pe).
                If pe is equivalent to owl:bottomObjectProperty then nothing will be returned.



   .. py:method:: super_object_properties(op: owlapy.owl_property.OWLObjectPropertyExpression, direct: bool = False) -> Iterable[owlapy.owl_property.OWLObjectPropertyExpression]
      :abstractmethod:


      Gets the stream of object properties that are the strict (potentially direct) super properties of the
      specified object property with respect to the imports closure of the root ontology.

      :param op: The object property expression whose super properties are to be
                 retrieved.
      :type op: OWLObjectPropertyExpression
      :param direct: Specifies if the direct super properties should be retrieved (True) or if the all
                     super properties (ancestors) should be retrieved (False).
      :type direct: bool

      :returns: Iterable of super properties.



   .. py:method:: types(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClass]
      :abstractmethod:


      Gets the named classes which are (potentially direct) types of the specified named individual.

      :param ind: The individual whose types are to be retrieved.
      :param direct: Specifies if the direct types should be retrieved (True), or if all types should be retrieved
                     (False).

      :returns: If direct is True, each named class C where the set of reasoner axioms entails
                DirectClassAssertion(C, ind). If direct is False, each named class C where the set of reasoner axioms
                entails ClassAssertion(C, ind).



   .. py:method:: get_root_ontology() -> owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology
      :abstractmethod:


      Gets the "root" ontology that is loaded into this reasoner. The reasoner takes into account the axioms in
      this ontology and its import's closure.



   .. py:method:: super_classes(ce: owlapy.class_expression.OWLClassExpression, direct: bool = False) -> Iterable[owlapy.class_expression.OWLClassExpression]
      :abstractmethod:


      Gets the stream of named classes that are the strict (potentially direct) super classes of the specified
      class expression with respect to the imports closure of the root ontology.

      :param ce: The class expression whose strict (direct) super classes are to be retrieved.
      :param direct: Specifies if the direct super classes should be retrieved (True) or if the all super classes
                     (ancestors) classes should be retrieved (False).

      :returns: If direct is True, each class C where the set of reasoner axioms entails DirectSubClassOf(ce, C).
                If direct is False, each class C where  set of reasoner axioms entails StrictSubClassOf(ce, C).
                If ce is equivalent to owl:Thing then nothing will be returned.



.. py:class:: AbstractOWLReasonerEx(ontology: owlapy.abstracts.abstract_owl_ontology.AbstractOWLOntology)

   Bases: :py:obj:`AbstractOWLReasoner`


   Extra convenience methods for OWL Reasoners


   .. py:method:: data_property_ranges(pe: owlapy.owl_property.OWLDataProperty, direct: bool = False) -> Iterable[owlapy.owl_data_ranges.OWLDataRange]

      Gets the data ranges that are the direct or indirect ranges of this property with respect to the imports
      closure of the root ontology.

      :param pe: The property expression whose ranges are to be retrieved.
      :param direct: Specifies if the direct ranges should be retrieved (True), or if all ranges should be retrieved
                     (False).

      Returns:



   .. py:method:: all_data_property_values(pe: owlapy.owl_property.OWLDataProperty, direct: bool = True) -> Iterable[owlapy.owl_literal.OWLLiteral]

      Gets all values for the given data property expression that appear in the knowledge base.

      :param pe: The data property expression whose values are to be retrieved
      :param direct: Specifies if only the direct values of the data property pe should be retrieved (True), or if
                     the values of sub properties of pe should be taken into account (False).

      :returns: A set of OWLLiterals containing literals such that for each literal l in the set, the set of reasoner
                axioms entails DataPropertyAssertion(pe ind l) for any ind.



   .. py:method:: ind_data_properties(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = True) -> Iterable[owlapy.owl_property.OWLDataProperty]

      Gets all data properties for the given individual that appear in the knowledge base.

      :param ind: The named individual whose data properties are to be retrieved
      :param direct: Specifies if the direct data properties should be retrieved (True), or if all
                     data properties should be retrieved (False), so that sub properties are taken into account.

      :returns: All data properties pe where the set of reasoner axioms entails DataPropertyAssertion(pe ind l)
                for atleast one l.



   .. py:method:: ind_object_properties(ind: owlapy.owl_individual.OWLNamedIndividual, direct: bool = True) -> Iterable[owlapy.owl_property.OWLObjectProperty]

      Gets all object properties for the given individual that appear in the knowledge base.

      :param ind: The named individual whose object properties are to be retrieved
      :param direct: Specifies if the direct object properties should be retrieved (True), or if all
                     object properties should be retrieved (False), so that sub properties are taken into account.

      :returns: All data properties pe where the set of reasoner axioms entails ObjectPropertyAssertion(pe ind ind2)
                for atleast one ind2.



